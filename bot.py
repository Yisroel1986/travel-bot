import os
import logging
import sys
import psutil
import sqlite3
import json
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardRemove
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackContext
)
from telegram.request import HTTPXRequest
from datetime import datetime
from flask import Flask, request
import asyncio
import threading

from deep_translator import GoogleTranslator  # –î–ª—è auto-detect —è–∑—ã–∫–∞

# --- LOGGING AND SETTINGS ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", 'https://your-app.onrender.com')

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã
def is_bot_already_running():
    current_process = psutil.Process()
    for process in psutil.process_iter(['pid', 'name', 'cmdline']):
        if (
            process.info['name'] == current_process.name()
            and process.info['cmdline'] == current_process.cmdline()
            and process.info['pid'] != current_process.pid
        ):
            return True
    return False

# –≠–¢–ê–ü–´ (–ø–æ –≤–∞—à–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é)
(
    STAGE_GREET,  # –ï—Ç–∞–ø 1: –í—ñ—Ç–∞–Ω–Ω—è
    STAGE_NO_RESPONSE,  # –ï—Ç–∞–ø 2: –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –Ω–µ —Ö–æ—á–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏/–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
    STAGE_DETAILS,  # –ï—Ç–∞–ø 3: –î–µ—Ç–∞–ª—ñ —Ç—É—Ä—É
    STAGE_QUESTIONS,  # –ï—Ç–∞–ø 4: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è
    STAGE_IMPRESSION,  # –ï—Ç–∞–ø 5: –ó–∞–ø–∏—Ç –ø—Ä–æ –∑–∞–≥–∞–ª—å–Ω–µ –≤—Ä–∞–∂–µ–Ω–Ω—è
    STAGE_CLOSE_DEAL,  # –ï—Ç–∞–ø 6: –ó–∞–∫—Ä–∏—Ç—Ç—è —É–≥–æ–¥–∏
    STAGE_PAYMENT,  # –≠—Ç–∞–ø 7 (–±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è)
    STAGE_PAYMENT_CONFIRM,  # –≠—Ç–∞–ø 8: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
    STAGE_END
) = range(9)

# Flask app
app = Flask(__name__)
application = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Telegram Application

# DB
def init_db():
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS conversation_state (
            user_id TEXT PRIMARY KEY,
            current_stage INTEGER,
            user_data TEXT,
            last_interaction TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def load_user_state(user_id: str):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("SELECT current_stage, user_data FROM conversation_state WHERE user_id = ?", (user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return row[0], row[1]
    return None, None

def save_user_state(user_id: str, stage: int, user_data: dict):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    data_json = json.dumps(user_data, ensure_ascii=False)
    now = datetime.now().isoformat()
    c.execute("""
        INSERT OR REPLACE INTO conversation_state (user_id, current_stage, user_data, last_interaction)
        VALUES (?, ?, ?, ?)
    """, (user_id, stage, data_json, now))
    conn.commit()
    conn.close()

#
# --- HELPERS ---
#
async def typing_simulation(update: Update, text: str):
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º '–Ω–∞–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è', –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç. """
    await update.effective_chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(min(2, max(1, len(text)/80)))
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())

def mention_user(update: Update) -> str:
    user = update.effective_user
    return user.first_name if user and user.first_name else "–¥—Ä—É–∂–µ"

def translate_to_ukrainian(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."""
    try:
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ -> –ø–µ—Ä–µ–≤–æ–¥ –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
        translator = GoogleTranslator(source='auto', target='uk')
        result = translator.translate(text)
        return result.lower()
    except Exception as e:
        logger.error("Translation error: %s", e)
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤–µ—Ä–Ω—ë–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        return text.lower()

#
# --- KEYWORD DETECTION ---
#
def is_affirmative(ua_text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º '—Ç–∞–∫', '–¥–æ–±—Ä–µ', '–∑–≤—ñ—Å–Ω–æ' –∏ —Ç.–ø. (—É–∂–µ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º)."""
    keywords = ["—Ç–∞–∫", "–¥–æ–±—Ä–µ", "–∑–≤—ñ—Å–Ω–æ", "–∑–≤–∏—á–∞–π–Ω–æ", "–ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ", "—Ä–æ–∑–∫–∞–∂—ñ—Ç—å",
                "–ø–æ—á–∏–Ω–∞—î–º–æ", "–≥–æ—Ç–æ–≤–∏–π", "–≥–æ—Ç–æ–≤–∞", "–≥–∞", "–¥–∞–≤–∞–π", "—Ç–∞–∫–µ", "–∞–≥–∞"]
    return any(k in ua_text for k in keywords)

def is_negative(ua_text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º '–Ω—ñ', '–Ω–µ —Ö–æ—á—É' –∏ —Ç.–ø. (—É–∂–µ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º)."""
    keywords = ["–Ω—ñ ", "–Ω—ñ.", "–Ω—ñ!", "–Ω–µ —Ö–æ—á—É", "–Ω–µ –º–æ–∂—É", "–Ω–µ –±—É–¥—É",
                "–Ω–µ –≥–æ—Ç–æ–≤–∏–π", "–Ω–µ –≥–æ—Ç–æ–≤–∞", "–≤—ñ–¥–º–æ–≤–ª—è—é—Å—è"]
    return any(k in ua_text for k in keywords)

def contains_price_request(ua_text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ —Ü–µ–Ω—É."""
    # –ù–∞–ø—Ä–∏–º–µ—Ä: "–≤–∞—Ä—Ç—ñ—Å—Ç—å", "—Ü—ñ–Ω–∞"
    words = ["–≤–∞—Ä—Ç—ñ—Å—Ç—å", "—Ü—ñ–Ω–∞"]
    return any(w in ua_text for w in words)

def contains_details_request(ua_text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '–¥–µ—Ç–∞–ª—ñ'."""
    # –ù–∞–ø—Ä–∏–º–µ—Ä: "–¥–µ—Ç–∞–ª—ñ", "—Ä–æ–∑–∫–∞–∂–∏ –¥–æ–∫–ª–∞–¥–Ω–æ", "–¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ", ...
    words = ["–¥–µ—Ç–∞–ª—ñ", "–¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ"]
    return any(w in ua_text for w in words)

def contains_booking_request(ua_text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—Ä–æ–Ω—å, –æ–ø–ª–∞—Ç—É."""
    # –ù–∞–ø—Ä–∏–º–µ—Ä: "–±—Ä–æ–Ω—é–≤–∞—Ç–∏", "–∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏", "–æ–ø–ª–∞—Ç–∏—Ç–∏", "—Ö–æ—á—É –æ–ø–ª–∞—Ç–∏—Ç–∏"
    words = ["–±—Ä–æ–Ω—é", "–∑–∞–±—Ä–æ–Ω—é", "–æ–ø–ª–∞—Ç", "–∫—É–ø–∏—Ç–∏"]
    return any(w in ua_text for w in words)

def user_says_no_questions(ua_text: str) -> bool:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."""
    # –Ω–∞–ø—Ä–∏–º–µ—Ä: "–Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å", "–≤—Å–µ —è—Å–Ω–æ", "–≤—Å–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ"
    words = ["–Ω–µ–º–∞—î", "–Ω–µ–º–∞ –ø–∏—Ç–∞–Ω—å", "–≤—Å–µ —è—Å–Ω–æ", "–≤—Å–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ", "–≤—Å–µ –æ–∫", "–¥—è–∫—É—é"]
    return any(w in ua_text for w in words)

#
# --- SCENE HANDLERS ---
#
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    init_db()

    saved_stage, saved_data = load_user_state(user_id)
    if saved_stage is not None and saved_data is not None:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        text = (
            "–í–∏ –º–∞—î—Ç–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—É —Ä–æ–∑–º–æ–≤—É. –ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —Ç–æ–≥–æ –∂ –º—ñ—Å—Ü—è "
            "—á–∏ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ?\n\n–í–≤–µ–¥—ñ—Ç—å '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' –∞–±–æ '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'."
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        return STAGE_GREET
    else:
        user_name = mention_user(update)
        greeting_text = (
            f"–í—ñ—Ç–∞—é –≤–∞—Å, {user_name}! üòä –í–∏ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏—Å—å –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–º —Ç—É—Ä–æ–º –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞, –£–≥–æ—Ä—â–∏–Ω–∞. "
            "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å. –î–æ–±—Ä–µ?"
        )
        await typing_simulation(update, greeting_text)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        return STAGE_GREET

async def greet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text_original = update.message.text
    ua_text = translate_to_ukrainian(user_text_original)

    if "–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏" in ua_text:
        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç–∞–¥–∏—é
        old_stage, old_data = load_user_state(user_id)
        if old_stage is not None:
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Ç—É–¥–∞
            context.user_data.update(json.loads(old_data))
            response_text = "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Ä–æ–∑–º–æ–≤–∏."
            await typing_simulation(update, response_text)
            return old_stage
        else:
            # –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            response_text = "–ù–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö, –ø–æ—á–Ω—ñ–º–æ –∑ –Ω—É–ª—è."
            await typing_simulation(update, response_text)
            save_user_state(user_id, STAGE_DETAILS, context.user_data)
            return STAGE_DETAILS

    if "–ø–æ—á–∞—Ç–∏" in ua_text or "–∑–∞–Ω–æ–≤–æ" in ua_text:
        context.user_data.clear()
        greeting_text = (
            "–í—ñ—Ç–∞—é –≤–∞—Å! üòä –í–∏ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏—Å—å –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–º —Ç—É—Ä–æ–º –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞, –£–≥–æ—Ä—â–∏–Ω–∞. "
            "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å. –î–æ–±—Ä–µ?"
        )
        await typing_simulation(update, greeting_text)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        return STAGE_GREET

    if is_affirmative(ua_text):
        # "–°–¶–ï–ù–ê–†–Ü–ô ‚Ññ2 - –∫–ª—ñ—î–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ–∑–∏—Ç–∏–≤–Ω–æ"
        text = (
            "–î—è–∫—É—é –∑–∞ –≤–∞—à—É –∑–≥–æ–¥—É! üòä\n"
            "–ó–≤—ñ–¥–∫–∏ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏: –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞? üöå\n"
            "–î–ª—è –∫–æ–≥–æ –≤–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç–µ —Ü—é –ø–æ—ó–∑–¥–∫—É? –ß–∏ –ø–ª–∞–Ω—É—î—Ç–µ —ó—Ö–∞—Ç–∏ —Ä–∞–∑–æ–º —ñ–∑ –¥–∏—Ç–∏–Ω–æ—é?"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        return STAGE_DETAILS
    elif is_negative(ua_text):
        # "–í–ê–†–Ü–ê–ù–¢ –†–û–ó–í–ò–¢–ö–£ –ü–û–î–Ü–ô ‚Ññ1" - –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ö–æ—á–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
        short_tour_text = (
            "–Ø –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –Ω–∞—à –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–π —Ç—É—Ä –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∏, –£–≥–æ—Ä—â–∏–Ω–∞. "
            "–¶–µ —à–∞–Ω—Å –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ –Ω–µ–∑–∞–±—É—Ç–Ω—ñ–π –¥–µ–Ω—å —Å–µ—Ä–µ–¥ –µ–∫–∑–æ—Ç–∏—á–Ω–∏—Ö —Ç–≤–∞—Ä–∏–Ω —ñ –≤–æ–¥–Ω–æ—á–∞—Å –Ω–∞—Ä–µ—à—Ç—ñ –≤—ñ–¥–ø–æ—á–∏—Ç–∏ –≤–∞–º. ü¶Åüêß "
            "–ú–∏ –≤—Å–µ –æ—Ä–≥–∞–Ω—ñ–∑—É—î–º–æ —Ç–∞–∫, —â–æ–± –≤–∏ –º–æ–≥–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—è –º–æ–º–µ–Ω—Ç–∞–º–∏.\n\n"
            "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π –∞–≤—Ç–æ–±—É—Å, –Ω–∞—Å–∏—á–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ —ñ –º—ñ–Ω—ñ–º—É–º —Ç—É—Ä–±–æ—Ç –¥–ª—è –≤–∞—Å ‚Äì –≤—Å–µ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–æ. "
            "–î—ñ—Ç–∏ –æ—Ç—Ä–∏–º–∞—é—Ç—å –º–æ—Ä–µ –≤—Ä–∞–∂–µ–Ω—å, –∞ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—å —Ä–∞–∑–æ–º –∑ –Ω–∏–º–∏. üéâ\n"
            "–ö–æ–∂–µ–Ω —Ä–∞–∑ –Ω–∞—à—ñ –∫–ª—ñ—î–Ω—Ç–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è —ñ–∑ —Å–≤–æ—ó–º–∏ –¥—ñ—Ç–ª–∞—Ö–∞–º–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —â–∞—Å–ª–∏–≤–∏–º–∏. "
            "–í–∏ —Ç–æ—á–Ω–æ –ø–æ–ª—é–±–∏—Ç–µ —Ü–µ–π —Ç—É—Ä! üòä\n\n"
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞.\n"
            "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: –¶—ñ–ª–∏–π –¥–µ–Ω—å, –≤–≤–µ—á–µ—Ä—ñ –í–∏ –≤–∂–µ –≤–¥–æ–º–∞.\n"
            "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω–∏–π –∞–≤—Ç–æ–±—É—Å —ñ–∑ –∫–ª—ñ–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–µ–º.\n"
            "–ó–æ–æ–ø–∞—Ä–∫: –ë—ñ–ª—å—à–µ 500 –≤–∏–¥—ñ–≤ —Ç–≤–∞—Ä–∏–Ω, —à–æ—É –º–æ—Ä—Å—å–∫–∏—Ö –∫–æ—Ç–∏–∫—ñ–≤, —Ñ–æ—Ç–æ —Ç–∞ –±–∞–≥–∞—Ç–æ –≤—Ä–∞–∂–µ–Ω—å! ü¶Å\n"
            "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è: –ó–∞ –≤–ª–∞—Å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫, –∞–ª–µ —î —á–∞—Å –Ω–∞ –æ–±—ñ–¥.\n"
            "–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–æ–∑–≤–∞–≥–∏: –ü—ñ—Å–ª—è –∑–æ–æ–ø–∞—Ä–∫—É ‚Äî –≤–µ–ª–∏–∫–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä.\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å: 1900 –≥—Ä–Ω –∑ –æ—Å–æ–±–∏.\n\n"
            "–ß–∏ —î —É –≤–∞—Å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?"
        )
        await typing_simulation(update, short_tour_text)
        save_user_state(user_id, STAGE_NO_RESPONSE, context.user_data)
        return STAGE_NO_RESPONSE
    else:
        text = (
            "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. "
            "–í–∏ –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É —á–∏ –º–æ–∂–µ–º–æ –≤—ñ–¥–∫–ª–∞—Å—Ç–∏ —Ä–æ–∑–º–æ–≤—É?"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        return STAGE_GREET

async def no_response_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text_original = update.message.text
    ua_text = translate_to_ukrainian(user_text_original)

    if is_affirmative(ua_text):
        # –ï—Å–ª–∏ —Ç–µ–ø–µ—Ä—å –∫–ª–∏–µ–Ω—Ç —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è
        text = (
            "–ß—É–¥–æ–≤–æ! –¢–æ–¥—ñ –ø–µ—Ä–µ–π–¥–µ–º–æ –¥–æ –¥–µ—Ç–∞–ª–µ–π. "
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞, —Ü—ñ–ª–∏–π –¥–µ–Ω—å. "
            "–í–∞—Ä—Ç—ñ—Å—Ç—å 1900 –≥—Ä–Ω, –≤–∫–ª—é—á–∞—î —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∫—É —Ç–∞ —Å—É–ø—Ä–æ–≤—ñ–¥.\n\n"
            "–ß–∏ —î —É –≤–∞—Å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è?"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_QUESTIONS, context.user_data)
        return STAGE_QUESTIONS
    else:
        text = "–î–æ–±—Ä–µ, —è–∫—â–æ –∑'—è–≤–ª—è—Ç—å—Å—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî –ø–∏—à—ñ—Ç—å, —è –Ω–∞ –∑–≤'—è–∑–∫—É!"
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_END, context.user_data)
        return STAGE_END

async def details_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text_original = update.message.text
    ua_text = translate_to_ukrainian(user_text_original)

    # –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É–ª "–≤–∞—Ä—Ç—ñ—Å—Ç—å"
    if contains_price_request(ua_text):
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —Ç–∞ –ú—É–∫–∞—á–µ–≤–∞. üåü\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å 1900 –≥—Ä–Ω –∑ –æ—Å–æ–±–∏. –¶–µ —Ü—ñ–Ω–∞, —â–æ –≤–∫–ª—é—á–∞—î –≤—Å–µ: "
            "—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —ñ —Å—É–ø—Ä–æ–≤—ñ–¥. –í–∏ –ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ —ñ –±—ñ–ª—å—à–µ "
            "–Ω–µ —Ç—É—Ä–±—É—î—Ç–µ—Å—è –ø—Ä–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é! üè∑Ô∏è\n\n"
            "–ß–∏ —î —É –≤–∞—Å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ç—É—Ä—É?"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_QUESTIONS, context.user_data)
        return STAGE_QUESTIONS

    # –ï—Å–ª–∏ "–¥–µ—Ç–∞–ª—ñ"
    elif contains_details_request(ua_text):
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —Ç–∞ –ú—É–∫–∞—á–µ–≤–∞. –¶—ñ–ª–∏–π –¥–µ–Ω—å –ø—Ä–∏–≥–æ–¥, —É–≤–µ—á–µ—Ä—ñ –≤–∂–µ –≤–¥–æ–º–∞. üåø\n"
            "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –∫–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω–∏–π –∞–≤—Ç–æ–±—É—Å, –∫–ª—ñ–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å, –∑–∞—Ä—è–¥–∫–∏ –¥–ª—è –≥–∞–¥–∂–µ—Ç—ñ–≤.\n"
            "–ó–æ–æ–ø–∞—Ä–∫: –ø–æ–Ω–∞–¥ 500 –≤–∏–¥—ñ–≤ —Ç–≤–∞—Ä–∏–Ω, —à–æ—É –º–æ—Ä—Å—å–∫–∏—Ö –∫–æ—Ç–∏–∫—ñ–≤, —Ñ–æ—Ç–æ, –≤—Ä–∞–∂–µ–Ω–Ω—è!\n"
            "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è: —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ, –∞–ª–µ —î —á–∞—Å –Ω–∞ –æ–±—ñ–¥ —É –∫–∞—Ñ–µ.\n"
            "–ü—ñ—Å–ª—è –∑–æ–æ–ø–∞—Ä–∫—É: –≤–µ–ª–∏–∫–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä –¥–ª—è –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É —á–∏ –ø–æ–∫—É–ø–æ–∫.\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å: 1900 –≥—Ä–Ω (—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, —Å—É–ø—Ä–æ–≤—ñ–¥).\n\n"
            "–ß–∏ —î —É –≤–∞—Å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_QUESTIONS, context.user_data)
        return STAGE_QUESTIONS

    # –ï—Å–ª–∏ "–æ–ø–ª–∞—Ç–∏—Ç—å" –∏–ª–∏ "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
    elif contains_booking_request(ua_text):
        text = (
            "–Ø –¥—É–∂–µ —Ä–∞–¥–∞, —â–æ –í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ–¥–æ—Ä–æ–∂ –∑ –Ω–∞–º–∏, —Ü–µ –±—É–¥–µ –¥—ñ–π—Å–Ω–æ –∫—Ä—É—Ç–∞ –ø–æ—ó–∑–¥–∫–∞. "
            "–î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—Å —ñ –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏.\n\n"
            "–î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å —É —Ä–æ–∑–º—ñ—Ä—ñ 30% —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º —É—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏.\n"
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank? üí≥"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_PAYMENT, context.user_data)
        return STAGE_PAYMENT
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞—ë–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
        text = (
            "–î–ª—è –∫–æ–≥–æ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ —Ü—é –ø–æ—ó–∑–¥–∫—É? –°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ?\n\n"
            "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è?"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_QUESTIONS, context.user_data)
        return STAGE_QUESTIONS

async def questions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text_original = update.message.text
    ua_text = translate_to_ukrainian(user_text_original)

    # –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    if user_says_no_questions(ua_text):
        text = "–Ø–∫ –≤–∞–º –Ω–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤ —Ü—ñ–ª–æ–º—É? üåü"
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_IMPRESSION, context.user_data)
        return STAGE_IMPRESSION
    else:
        # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ "–¥–∏—Ç–∏–Ω–∞ –∑–ª—è–∫–∞—î—Ç—å—Å—è"
        if "–¥–∏—Ç–∏–Ω–∞" in ua_text and "–∑–ª—è–∫–∞" in ua_text:
            answer_text = (
                "–†–æ–∑—É–º—ñ—é –≤–∞—à—ñ —Ö–≤–∏–ª—é–≤–∞–Ω–Ω—è. –ú–∏ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤—É—î–º–æ –µ–∫—Å–∫—É—Ä—Å—ñ—é —Ç–∞–∫, —â–æ–± –¥—ñ—Ç–∏ –ø–æ—á—É–≤–∞–ª–∏—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ. "
                "–£ –∑–æ–æ–ø–∞—Ä–∫—É —î –∑–æ–Ω–∏ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É, –¥–∏—Ç—è—á—ñ –º–∞–π–¥–∞–Ω—á–∏–∫–∏, —à–æ—É –º–æ—Ä—Å—å–∫–∏—Ö –∫–æ—Ç–∏–∫—ñ–≤. "
                "–ü—Ä–æ–≥—Ä–∞–º–∞ –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∞ –Ω–∞ –¥—ñ—Ç–µ–π, —Ç–æ–º—É —Ö–≤–∏–ª—é–≤–∞—Ç–∏—Å—è –Ω–µ –≤–∞—Ä—Ç–æ!"
            )
        elif "–ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–¥—É–º–∞—Ç–∏" in ua_text:
            answer_text = (
                "–†–æ–∑—É–º—ñ—é, —â–æ —Ä—ñ—à–µ–Ω–Ω—è –≤–∞–∂–ª–∏–≤–µ. –ú–∏ –º–æ–∂–µ–º–æ –∑–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏ –±–µ–∑ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏, "
                "—â–æ–± –≤–∏ –º–∞–ª–∏ —á–∞—Å —É—Ö–≤–∞–ª–∏—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è. –ú—ñ—Å—Ü—è –æ–±–º–µ–∂–µ–Ω—ñ!"
            )
        else:
            answer_text = (
                "–î—è–∫—É—é –∑–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! –ú–∏ –∑–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏. –Ø–∫—â–æ —É –≤–∞—Å —î –æ—Å–æ–±–ª–∏–≤—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è "
                "–∞–±–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –ø–æ–≤—ñ–¥–æ–º—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞."
            )

        await typing_simulation(update, answer_text + "\n\n–ß–∏ —î —â–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?")
        save_user_state(user_id, STAGE_QUESTIONS, context.user_data)
        return STAGE_QUESTIONS

async def impression_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text_original = update.message.text
    ua_text = translate_to_ukrainian(user_text_original)

    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω–æ -> –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
    if is_affirmative(ua_text):
        text = (
            "–ß—É–¥–æ–≤–æ! üéâ –î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—Å —ñ –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏, —â–æ–± –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫. "
            "–î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å 30% —ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏.\n"
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        return STAGE_CLOSE_DEAL
    elif is_negative(ua_text):
        text = (
            "–®–∫–æ–¥–∞ —Ü–µ —á—É—Ç–∏. –Ø–∫—â–æ —É –≤–∞—Å –ª–∏—à–∏–ª–∏—Å—è –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, "
            "–Ω–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞. –ú–∏ –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É!"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_END, context.user_data)
        return STAGE_END
    else:
        # –ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç "–Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å" etc.
        if "–ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–¥—É–º–∞—Ç–∏" in ua_text:
            text = (
                "–†–æ–∑—É–º—ñ—é. –ú–∏ –º–æ–∂–µ–º–æ —Ç—Ä–∏–º–∞—Ç–∏ –º—ñ—Å—Ü–µ 24 –≥–æ–¥–∏–Ω–∏ –±–µ–∑ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏, "
                "—â–æ–± –≤–∏ –º–∞–ª–∏ —á–∞—Å –≤—Å–µ –æ–±–¥—É–º–∞—Ç–∏. –ú—ñ—Å—Ü—è —à–≤–∏–¥–∫–æ —Ä–æ–∑–∫—É–ø–æ–≤—É—é—Ç—å!"
            )
            await typing_simulation(update, text)
            save_user_state(user_id, STAGE_END, context.user_data)
            return STAGE_END
        else:
            text = (
                "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∞, —á–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. "
                "–Ø–∫—â–æ —Ç–∞–∫ ‚Äî —Å–∫–∞–∂—ñ—Ç—å, —ñ —è –æ—Ñ–æ—Ä–º–ª—é –±—Ä–æ–Ω—å! –Ø–∫—â–æ –Ω—ñ ‚Äî –º–æ–∂–µ–º–æ –≤—ñ–¥–∫–ª–∞—Å—Ç–∏."
            )
            await typing_simulation(update, text)
            save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
            return STAGE_CLOSE_DEAL

async def close_deal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text_original = update.message.text
    ua_text = translate_to_ukrainian(user_text_original)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–∏ –æ–ø–ª–∞—Ç—É
    if contains_booking_request(ua_text) or is_affirmative(ua_text):
        text = (
            "–ß—É–¥–æ–≤–æ! –û—Å—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n"
            "–ö–∞—Ä—Ç–∫–∞: 0000 0000 0000 0000 (Family Place)\n\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω, —ñ —è –æ–¥—Ä–∞–∑—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è!"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_PAYMENT, context.user_data)
        return STAGE_PAYMENT
    elif is_negative(ua_text):
        text = "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –ë—É–¥—É —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ!"
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_END, context.user_data)
        return STAGE_END
    else:
        if "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤" in ua_text or "—ñ–Ω—à–∏–π" in ua_text:
            text = (
                "–ó–≤–∏—á–∞–π–Ω–æ, —É –Ω–∞—Å —î —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ç—É—Ä—ñ–≤ —ñ –¥–∞—Ç. "
                "–Ø–∫—ñ —Å–∞–º–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è —É –≤–∞—Å —î? –ú–æ–∂–µ–º–æ —â–æ—Å—å –æ–±—Ä–∞—Ç–∏!"
            )
            await typing_simulation(update, text)
            save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
            return STAGE_CLOSE_DEAL
        else:
            text = (
                "–ü–µ—Ä–µ–ø—Ä–æ—à—É—é, –Ω–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–ª–∞. –í–∏ —Ö–æ—á–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –±—Ä–æ–Ω—å —á–∏ —â–µ –º–∞—î—Ç–µ —Å—É–º–Ω—ñ–≤–∏?"
            )
            await typing_simulation(update, text)
            save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
            return STAGE_CLOSE_DEAL

async def payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text_original = update.message.text
    ua_text = translate_to_ukrainian(user_text_original)

    # –î–æ–ø—É—Å—Ç–∏–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª "–æ–ø–ª–∞—Ç–∏–≤" / "–≥–æ—Ç–æ–≤–æ"
    if "–æ–ø–ª–∞—Ç–∏–≤" in ua_text or "–≥–æ—Ç–æ–≤–æ" in ua_text or "–≤—ñ–¥–ø—Ä–∞–≤–∏–≤" in ua_text:
        text = (
            "–î—è–∫—É—é! –ó–∞—Ä–∞–∑ –ø–µ—Ä–µ–≤—ñ—Ä—é. –Ø–∫ –≤—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ, –Ω–∞–¥—ñ—à–ª—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —ñ –¥–µ—Ç–∞–ª—ñ –ø–æ—ó–∑–¥–∫–∏!"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_PAYMENT_CONFIRM, context.user_data)
        return STAGE_PAYMENT_CONFIRM
    else:
        text = (
            "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –æ–ø–ª–∞—Ç–∏ –∞–±–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å. "
            "–ß–µ–∫–∞—é –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_PAYMENT, context.user_data)
        return STAGE_PAYMENT

async def payment_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text_original = update.message.text
    ua_text = translate_to_ukrainian(user_text_original)

    text = (
        "–î—è–∫—É—é –∑–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è! üéâ –ú–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–≥–ª–∏ –∑–∞ –≤–∞–º–∏ –º—ñ—Å—Ü–µ –≤ —Ç—É—Ä—ñ –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞. "
        "–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º —è –Ω–∞–¥—ñ—à–ª—é —Å–ø–∏—Å–æ–∫ —Ä–µ—á–µ–π, —á–∞—Å –≤–∏—ó–∑–¥—É —Ç–∞ –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ. "
        "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è, –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É!"
    )
    await typing_simulation(update, text)
    save_user_state(user_id, STAGE_END, context.user_data)
    return STAGE_END

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info("User %s canceled.", user.first_name if user else "Unknown")
    text = "–ì–∞—Ä–∞–∑–¥, —Ç–æ–¥—ñ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É. –Ø–∫—â–æ —â–æ ‚Äî –ø–∏—à—ñ—Ç—å!"
    await typing_simulation(update, text)
    user_id = str(update.effective_user.id)
    save_user_state(user_id, STAGE_END, context.user_data)
    return ConversationHandler.END

#
# --- WEBHOOK & BOT LAUNCH ---
#
@app.route('/')
def index():
    return "–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î! –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π."

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == "POST":
        global application
        if not application:
            logger.error("Application is not initialized yet.")
            return "No application available"

        data = request.get_json(force=True)
        update = Update.de_json(data, application.bot)
        loop = application.bot_data.get("loop")
        if loop:
            asyncio.run_coroutine_threadsafe(application.process_update(update), loop)
            logger.info("Webhook received and processed.")
        else:
            logger.error("No event loop available to process update.")
    return "OK"

async def setup_webhook(url, app_ref):
    webhook_url = f"{url}/webhook"
    await app_ref.bot.set_webhook(webhook_url)
    logger.info(f"Webhook set to: {webhook_url}")

async def run_bot():
    if is_bot_already_running():
        logger.error("Another instance is already running. Exiting.")
        sys.exit(1)

    from telegram.ext import ApplicationBuilder

    logger.info("Starting bot...")

    request = HTTPXRequest(connect_timeout=20, read_timeout=40)
    builder = ApplicationBuilder().token(BOT_TOKEN).request(request)
    global application
    application = builder.build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            STAGE_GREET: [MessageHandler(filters.TEXT & ~filters.COMMAND, greet_handler)],
            STAGE_NO_RESPONSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, no_response_handler)],
            STAGE_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, details_handler)],
            STAGE_QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, questions_handler)],
            STAGE_IMPRESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, impression_handler)],
            STAGE_CLOSE_DEAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, close_deal_handler)],
            STAGE_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment_handler)],
            STAGE_PAYMENT_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment_confirm_handler)],
            STAGE_END: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               lambda u, c: c.bot.send_message(u.effective_chat.id,
                               "–î—è–∫—É—é! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî /start."))
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_command)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)

    await setup_webhook(WEBHOOK_URL, application)
    await application.initialize()
    await application.start()

    loop = asyncio.get_running_loop()
    application.bot_data["loop"] = loop

    logger.info("Bot is online and ready.")

def start_flask():
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"Starting Flask on port {port}")
    app.run(host='0.0.0.0', port=port)

if __name__ == '__main__':
    bot_thread = threading.Thread(target=lambda: asyncio.run(run_bot()), daemon=True)
    bot_thread.start()
    logger.info("Bot thread started. Now starting Flask...")
    start_flask()
