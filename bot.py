import os
import logging
import sys
import psutil
import sqlite3
import json
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardRemove
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackContext
)
from telegram.request import HTTPXRequest
from datetime import datetime
from flask import Flask, request
import asyncio
import threading
import re
import requests

try:
    from pydantic import BaseModel, Field, ValidationError
except ImportError:
    BaseModel = None

try:
    import spacy
    nlp_uk = spacy.load("uk_core_news_sm")
except:
    nlp_uk = None

try:
    import openai
except:
    openai = None

try:
    from transformers import pipeline
    sentiment_pipeline = pipeline("sentiment-analysis", model="nlptown/bert-base-multilingual-uncased-sentiment")
except:
    sentiment_pipeline = None

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CRM_API_KEY = os.getenv("CRM_API_KEY")
CRM_API_URL = os.getenv("CRM_API_URL", "https://familyplace.keycrm.app/api/v1/products")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", 'https://your-app.onrender.com')

if openai and OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à —Å —Ç—É—Ä–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ —Ö–æ–¥–∏—Ç—å –≤ CRM –≤—Å—è–∫–∏–π —Ä–∞–∑
CRM_CACHE = []

def is_bot_already_running():
    current_process = psutil.Process()
    for process in psutil.process_iter(['pid', 'name', 'cmdline']):
        if (
            process.info['name'] == current_process.name()
            and process.info['cmdline'] == current_process.cmdline()
            and process.info['pid'] != current_process.pid
        ):
            return True
    return False

if BaseModel is not None:
    class ProductModel(BaseModel):
        id: int
        name: str
        price: float = Field(0.0)
        description: str = Field("", alias="description")

(
    STAGE_GREET,
    STAGE_DEPARTURE,
    STAGE_TRAVEL_PARTY,
    STAGE_CHILD_AGE,
    STAGE_CHOICE,
    STAGE_DETAILS,
    STAGE_ADDITIONAL_QUESTIONS,
    STAGE_IMPRESSION,
    STAGE_CLOSE_DEAL,
    STAGE_PAYMENT,
    STAGE_PAYMENT_CONFIRM,
    STAGE_END
) = range(12)

NO_RESPONSE_DELAY_SECONDS = 6 * 3600

app = Flask(__name__)
application = None

def init_db():
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS conversation_state (
            user_id TEXT PRIMARY KEY,
            current_stage INTEGER,
            user_data TEXT,
            last_interaction TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def load_user_state(user_id: str):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("SELECT current_stage, user_data FROM conversation_state WHERE user_id = ?", (user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return row[0], row[1]
    return None, None

def save_user_state(user_id: str, current_stage: int, user_data: dict):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    user_data_json = json.dumps(user_data, ensure_ascii=False)
    now = datetime.now().isoformat()
    c.execute("""
        INSERT OR REPLACE INTO conversation_state (user_id, current_stage, user_data, last_interaction)
        VALUES (?, ?, ?, ?)
    """, (user_id, current_stage, user_data_json, now))
    conn.commit()
    conn.close()

def fetch_all_products():
    """
    –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥: –¥–æ—Å—Ç–∞—ë–º —Ç—É—Ä—ã –∏–∑ CRM.
    –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ä–∞–∑ –≤ N –º–∏–Ω—É—Ç —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫,
    –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫—ç—à–∞ CRM_CACHE.
    """
    if not CRM_API_KEY or not CRM_API_URL:
        logger.warning("CRM_API_KEY or CRM_API_URL not found. Returning empty tours list.")
        return []
    headers = {"Authorization": f"Bearer {CRM_API_KEY}", "Accept": "application/json"}
    all_items = []
    page = 1
    limit = 50

    while True:
        logger.info("Attempting to fetch from CRM... page=%s", page)
        params = {"page": page, "limit": limit}
        try:
            resp = requests.get(CRM_API_URL, headers=headers, params=params, timeout=10)
            if resp.status_code == 200:
                try:
                    data = resp.json()
                except json.JSONDecodeError:
                    logger.error(f"Failed to parse JSON. Response text: {resp.text}")
                    break

                if isinstance(data, dict):
                    if "data" in data and isinstance(data["data"], list):
                        items = data["data"]
                        for it in items:
                            if BaseModel is not None:
                                try:
                                    validated = ProductModel(**it)
                                    all_items.append(validated.dict())
                                except ValidationError:
                                    logger.warning("Invalid product data %s", it)
                            else:
                                all_items.append(it)
                        total = data.get("total", len(all_items))
                    else:
                        logger.warning("Unexpected JSON structure: %s", data)
                        break

                    if len(all_items) >= total:
                        break
                    else:
                        page += 1
                else:
                    logger.warning("Unexpected JSON format: not a dict, got %r", data)
                    break
            else:
                logger.error(f"CRM request failed with status {resp.status_code}")
                break
        except Exception as e:
            logger.error(f"CRM request exception: {e}")
            break

    logger.info(f"Fetched total {len(all_items)} products from CRM (across pages).")
    return all_items

def no_response_callback(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    text = (
        "–Ø –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –Ω–∞—à –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–π —Ç—É—Ä –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞, –£–≥–æ—Ä—â–∏–Ω–∞. "
        "–¶–µ —à–∞–Ω—Å –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ –Ω–µ–∑–∞–±—É—Ç–Ω—ñ–π –¥–µ–Ω—å —Å–µ—Ä–µ–¥ –µ–∫–∑–æ—Ç–∏—á–Ω–∏—Ö —Ç–≤–∞—Ä–∏–Ω —ñ –≤–æ–¥–Ω–æ—á–∞—Å –Ω–∞—Ä–µ—à—Ç—ñ –≤—ñ–¥–ø–æ—á–∏—Ç–∏ –≤–∞–º. "
        "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π –∞–≤—Ç–æ–±—É—Å, –Ω–∞—Å–∏—á–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ —ñ –º—ñ–Ω—ñ–º—É–º —Ç—É—Ä–±–æ—Ç ‚Äì –≤—Å–µ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–æ. "
        "–î—ñ—Ç–∏ –æ—Ç—Ä–∏–º–∞—é—Ç—å –º–æ—Ä–µ –≤—Ä–∞–∂–µ–Ω—å, –∞ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—å —Ä–∞–∑–æ–º –∑ –Ω–∏–º–∏. "
        "–ö–æ–∂–µ–Ω —Ä–∞–∑ –Ω–∞—à—ñ –∫–ª—ñ—î–Ω—Ç–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è —ñ–∑ —Å–≤–æ—ó–º–∏ –¥—ñ—Ç–ª–∞—Ö–∞–º–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —â–∞—Å–ª–∏–≤–∏–º–∏. "
        "–í–∏ —Ç–æ—á–Ω–æ –ø–æ–ª—é–±–∏—Ç–µ —Ü–µ–π —Ç—É—Ä! üòä"
    )
    context.bot.send_message(chat_id=chat_id, text=text)
    logger.info("No response scenario triggered for chat_id=%s", chat_id)

def schedule_no_response_job(context: CallbackContext, chat_id: int):
    job_queue = context.job_queue
    current_jobs = job_queue.get_jobs_by_name(f"no_response_{chat_id}")
    for job in current_jobs:
        job.schedule_removal()
    job_queue.run_once(
        no_response_callback,
        NO_RESPONSE_DELAY_SECONDS,
        chat_id=chat_id,
        name=f"no_response_{chat_id}",
        data={"message": "–ü–æ—Ö–æ–∂–µ, –≤–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ..."}
    )

def cancel_no_response_job(context: CallbackContext):
    job_queue = context.job_queue
    chat_id = context._chat_id if hasattr(context, '_chat_id') else None
    if chat_id:
        current_jobs = job_queue.get_jobs_by_name(f"no_response_{chat_id}")
        for job in current_jobs:
            job.schedule_removal()

async def typing_simulation(update: Update, text: str):
    await update.effective_chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(min(4, max(2, len(text)/70)))
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())

# ======================
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ======================

def detect_toxic(text: str) -> bool:
    rude = ["–¥—É—Ä–∞–∫","—Ç—É–ø–æ–π","–µ–±–Ω—É–ª—Å—è","–∏–¥–∏–æ—Ç","stfu","fuck","shit","–±–ª—è—Ç—å","—Å—É–∫–∞","—Ö—É–π","–ø—Ä–∏–¥—É—Ä–æ–∫"]
    return any(r in text.lower() for r in rude)

def is_positive_response(text: str) -> bool:
    arr = [
        "—Ç–∞–∫","–¥–æ–±—Ä–µ","–¥–∞","–æ–∫","–ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ","–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏","–ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å","—Ä–æ–∑–∫–∞–∂—ñ—Ç—å",
        "–≥–æ—Ç–æ–≤–∏–π","–≥–æ—Ç–æ–≤–∞","–ø—Ä–∏–≤—ñ—Ç","hello","–∑–∞—Ü—ñ–∫–∞–≤","–∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–∏–π",
        "–∞–≥–∞","—Ö–æ—á—É","–±—É–¥—É","yes","–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ","–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç","–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω","–∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω","–≥–æ—Ç–æ–≤"
    ]
    return any(k in text.lower() for k in arr)

def is_negative_response(text: str) -> bool:
    arr = [
        "–Ω–µ —Ö–æ—á—É","–Ω–µ –º–æ–∂—É","–Ω–µ—Ç","–Ω—ñ","–Ω–µ –±—É–¥—É","–Ω–µ –∑–∞—Ä–∞–∑","–æ—Ç–º–µ–Ω–∞","cancel",
        "–ø–µ—Ä–µ–¥—É–º–∞–≤","–ø–µ—Ä–µ–¥—É–º–∞–ª–∞","–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ","–Ω–∞–¥–æ–µ–ª–æ","—Ö–≤–∞—Ç–∏—Ç"
    ]
    return any(k in text.lower() for k in arr)

# –ü—Ä–∏–º–µ—Ä ¬´—É–º–Ω–æ–≥–æ¬ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT
async def chatgpt_intent_analysis(text: str) -> str:
    """
    –° –ø–æ–º–æ—â—å—é GPT –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–Ω–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –∫ –æ–¥–Ω–æ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
    'details', 'cost', 'booking', 'negative', 'positive', 'unclear'.
    """
    if openai is None or not OPENAI_API_KEY:
        return "unclear"
    system_prompt = (
        "–¢—ã ‚Äî –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—É—Ä–æ–≤ –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞, –£–≥–æ—Ä—â–∏–Ω–∞. "
        "–¢–µ–±–µ –¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ü–µ–Ω–∏, –∫ –∫–∞–∫–æ–º—É —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è:\n"
        "1) details ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—É—Ä–∞ (—á—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–≥—Ä–∞–º–º–∞);\n"
        "2) cost ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—É/—Å—Ç–æ–∏–º–æ—Å—Ç—å;\n"
        "3) booking ‚Äî —Ö–æ—á–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å/–∫—É–ø–∏—Ç—å/–∑–∞–ø–ª–∞—Ç–∏—Ç—å;\n"
        "4) negative ‚Äî –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç/–Ω–µ —Ö–æ—á–µ—Ç;\n"
        "5) positive ‚Äî —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è/–¥–∞ (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä);\n"
        "6) unclear ‚Äî –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ.\n\n"
        "–û—Ç–≤–µ—á–∞–π –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º: details / cost / booking / negative / positive / unclear."
    )
    user_prompt = f"User message: '{text}'"
    try:
        response = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=10,
            temperature=0.0
        )
        cat = response.choices[0].message.content.strip().lower()
        # –ü–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
        if cat not in ["details","cost","booking","negative","positive","unclear"]:
            return "unclear"
        return cat
    except Exception as e:
        logger.error("chatgpt_intent_analysis error: %s", e)
        return "unclear"

def get_sentiment(text: str) -> str:
    if sentiment_pipeline:
        result = sentiment_pipeline(text)[0]
        try:
            stars = int(result["label"].split()[0])
            if stars <= 2:
                return "negative"
            elif stars == 3:
                return "neutral"
            else:
                return "positive"
        except:
            return "neutral"
    else:
        return "negative" if is_negative_response(text) else "neutral"

async def get_chatgpt_response(prompt: str) -> str:
    if openai is None or not OPENAI_API_KEY:
        return "–í–∏–±–∞—á—Ç–µ, —Ñ—É–Ω–∫—Ü—ñ—è ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    try:
        messages = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –±–æ—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω–æ–º —Ç—É—Ä–µ –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞. "
                    "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å, —á—ë—Ç–∫–æ —Å–æ–±–ª—é–¥–∞–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç—É—Ä–∞. "
                    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤–ø–ª–µ—Å—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–æ–æ–ø–∞—Ä–∫–∞ "
                    "–∏–ª–∏ –∫—Ä–∞—Ç–∫–æ –∏–∑–≤–∏–Ω–∏—Å—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—É—Ä–∏–∑–º—É."
                )
            },
            {"role": "user", "content": prompt}
        ]
        response = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-4",  # –ò–ª–∏ "gpt-3.5-turbo"
            messages=messages,
            max_tokens=300,
            temperature=0.6
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error("Error calling ChatGPT: %s", e)
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."

# ======================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# ======================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    init_db()
    cancel_no_response_job(context)
    stg, dat = load_user_state(user_id)
    if stg is not None and dat is not None:
        short_reminder = "–£ –≤–∞—Å —î –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–æ–∑–º–æ–≤–∞."
        if stg == STAGE_CLOSE_DEAL:
            short_reminder = "–í–∏ –∑—É–ø–∏–Ω–∏–ª–∏—Å—è –Ω–∞ –µ—Ç–∞–ø—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –æ–ø–ª–∞—Ç–∏."
        elif stg == STAGE_DETAILS:
            short_reminder = "–í–∏ –∑—É–ø–∏–Ω–∏–ª–∏—Å—è –Ω–∞ –µ—Ç–∞–ø—ñ —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä—É."
        elif stg == STAGE_ADDITIONAL_QUESTIONS:
            short_reminder = "–í–∏ –∑—É–ø–∏–Ω–∏–ª–∏—Å—è –Ω–∞ –µ—Ç–∞–ø—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å –ø—Ä–æ —Ç—É—Ä."

        text = (
            f"{short_reminder}\n"
            "–ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —Ç–æ–≥–æ –∂ –º—ñ—Å—Ü—è —á–∏ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ?\n"
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ: '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' –∞–±–æ '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'."
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_GREET
    else:
        txt = (
            "–í—ñ—Ç–∞—é –≤–∞—Å! üòä –í–∏ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏—Å—å –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–º —Ç—É—Ä–æ–º –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞, –£–≥–æ—Ä—â–∏–Ω–∞. "
            "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å. –î–æ–±—Ä–µ?"
        )
        await typing_simulation(update, txt)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_GREET

async def greet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip().lower()
    cancel_no_response_job(context)

    # 1) –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å?
    if detect_toxic(txt):
        await typing_simulation(update, "–î–∞–≤–∞–π—Ç–µ –∑–±–µ—Ä–µ–∂–µ–º–æ –ø—Ä–∏—î–º–Ω—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Ä–æ–∑–º–æ–≤–∏ üòä. –ß–∏ —î —É –≤–∞—Å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ç—É—Ä—É?")
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

    # 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
    if "–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏" in txt:
        stg, dat = load_user_state(user_id)
        if stg is not None:
            context.user_data.update(json.loads(dat))
            resp = "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Ä–æ–∑–º–æ–≤–∏."
            await typing_simulation(update, resp)
            schedule_no_response_job(context, update.effective_chat.id)
            return stg
        else:
            r = "–ù–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö, –ø–æ—á–Ω–µ–º–æ –∑ –Ω—É–ª—è."
            await typing_simulation(update, r)
            save_user_state(user_id, STAGE_GREET, context.user_data)
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_GREET

    # 3) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?
    if "–ø–æ—á–∞—Ç–∏" in txt or "–∑–∞–Ω–æ–≤–æ" in txt:
        context.user_data.clear()
        g = (
            "–í—ñ—Ç–∞—é –≤–∞—Å! üòä –í–∏ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏—Å—å –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–º —Ç—É—Ä–æ–º –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞, –£–≥–æ—Ä—â–∏–Ω–∞. "
            "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å. –î–æ–±—Ä–µ?"
        )
        await typing_simulation(update, g)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_GREET

    # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º intent "–≤—Ä—É—á–Ω—É—é"
    if is_positive_response(txt):
        t = (
            "–î—è–∫—É—é –∑–∞ –≤–∞—à—É –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ—Å—Ç—å! üòä\n"
            "–ó–≤—ñ–¥–∫–∏ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏: –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞? üöå"
        )
        await typing_simulation(update, t)
        save_user_state(user_id, STAGE_DEPARTURE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_DEPARTURE
    elif is_negative_response(txt):
        m = (
            "–Ø –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –Ω–∞—à —Ç—É—Ä, —è–∫—â–æ –∑–∞—Ä–∞–∑ –≤–∞–º –Ω–µ–∑—Ä—É—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è."
        )
        await typing_simulation(update, m)
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_DETAILS

    # 5) –ï—Å–ª–∏ –Ω–∞—à–∏ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º GPT
    intent_gpt = await chatgpt_intent_analysis(txt)
    if intent_gpt in ["positive"]:
        await typing_simulation(update, "–ß—É–¥–æ–≤–æ! –ó–≤—ñ–¥–∫–∏ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏: –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞? üöå")
        save_user_state(user_id, STAGE_DEPARTURE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_DEPARTURE
    elif intent_gpt in ["negative"]:
        await typing_simulation(update, "–î–æ–±—Ä–µ, —Ç–æ–¥—ñ –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –∞–±–æ –∑–∞–∫—ñ–Ω—á–∏—Ç–∏? –©–æ –≤–∏ –æ–±–∏—Ä–∞—î—Ç–µ?")
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_DETAILS
    elif intent_gpt in ["details"]:
        await typing_simulation(update, "–ó—Ä–æ–∑—É–º—ñ–ª–æ, –¥–∞–≤–∞–π—Ç–µ —Ä–æ–∑–∫–∞–∂—É –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É —Ç—É—Ä—É...")
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_DETAILS
    elif intent_gpt in ["cost"]:
        await typing_simulation(update, "–ó–≤—ñ—Å–Ω–æ, —Ä–æ–∑–∫–∞–∂—É –ø—Ä–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —ñ —â–æ –≤—Ö–æ–¥–∏—Ç—å –≤ —Ç—É—Ä.")
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_DETAILS
    elif intent_gpt in ["booking"]:
        await typing_simulation(update, "–í–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ? –¢–æ–¥—ñ –ø–µ—Ä–µ–π–¥—ñ–º–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è!")
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CLOSE_DEAL

    # –ï—Å–ª–∏ –∏ GPT –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ -> fallback
    fallback_text = await get_chatgpt_response(
        "–û—Å—å –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞: " + txt +
        "\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å —Å—Ü–µ–Ω–∞—Ä—ñ—é –æ–¥–Ω–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç—É—Ä—É –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞."
    )
    await typing_simulation(update, fallback_text)
    # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    return STAGE_GREET

async def departure_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    d = update.message.text.strip()
    cancel_no_response_job(context)

    if detect_toxic(d):
        await typing_simulation(update, "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–±–µ—Ä–µ–∂–µ–º–æ –ø–æ–≤–∞–≥—É –≤ —Ä–æ–∑–º–æ–≤—ñ. –ß–∏–º —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

    context.user_data["departure"] = d
    r = "–î–ª—è –∫–æ–≥–æ –≤–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç–µ —Ü—é –ø–æ—ó–∑–¥–∫—É? –ß–∏ –ø–ª–∞–Ω—É—î—Ç–µ —ó—Ö–∞—Ç–∏ —Ä–∞–∑–æ–º —ñ–∑ –¥–∏—Ç–∏–Ω–æ—é?"
    await typing_simulation(update, r)
    save_user_state(user_id, STAGE_TRAVEL_PARTY, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_TRAVEL_PARTY

async def travel_party_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    if detect_toxic(txt):
        await typing_simulation(update, "–ü—Ä–æ—à—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤–≤—ñ—á–ª–∏–≤—ñ—Å—Ç—å. –í–∏ —Ö–æ—Ç—ñ–ª–∏ —â–æ—Å—å —Å–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ —Ç—É—Ä?")
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

    if "–¥–∏—Ç" in txt or "child" in txt or "—Ä–µ–±–µ–Ω" in txt:
        context.user_data["travel_party"] = "child"
        await typing_simulation(update, "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ?")
        save_user_state(user_id, STAGE_CHILD_AGE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CHILD_AGE

    context.user_data["travel_party"] = "no_child"
    r = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
    await typing_simulation(update, r)
    save_user_state(user_id, STAGE_CHOICE, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_CHOICE

async def child_age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    t = update.message.text.strip()
    cancel_no_response_job(context)

    if detect_toxic(t):
        await typing_simulation(update, "–Ø –≤–∞—Å –ø–æ—á—É–ª–∞, –∞–ª–µ –ø—Ä–æ—à—É –±–µ–∑ –æ–±—Ä–∞–∑. –ß–∏–º —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

    if t.isdigit():
        context.user_data["child_age"] = t
        r = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CHOICE

    if any(x in t.lower() for x in ["–¥–µ—Ç–∞–ª","–≤–∞—Ä—Ç—ñ—Å—Ç—å","—Ü—ñ–Ω–∞","–±—Ä–æ–Ω","cost","details"]):
        context.user_data["child_age"] = "unspecified"
        rr = "–î–æ–±—Ä–µ, –ø–µ—Ä–µ–π–¥–µ–º–æ –¥–∞–ª—ñ."
        await typing_simulation(update, rr)
        save_user_state(user_id, STAGE_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CHOICE

    await typing_simulation(update, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤—ñ–∫ –¥–∏—Ç–∏–Ω–∏ –∞–±–æ –∑–∞–¥–∞–π—Ç–µ —ñ–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è.")
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_CHILD_AGE

async def choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    if detect_toxic(txt):
        await typing_simulation(update, "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à–∞–π–º–æ—Å—è —É –ø—Ä–∏–≤—ñ—Ç–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

    if "–¥–µ—Ç–∞–ª" in txt or "details" in txt:
        context.user_data["choice"] = "details"
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        return await details_handler(update, context)
    elif "–≤–∞—Ä—Ç—ñ—Å—Ç—å" in txt or "—Ü—ñ–Ω–∞" in txt or "cost" in txt:
        context.user_data["choice"] = "cost"
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        return await details_handler(update, context)
    elif "–±—Ä–æ–Ω" in txt or "b—Ä–æ–Ω–∏—Ä—É–π" in txt or "booking" in txt or "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å" in txt or "–ø–æ—ó—Ö–∞—Ç–∏" in txt:
        context.user_data["choice"] = "booking"
        r = (
            "–Ø –¥—É–∂–µ —Ä–∞–¥–∞, —â–æ –í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ–¥–æ—Ä–æ–∂ –∑ –Ω–∞–º–∏, —Ü–µ –±—É–¥–µ –¥—ñ–π—Å–Ω–æ –∫—Ä—É—Ç–∞ –ø–æ—ó–∑–¥–∫–∞. "
            "–î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—Å —ñ –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏. –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å —É —Ä–æ–∑–º—ñ—Ä—ñ 30% "
            "—Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–±–æ —ñ–Ω—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º —É—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. "
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank? üí≥"
        )
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CLOSE_DEAL

    resp = "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å: –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è?"
    await typing_simulation(update, resp)
    save_user_state(user_id, STAGE_CHOICE, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_CHOICE

async def details_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    cancel_no_response_job(context)
    choice = context.user_data.get("choice","details")

    # –ë–µ—Ä—ë–º –∏–∑ –∫—ç—à–∞, —á—Ç–æ–±—ã –Ω–µ –±–µ–≥–∞—Ç—å –≤ CRM –∫–∞–∂–¥—ã–π —Ä–∞–∑
    relevant = []
    for p in CRM_CACHE:
        nm = (p.get("name","") or "").lower()
        pr = p.get("price", 0)
        # –∏—â–µ–º –ø–æ —Å–ª–æ–≤—É "–Ω—ñ—Ä–µ–¥", "–Ω–∏—Ä", "–∑–æ–æ–ø–∞—Ä–∫", + pr>0
        if ("–Ω—ñ—Ä–µ–¥" in nm or "–Ω–∏—Ä" in nm or "–∑–æ–æ–ø–∞—Ä–∫" in nm) and pr > 0:
            relevant.append(p)

    if not relevant:
        tours_info = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö (–∞–±–æ —Ü—ñ–Ω–∞=0) —Ç—É—Ä—ñ–≤ —É CRM, –ø–æ–≤'—è–∑–∞–Ω–∏—Ö —ñ–∑ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–æ—é."
    else:
        if len(relevant) == 1:
            p = relevant[0]
            pname = p.get("name","No name")
            pprice = p.get("price",0)
            pdesc = p.get("description","") or "–ë–µ–∑ –æ–ø–∏—Å—É"
            tours_info = f"–¢—É—Ä: {pname}\n–¶—ñ–Ω–∞: {pprice}\n–û–ø–∏—Å: {pdesc}"
        else:
            tours_info = "–û—Å—å –∞–∫—Ç—É–∞–ª—å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞:\n"
            for p in relevant:
                pid = p.get("id","?")
                pname = p.get("name","No name")
                pprice = p.get("price",0)
                tours_info += f"- {pname} (ID {pid}), —Ü—ñ–Ω–∞: {pprice}\n"

    if choice == "cost":
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ (6:00) —Ç–∞ –ú—É–∫–∞—á–µ–≤–∞ (6:30).\n"
            "–¶–µ —Ü—ñ–ª–∏–π –¥–µ–Ω—å, —ñ –≤–≤–µ—á–µ—Ä—ñ –≤–∏ –±—É–¥–µ—Ç–µ –≤–¥–æ–º–∞.\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É: 1900 –≥—Ä–Ω –∑ –æ—Å–æ–±–∏ (—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è).\n\n"
            + tours_info
        )
    else:
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ (6:00) —á–∏ –ú—É–∫–∞—á–µ–≤–∞ (6:30).\n"
            "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: –¶—ñ–ª–∏–π –¥–µ–Ω—å, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –æ 20:00.\n"
            "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω–∏–π –∞–≤—Ç–æ–±—É—Å.\n"
            "–ó–æ–æ–ø–∞—Ä–∫: –ë—ñ–ª—å—à–µ 500 –≤–∏–¥—ñ–≤ —Ç–≤–∞—Ä–∏–Ω.\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å: 1900 –≥—Ä–Ω (—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è).\n\n"
            + tours_info
        )

    await typing_simulation(update, text)
    save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    await update.effective_chat.send_message(text="–ß–∏ —î —É –≤–∞—Å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç—É—Ä—É? üòä")
    return STAGE_ADDITIONAL_QUESTIONS

async def additional_questions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    if detect_toxic(txt):
        await typing_simulation(update, "–ü—Ä–æ—à—É –≥–æ–≤–æ—Ä–∏—Ç–∏ –≤–≤—ñ—á–ª–∏–≤–æ. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

    time_keys = [
        "–∫–æ–ª–∏ –≤–∏—ó–∑–¥","–∫–æ–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è","—á–∞—Å –≤–∏—ó–∑–¥—É","–∫–æ–ª–∏ –∞–≤—Ç–æ–±—É—Å","–∫–æ–ª–∏ –≤–∏—Ä—É—à–∞—î–º–æ",
        "–≤–æ —Å–∫–æ–ª—å–∫–æ –≤—ã–µ–∑–¥","—Å–∫–æ–ª—å–∫–æ –≤—ã–µ–∑–¥","–æ –∫–æ—Ç—Ä—ñ–π –≤–∏—ó–∑–¥","–∫–æ–≥–¥–∞ –≤—ã–µ–∑–¥"
    ]
    if any(k in txt for k in time_keys):
        ans = (
            "–í–∏—ó–∑–¥ –æ 6:00 –∑ –£–∂–≥–æ—Ä–æ–¥–∞, –æ 6:30 –∑ –ú—É–∫–∞—á–µ–≤–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –æ 20:00.\n"
            "–ß–∏ —î —â–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?"
        )
        await typing_simulation(update, ans)
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

    book_keys = [
        "–±—Ä–æ–Ω—é–≤–∞—Ç–∏","–±—Ä–æ–Ω—é–π","–∫—É–ø—É–≤–∞—Ç–∏ —Ç—É—Ä","–¥–∞–≤–∞–π –±—Ä–æ–Ω—é–≤–∞—Ç–∏","–æ–∫–µ–π –¥–∞–≤–∞–π –±—Ä–æ–Ω—é–≤–∞—Ç–∏",
        "–æ–∫–µ–π –±—Ä–æ–Ω—é–π —Ç—É—Ä","–±—Ä–æ–Ω–∏—Ä—É–π","—Ö–æ—á—É –ø–æ—ó—Ö–∞—Ç–∏","—Ö–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å","–¥–∞–≤–∞–π –ø–æ–µ–¥–µ–º","–ø–æ–µ–¥–µ–º","–ø–æ–µ—Ö–∞—Ç—å"
    ]
    if any(k in txt for k in book_keys):
        r = "–î–æ–±—Ä–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –Ø –Ω–∞–¥–∞–º –≤–∞–º —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏."
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        return await close_deal_handler(update, context)

    no_more = ["–Ω–µ–º–∞—î","–≤—Å–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ","–≤—Å–µ –æ–∫","–¥–æ—Å–∏—Ç—å","—Å–ø–∞—Å–∏–±—ñ","–¥—è–∫—É—é","—Å–ø–∞—Å–∏–±–æ","–Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤","ok"]
    if any(k in txt for k in no_more):
        rr = "–Ø–∫ –≤–∞–º –Ω–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤ —Ü—ñ–ª–æ–º—É? üåü"
        await typing_simulation(update, rr)
        save_user_state(user_id, STAGE_IMPRESSION, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_IMPRESSION

    sentiment = get_sentiment(txt)
    if sentiment == "negative":
        fp = (
            "–ö–ª—ñ—î–Ω—Ç –≤–∏—Å–ª–æ–≤–∏–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ —Å—Ç–∞–≤–ª–µ–Ω–Ω—è: " + txt +
            "\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ, –ø—Ä–æ—è–≤–ª—è—é—á–∏ –µ–º–ø–∞—Ç—ñ—é, –≤–∏–±–∞—á—Å—è —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –¥–æ–ø–æ–º–æ–≥—É."
        )
        fallback_text = await get_chatgpt_response(fp)
        await typing_simulation(update, fallback_text)
        return STAGE_ADDITIONAL_QUESTIONS

    # GPT fallback –ø—Ä–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ
    prompt = (
        "–ö–ª—ñ—î–Ω—Ç –∑–∞–¥–∞–≤ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: " + txt +
        "\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –∑–≥–∞–¥—É–π –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω–æ."
    )
    fb = await get_chatgpt_response(prompt)
    await typing_simulation(update, fb)
    return STAGE_ADDITIONAL_QUESTIONS

async def impression_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    if detect_toxic(txt):
        await typing_simulation(update, "–ó–∞–ª–∏—à–∞–π–º–æ—Å—è –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–º–∏, –±—É–¥—å –ª–∞—Å–∫–∞. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

    pos = ["–¥–æ–±—Ä–µ","–∫–ª–∞—Å","—Ü—ñ–∫–∞–≤–æ","–≤—ñ–¥–º—ñ–Ω–Ω–æ","—Å—É–ø–µ—Ä","–ø—ñ–¥—Ö–æ–¥–∏—Ç—å","—Ç–∞–∫","–æ—Ç–ª–∏—á–Ω–æ","–∫—Ä—É—Ç–æ","–ø–æ–¥—Ö–æ–¥–∏—Ç"]
    neg = ["–Ω—ñ","–Ω–µ —Ü—ñ–∫–∞–≤–æ","–¥–æ—Ä–æ–≥–æ","–∑–∞–≤–µ–ª–∏–∫–∞","–Ω–∞–¥—Ç–æ","–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç","–Ω–µ—Ç","–Ω–µ —Ö–æ—á—É"]
    if any(k in txt for k in pos):
        r = (
            "–ß—É–¥–æ–≤–æ! üéâ –î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—Å —ñ –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏, —â–æ–± –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫. "
            "–î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å —É —Ä–æ–∑–º—ñ—Ä—ñ 30% —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–±–æ —ñ–Ω—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É. "
            "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º —É—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.\n"
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank? üí≥"
        )
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CLOSE_DEAL
    elif any(k in txt for k in neg):
        rr = "–®–∫–æ–¥–∞ —Ü–µ —á—É—Ç–∏. –Ø–∫—â–æ —É –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–∏—Å—è –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –≤–∏ –∑–∞—Ö–æ—á–µ—Ç–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è."
        await typing_simulation(update, rr)
        save_user_state(user_id, STAGE_END, context.user_data)
        return STAGE_END
    else:
        resp = "–î—è–∫—É—é –∑–∞ –¥—É–º–∫—É! –ß–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?"
        await typing_simulation(update, resp)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CLOSE_DEAL

async def close_deal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    if detect_toxic(txt):
        await typing_simulation(update, "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑ –ø–æ–≤–∞–≥–æ—é. –ß–∏–º —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

    pos = [
        "–ø—Ä–∏–≤–∞—Ç","–º–æ–Ω–æ","–æ–ø–ª–∞—á—É","–≥–æ—Ç–æ–≤","–≥–æ—Ç–æ–≤–∞","–¥–∞–≤–∞–π—Ç–µ","monobank","privatbank",
        "–æ–ø–ª–∞—Ç–∏–ª","–æ–ø–ª–∞—Ç–∏–ª–∞","—è –ø–µ—Ä–µ–≤–µ–ª","—è –ø–µ—Ä–µ–≤–µ–ª–∞","ok"
    ]
    if any(k in txt for k in pos):
        r = (
            "–ß—É–¥–æ–≤–æ! –û—Å—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n"
            "–ö–∞—Ä—Ç–∫–∞: 0000 0000 0000 0000 (Family Place)\n\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."
        )
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_PAYMENT

    neg = ["–Ω—ñ","–Ω–µ—Ç","–Ω–µ –±—É–¥—É","–Ω–µ —Ö–æ—á—É","–æ—Ç–º–µ–Ω–∞","cancel","–ø–µ—Ä–µ–¥—É–º–∞–≤","–Ω–µ —Å–µ–π—á–∞—Å"]
    if any(k in txt for k in neg):
        r2 = "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –ë—É–¥—É —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ!"
        await typing_simulation(update, r2)
        save_user_state(user_id, STAGE_END, context.user_data)
        return STAGE_END

    r3 = "–î—è–∫—É—é! –í–∏ –≥–æ—Ç–æ–≤—ñ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è? –í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank? üí≥"
    await typing_simulation(update, r3)
    save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_CLOSE_DEAL

async def payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    if detect_toxic(txt):
        await typing_simulation(update, "–ü—Ä–æ—à—É, –±–µ–∑ –æ–±—Ä–∞–∑. –ß–∏ –º–æ–∂—É —è —â–µ —á–∏–º–æ—Å—å –¥–æ–ø–æ–º–æ–≥—Ç–∏?")
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

    if any(k in txt for k in ["–æ–ø–ª–∞—Ç–∏–≤","–≤—ñ–¥–ø—Ä–∞–≤–∏–≤","—Å–∫–∏–Ω—É–≤","–≥–æ—Ç–æ–≤–æ","—Å–ø–ª–∞—Ç–∏–≤","–ø–µ—Ä–µ–≤–µ–ª","–ø–µ—Ä–µ–≤–µ–ª–∞"]):
        r = (
            "–î—è–∫—É—é! –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—é –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è. –Ø–∫ —Ç—ñ–ª—å–∫–∏ –≤—Å–µ –±—É–¥–µ –æ–∫, —è –Ω–∞–¥—ñ—à–ª—é –¥–µ—Ç–∞–ª—ñ –ø–æ—ó–∑–¥–∫–∏ —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è!"
        )
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_PAYMENT_CONFIRM, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_PAYMENT_CONFIRM
    else:
        rr = "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî —è –Ω–∞ –∑–≤'—è–∑–∫—É. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –æ–ø–ª–∞—Ç–æ—é?"
        await typing_simulation(update, rr)
        save_user_state(user_id, STAGE_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_PAYMENT

async def payment_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    cancel_no_response_job(context)
    r = (
        "–î—è–∫—É—é –∑–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è! –ú–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–≥–ª–∏ –∑–∞ –≤–∞–º–∏ –º—ñ—Å—Ü–µ. –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º —è –Ω–∞–¥—ñ—à–ª—é –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ. "
        "–Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –ø–∏—à—ñ—Ç—å!"
    )
    await typing_simulation(update, r)
    save_user_state(user_id, STAGE_END, context.user_data)
    return STAGE_END

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name if user else "Unknown")
    t = "–ì–∞—Ä–∞–∑–¥, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –∑–Ω–æ–≤—É!"
    await typing_simulation(update, t)
    uid = str(update.effective_user.id)
    save_user_state(uid, STAGE_END, context.user_data)
    return ConversationHandler.END

@app.route('/')
def index():
    return "–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î! –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π."

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == "POST":
        data = request.get_json(force=True)
        global application
        if not application:
            logger.error("Application is not initialized yet.")
            return "No application available"
        update = Update.de_json(data, application.bot)
        loop = application.bot_data.get("loop")
        if loop:
            asyncio.run_coroutine_threadsafe(application.process_update(update), loop)
            logger.info("Webhook received and processed.")
        else:
            logger.error("No event loop available to process update.")
    return "OK"

async def scheduled_crm_update(context: CallbackContext):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º CRM_CACHE.
    """
    global CRM_CACHE
    logger.info("Running scheduled CRM update...")
    new_data = fetch_all_products()
    CRM_CACHE = new_data  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    logger.info("CRM_CACHE updated with %d products.", len(CRM_CACHE))

async def setup_webhook(url, app_ref):
    webhook_url = f"{url}/webhook"
    await app_ref.bot.set_webhook(webhook_url)
    logger.info(f"Webhook set to: {webhook_url}")

async def run_bot():
    if is_bot_already_running():
        logger.error("Another instance is already running. Exiting.")
        sys.exit(1)
    logger.info("Starting bot...")
    req = HTTPXRequest(connect_timeout=20, read_timeout=40)
    application_builder = Application.builder().token(BOT_TOKEN).request(req)
    global application
    application = application_builder.build()

    # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º CRM_CACHE
    global CRM_CACHE
    CRM_CACHE = fetch_all_products()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            STAGE_GREET: [MessageHandler(filters.TEXT & ~filters.COMMAND, greet_handler)],
            STAGE_DEPARTURE: [MessageHandler(filters.TEXT & ~filters.COMMAND, departure_handler)],
            STAGE_TRAVEL_PARTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, travel_party_handler)],
            STAGE_CHILD_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, child_age_handler)],
            STAGE_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choice_handler)],
            STAGE_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, details_handler)],
            STAGE_ADDITIONAL_QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, additional_questions_handler)],
            STAGE_IMPRESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, impression_handler)],
            STAGE_CLOSE_DEAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, close_deal_handler)],
            STAGE_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment_handler)],
            STAGE_PAYMENT_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment_confirm_handler)],
            STAGE_END: [MessageHandler(filters.TEXT & ~filters.COMMAND,
                lambda u,c: c.bot.send_message(chat_id=u.effective_chat.id,
                                               text="–î—è–∫—É—é! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî /start."))]
        },
        fallbacks=[CommandHandler('cancel', cancel_command)],
        allow_reentry=True
    )
    application.add_handler(conv_handler)

    await setup_webhook(WEBHOOK_URL, application)

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CRM, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ —á–∞—Å
    job_queue = application.job_queue
    job_queue.run_repeating(scheduled_crm_update, interval=3600, first=10)

    await application.initialize()
    await application.start()
    loop = asyncio.get_running_loop()
    application.bot_data["loop"] = loop
    logger.info("Bot is online and ready.")

def start_flask():
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"Starting Flask on port {port}")
    app.run(host='0.0.0.0', port=port)

if __name__ == '__main__':
    bot_thread = threading.Thread(target=lambda: asyncio.run(run_bot()), daemon=True)
    bot_thread.start()
    logger.info("Bot thread started. Now starting Flask...")
    start_flask()
