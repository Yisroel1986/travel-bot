import os
import logging
import sys
import psutil
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
import openai
from datetime import datetime, timezone, timedelta

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–ª—é—á OpenAI
openai.api_key = OPENAI_API_KEY

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    STATE_INTRO,
    STATE_NEEDS,
    STATE_PSYCHO,
    STATE_PRESENTATION,
    STATE_OBJECTIONS,
    STATE_QUOTE,
    STATE_FAQ,
    STATE_FEEDBACK,
    STATE_PAYMENT,
    STATE_RESERVATION,
    STATE_TRANSFER,
    STATE_FINISH
) = range(12)

def is_bot_already_running():
    current_process = psutil.Process()
    for process in psutil.process_iter(['pid', 'name', 'cmdline']):
        if process.info['name'] == current_process.name() and \
           process.info['cmdline'] == current_process.cmdline() and \
           process.info['pid'] != current_process.pid:
            return True
    return False

async def invoke_gpt_experts(stage: str, user_text: str, context_data: dict):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç OpenAI ChatCompletion, –ø–µ—Ä–µ–¥–∞–≤–∞—è ¬´—Ä–æ–ª—è–º-—ç–∫—Å–ø–µ—Ä—Ç–∞–º¬ª —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø,
    —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ–≤–µ—Ç–æ–≤. 
    """
    system_prompt = f"""
    –¢—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: SalesGuru, ObjectionsPsychologist, MarketingHacker.
    –£—á—Ç–∏, —á—Ç–æ –Ω–∞—à —Ü–µ–ª–µ–≤–æ–π –∫–ª–∏–µ–Ω—Ç ‚Äî –º–∞–º–∞ 28-45 –ª–µ—Ç, —Ü–µ–Ω—è—â–∞—è —Å–µ–º—å—é, –∏—â–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ 
    –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —Ç—É—Ä –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞. 
    –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ–Ω—Å–∫–∏–π –º—è–≥–∫–∏–π —Ç–æ–Ω, 
    –¥–µ–ª–∞–µ–º –∞–∫—Ü–µ–Ω—Ç—ã –Ω–∞ –æ—Ç–¥—ã—Ö–µ –¥–ª—è –º–∞–º—ã, –Ω–∞ –¥–µ—Ç—Å–∫–æ–π —Ä–∞–¥–æ—Å—Ç–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. 
    –ü—Ä–∏–º–µ–Ω—è–π FOMO (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–µ—Å—Ç), —Å–æ—Ü–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, 
    —è–∫–æ—Ä–µ–Ω–∏–µ —Ü–µ–Ω—ã (–¥—Ä—É–≥–∏–µ —Ç—É—Ä—ã –¥–æ—Ä–æ–∂–µ, –Ω–æ –º—ã –¥–∞—ë–º —Ç–æ –∂–µ, –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ). 
    –°—Ç–∞–¥–∏—è: {stage}.
    –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}.
    –î–∞–π 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–≤–µ—Ç–∞, –ø–æ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏.
    """
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞ –¥–ª—è –±–æ—Ç–∞ (1 –æ—Ç –∫–∞–∂–¥–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞)."}
    ]
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=1000,
            temperature=0.7
        )
        advice_text = response["choices"][0]["message"]["content"]
        return advice_text.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        return "(–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –æ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤)"

def mention_user(update: Update) -> str:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏."""
    user = update.effective_user
    if user:
        return user.first_name if user.first_name else "–¥—Ä—É–∂–µ"
    return "–¥—Ä—É–∂–µ"

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = mention_user(update)
    # –°–æ–≤–µ—Ç—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    adv = await invoke_gpt_experts("intro", "/start", context.user_data)
    logger.info(f"GPT Experts [INTRO]:\n{adv}")

    text = (
        f"–ü—Ä–∏–≤—ñ—Ç, {user_name}! –Ø –ú–∞—Ä—ñ—è, –≤–∞—à –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π —Ç—É—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä. "
        "–î—è–∫—É—é, —â–æ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏—Å—å –Ω–∞—à–æ—é —Å—ñ–º–µ–π–Ω–æ—é –ø–æ—ó–∑–¥–∫–æ—é –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞.\n\n"
        "–¶–µ —ñ–¥–µ–∞–ª—å–Ω–∏–π —Å–ø–æ—Å—ñ–± –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –¥–∏—Ç–∏–Ω—ñ –∫–∞–∑–∫—É, –∞ —Å–æ–±—ñ ‚Äî –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –±–µ–∑ –∑–∞–π–≤–∏—Ö —Ç—É—Ä–±–æ—Ç.\n"
        "–ú–æ–∂—É –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å, —â–æ–± –º–∏ –ø—ñ–¥—ñ–±—Ä–∞–ª–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç?"
    )
    await update.message.reply_text(text)
    return STATE_INTRO

async def intro_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()
    # GPT
    adv = await invoke_gpt_experts("intro", user_text, context.user_data)
    logger.info(f"GPT Experts [INTRO]:\n{adv}")

    if any(x in user_text for x in ["—Ç–∞–∫", "–¥–∞", "–æ–∫", "–¥–æ–±—Ä–µ", "—Ö–æ—á—É"]):
        await update.message.reply_text(
            "–°—É–ø–µ—Ä! –°–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑ —è–∫–æ–≥–æ –º—ñ—Å—Ç–∞ –≤–∏ –± —Ö–æ—Ç—ñ–ª–∏ –≤–∏—ó–∂–¥–∂–∞—Ç–∏ (–£–∂–≥–æ—Ä–æ–¥ —á–∏ –ú—É–∫–∞—á–µ–≤–æ) "
            "—ñ —Å–∫—ñ–ª—å–∫–∏ —É –≤–∞—Å –¥—ñ—Ç–µ–π?"
        )
        return STATE_NEEDS
    else:
        await update.message.reply_text(
            "–ì–∞—Ä–∞–∑–¥. –Ø–∫—â–æ –≤–∏—Ä—ñ—à–∏—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start –∞–±–æ '–•–æ—á—É –¥—ñ–∑–Ω–∞—Ç–∏—Å—è'. "
            "–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!"
        )
        return ConversationHandler.END

async def needs_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    context.user_data["needs_info"] = user_text

    # GPT
    adv = await invoke_gpt_experts("needs", user_text, context.user_data)
    logger.info(f"GPT Experts [NEEDS]:\n{adv}")

    await update.message.reply_text(
        "–ó—Ä–æ–∑—É–º—ñ–ª–∞ –≤–∞—Å. –í–∏ –Ω–µ —É—è–≤–ª—è—î—Ç–µ, —Å–∫—ñ–ª—å–∫–∏ –º–∞–º –≤–∂–µ –∑–º–æ–≥–ª–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏—Å—å —ñ –≤—ñ–¥–ø–æ—á–∏—Ç–∏ "
        "–∑–∞–≤–¥—è–∫–∏ —Ü—ñ–π –ø–æ—ó–∑–¥—Ü—ñ!\n"
        "–î–æ–∑–≤–æ–ª—å—Ç–µ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —Ç—Ä–æ—à–∫–∏ –ø—Ä–æ –≤—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—ñ —á–µ–∫–∞—é—Ç—å —Å–∞–º–µ –Ω–∞ –≤–∞—Å."
    )
    return STATE_PSYCHO

async def psycho_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text

    # GPT
    adv = await invoke_gpt_experts("psycho", user_text, context.user_data)
    logger.info(f"GPT Experts [PSYCHO]:\n{adv}")

    # –£—Å–∏–ª–∏–º FOMO + —Å–æ—Ü–¥–æ–∫–∞–∑
    await update.message.reply_text(
        "–ù–∞—à —Ç—É—Ä –≤–∂–µ –æ–±—Ä–∞–ª–∏ –ø–æ–Ω–∞–¥ 200 —Å—ñ–º–µ–π –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –º—ñ—Å—è—Ü—ñ. –£—è–≤—ñ—Ç—å —Ä–∞–¥—ñ—Å—Ç—å –¥–∏—Ç–∏–Ω–∏, "
        "–∫–æ–ª–∏ –≤–æ–Ω–∞ –≤–ø–µ—Ä—à–µ –±–∞—á–∏—Ç—å –º–æ—Ä—Å—å–∫–∏—Ö –∫–æ—Ç–∏–∫—ñ–≤, –ª–µ–≤—ñ–≤ —Ç–∞ –∂–∏—Ä–∞—Ñ—ñ–≤ –±—É–∫–≤–∞–ª—å–Ω–æ —É –∫—ñ–ª—å–∫–æ—Ö –∫—Ä–æ–∫–∞—Ö! "
        "–ê –≤–∏ –≤ —Ü–µ–π —á–∞—Å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–æ–ª–æ–¥–∏—Ç–∏—Å—è –º–æ–º–µ–Ω—Ç–æ–º ‚Äî —É—Å–µ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–æ.\n\n"
        "–ó–∞ –≤–∞—à–∏–º –±–∞–∂–∞–Ω–Ω—è–º —Ä–æ–∑–∫–∞–∂—É –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É —Ç–∞ —É–º–æ–≤–∏. "
        "–•–æ—á–µ—Ç–µ –ø–æ—á—É—Ç–∏ –ø–æ–≤–Ω—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—é –Ω–∞—à–æ–≥–æ —Ç—É—Ä—É?"
    )
    return STATE_PRESENTATION

async def presentation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    # GPT
    adv = await invoke_gpt_experts("presentation", user_text, context.user_data)
    logger.info(f"GPT Experts [PRESENTATION]:\n{adv}")

    # –ï—Å–ª–∏ ¬´–¥–∞¬ª, ¬´—Ç–∞–∫¬ª, ¬´—Ö–æ—á—É¬ª –∏ —Ç.–ø.
    if any(x in user_text for x in ["—Ç–∞–∫", "–¥–∞", "—Ö–æ—á—É", "–¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ"]):
        # –£—Å–∏–ª–µ–Ω–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è (—è–∫–æ—Ä–µ–Ω–∏–µ + –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è)
        await update.message.reply_text(
            "üî∏ *–ü—Ä–æ–≥—Ä–∞–º–∞ —Ç—É—Ä—É*:\n"
            "  ‚Ä¢ –í–∏—ó–∑–¥ –æ 2:00 –∑ –£–∂–≥–æ—Ä–æ–¥–∞ (–∞–±–æ –ú—É–∫–∞—á–µ–≤–∞) –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º—É –∞–≤—Ç–æ–±—É—Å—ñ ‚Äî –º'—è–∫—ñ —Å–∏–¥—ñ–Ω–Ω—è, "
            "–∑–∞—Ä—è–¥–∫–∏ –¥–ª—è –≥–∞–¥–∂–µ—Ç—ñ–≤, –∫–ª—ñ–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å.\n"
            "  ‚Ä¢ –ü—Ä–∏–±—É—Ç—Ç—è –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞ –±–ª–∏–∑—å–∫–æ 10:00. –î—ñ—Ç–∏ –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ "
            "—à–æ—É –º–æ—Ä—Å—å–∫–∏—Ö –∫–æ—Ç–∏–∫—ñ–≤, –∞ –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø–æ—á–∏—Ç–∏ —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ –∫—É–ø—É —Ñ–æ—Ç–æ.\n"
            "  ‚Ä¢ –î–∞–ª—ñ ‚Äî –æ–±—ñ–¥ (–Ω–µ –≤—Ö–æ–¥–∏—Ç—å —É –≤–∞—Ä—Ç—ñ—Å—Ç—å, –∞–ª–µ –º–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –∑ —Å–æ–±–æ—é –∞–±–æ –∫—É–ø–∏—Ç–∏ –≤ –∫–∞—Ñ–µ).\n"
            "  ‚Ä¢ –ü—ñ—Å–ª—è –∑–æ–æ–ø–∞—Ä–∫—É ‚Äî –∑–∞—ó–∑–¥ –¥–æ –≤–µ–ª–∏–∫–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É: –∫–∞–≤–∞, –ø–æ–∫—É–ø–∫–∏, –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫.\n"
            "  ‚Ä¢ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ–¥–æ–º—É –±–ª–∏–∑—å–∫–æ 21:00.\n\n"
            
            "üî∏ *–ß–æ–º—É —Ü–µ –≤–∏–≥—ñ–¥–Ω–æ*:\n"
            "  ‚Ä¢ –ó–≤–∏—á–∞–π–Ω—ñ —Ç—É—Ä–∏ –º–æ–∂—É—Ç—å –∫–æ—à—Ç—É–≤–∞—Ç–∏ 2500‚Äì3000 –≥—Ä–Ω, —ñ —Ü–µ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç—ñ–π –∑ –∫–≤–∏—Ç–∫–∞–º–∏ —Ç–∞ "
            "–¥–∏—Ç—è—á–∏–º–∏ —Ä–æ–∑–≤–∞–≥–∞–º–∏. –£ –Ω–∞—Å –ª–∏—à–µ 1900 –≥—Ä–Ω (–¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö), "
            "—ñ 1850 –¥–ª—è –¥—ñ—Ç–µ–π ‚Äî –≤–∂–µ –∑ –∫–≤–∏—Ç–∫–∞–º–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∫–æ—é, —Å—É–ø—Ä–æ–≤–æ–¥–æ–º.\n"
            "  ‚Ä¢ –ú–∏ –∑–Ω–∞—î–º–æ, —â–æ –¥–ª—è –º–∞–º–∏ –≤–∞–∂–ª–∏–≤–æ –º—ñ–Ω—ñ–º—É–º —Ç—É—Ä–±–æ—Ç. –¢–æ–º—É –≤—Å–µ –ø—Ä–æ–¥—É–º–∞–Ω–æ: "
            "–¥—ñ—Ç–∏ –∑–∞–π–Ω—è—Ç—ñ, –∞ –≤–∏ ‚Äî –≤—ñ–¥–ø–æ—á–∏–≤–∞—î—Ç–µ!\n\n"
            "üî∏ *–ú—ñ—Å—Ü—è –æ–±–º–µ–∂–µ–Ω—ñ*: –£ –Ω–∞—Å –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ª–∏—à–µ –∫—ñ–ª—å–∫–∞ –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–∞—Ç–∏.\n\n"
            "–ß–∏ —î —É –≤–∞—Å —Å—É–º–Ω—ñ–≤–∏ –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è? –ù–∞–ø–∏—à—ñ—Ç—å, —ñ —è –∑ —Ä–∞–¥—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ–º!"
        )
        return STATE_OBJECTIONS
    else:
        await update.message.reply_text("–ì–∞—Ä–∞–∑–¥, —è–∫—â–æ –∑–º—ñ–Ω–∏—Ç–µ –¥—É–º–∫—É ‚Äî —è –ø–æ—Ä—É—á. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!")
        return ConversationHandler.END

async def objections_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    # GPT
    adv = await invoke_gpt_experts("objections", user_text, context.user_data)
    logger.info(f"GPT Experts [OBJECTIONS]:\n{adv}")

    if "–¥–æ—Ä–æ–≥–æ" in user_text or "—Ü—ñ–Ω–∞" in user_text:
        await update.message.reply_text(
            "–†–æ–∑—É–º—ñ—é –≤–∞—à—ñ —Ö–≤–∏–ª—é–≤–∞–Ω–Ω—è —â–æ–¥–æ –±—é–¥–∂–µ—Ç—É. –ü—Ä–æ—Ç–µ –∑–≤–∞–∂—Ç–µ, —â–æ –≤ 1900 –≥—Ä–Ω "
            "–≤–∂–µ –≤–∫–ª—é—á–µ–Ω—ñ –≤—Å—ñ –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, —Å—É–ø—Ä–æ–≤—ñ–¥. "
            "–Ü –≤–∏ –µ–∫–æ–Ω–æ–º–∏—Ç–µ –∫—É–ø—É —á–∞—Å—É ‚Äî –Ω–µ —Ç—Ä–µ–±–∞ —à—É–∫–∞—Ç–∏, –¥–µ –∫—É–ø–∏—Ç–∏ –∫–≤–∏—Ç–∫–∏ —á–∏ —è–∫ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è.\n"
            "–ê –≤—Ä–∞–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ ‚Äî —Ü–µ –±–µ–∑—Ü—ñ–Ω–Ω–æ. –Ø–∫ –≤–∞–º —Ç–∞–∫–∏–π –ø—ñ–¥—Ö—ñ–¥?"
        )
        return STATE_OBJECTIONS
    elif "–±–µ–∑–ø–µ–∫–∞" in user_text or "–¥–∏—Ç–∏–Ω–∞ –±–æ—ó—Ç—å—Å—è" in user_text or "–ø–µ—Ä–µ–∂–∏–≤–∞—é" in user_text:
        await update.message.reply_text(
            "–ú–∏ —è–∫—Ä–∞–∑ –æ—Ä—ñ—î–Ω—Ç—É—î–º–æ—Å—å –Ω–∞ —Å—ñ–º'—ó –∑ –¥—ñ—Ç—å–º–∏ –≤—ñ–¥ 4 —Ä–æ–∫—ñ–≤. "
            "–£ –∑–æ–æ–ø–∞—Ä–∫—É —î –±–µ–∑–ø–µ—á–Ω—ñ –∑–æ–Ω–∏ –¥–ª—è –º–∞–ª–µ—á—ñ, –∞ –Ω–∞—à —Å—É–ø—Ä–æ–≤–æ–¥–∂—É—é—á–∏–π –∑–∞–≤–∂–¥–∏ –ø–æ—Ä—É—á, "
            "—â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ —ñ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏.\n"
            "–£ –±—ñ–ª—å—à–æ—Å—Ç—ñ –¥—ñ—Ç–µ–π –≤–∏—è–≤–ª—è—î—Ç—å—Å—è –Ω–∞–≤—ñ—Ç—å –±—ñ–ª—å—à–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å, –Ω—ñ–∂ —Å—Ç—Ä–∞—Ö!"
        )
        return STATE_OBJECTIONS
    elif any(x in user_text for x in ["–æ–∫", "–∑—Ä–æ–∑—É–º—ñ–ª–æ", "–≥–∞—Ä–∞–∑–¥", "–Ω–µ –º–∞—é"]):
        await update.message.reply_text(
            "–°—É–ø–µ—Ä! –¢–æ–¥—ñ –¥–∞–≤–∞–π—Ç–µ —â–µ —Ä–∞–∑ —É—Ç–æ—á–Ω–∏–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —É–º–æ–≤–∏ –æ–ø–ª–∞—Ç–∏. –ì–∞—Ä–∞–∑–¥?"
        )
        return STATE_QUOTE
    else:
        await update.message.reply_text(
            "–ú–æ–∂–ª–∏–≤–æ, —î —â–µ —è–∫—ñ—Å—å —Å—É–º–Ω—ñ–≤–∏? –°–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ —ó—Ö."
        )
        return STATE_OBJECTIONS

async def quote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    # GPT
    adv = await invoke_gpt_experts("quote", user_text, context.user_data)
    logger.info(f"GPT Experts [QUOTE]:\n{adv}")

    await update.message.reply_text(
        "–û—Ç–∂–µ, –ø—ñ–¥—Å—É–º—É—î–º–æ:\n"
        "‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å: 1900 –≥—Ä–Ω (–¥–æ—Ä–æ—Å–ª–∏–π), 1850 –≥—Ä–Ω (–¥–∏—Ç–∏–Ω–∞).\n"
        "‚Ä¢ –¶–µ –≤–∂–µ –≤–∫–ª—é—á–∞—î –≤—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –≤—Ö—ñ–¥–Ω—ñ –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è, —Å—É–ø—Ä–æ–≤—ñ–¥).\n"
        "‚Ä¢ –î–ª—è –¥—ñ—Ç–µ–π –¥–æ 6 —Ä–æ–∫—ñ–≤ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ –∑–Ω–∏–∂–∫–∏.\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞: 30% –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è, —Ä–µ—à—Ç–∞ ‚Äî –∑–∞ 3 –¥–Ω—ñ –¥–æ –ø–æ—ó–∑–¥–∫–∏.\n\n"
        "–ß–∏ —î —â–µ —è–∫—ñ—Å—å –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ç—É—Ä—É –∞–±–æ –æ–ø–ª–∞—Ç–∏?"
    )
    return STATE_FAQ

async def faq_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    # GPT
    adv = await invoke_gpt_experts("faq", user_text, context.user_data)
    logger.info(f"GPT Experts [FAQ]:\n{adv}")

    if "—Ç–∞–∫" in user_text or "—î –ø–∏—Ç–∞–Ω–Ω—è" in user_text:
        await update.message.reply_text(
            "–ó–≤—ñ—Å–Ω–æ, —è —Ç—É—Ç, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤—Å—ñ –≤–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è. –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?"
        )
        return STATE_FAQ
    else:
        await update.message.reply_text(
            "–ß—É–¥–æ–≤–æ! –¢–æ–¥—ñ –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è. "
            "–•–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—É –¥–∞—Ç—É?"
        )
        return STATE_FEEDBACK

async def feedback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    # GPT
    adv = await invoke_gpt_experts("feedback", user_text, context.user_data)
    logger.info(f"GPT Experts [FEEDBACK]:\n{adv}")

    if any(x in user_text for x in ["—Ç–∞–∫", "—Ö–æ—á—É", "–±—Ä–æ–Ω—é—é"]):
        await update.message.reply_text(
            "–ß—É–¥–æ–≤–æ! –î–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç—É 30%. "
            "–í–∏ –≥–æ—Ç–æ–≤—ñ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –∑–∞—Ä–∞–∑?"
        )
        return STATE_PAYMENT
    elif any(x in user_text for x in ["–Ω—ñ", "–Ω–µ –∑–∞—Ä–∞–∑", "–ø–æ–¥—É–º–∞—é"]):
        await update.message.reply_text(
            "–†–æ–∑—É–º—ñ—é. –ú–æ–∂–ª–∏–≤–æ, –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –±–µ–∑ –æ–ø–ª–∞—Ç–∏? "
            "–ú–∏ –º–æ–∂–µ–º–æ —Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ –¥–ª—è –≤–∞—Å 24 –≥–æ–¥–∏–Ω–∏."
        )
        return STATE_RESERVATION
    else:
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–ª–∞ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. "
            "–í–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –∑–∞—Ä–∞–∑ —á–∏, –º–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ —á–∞—Å—É –Ω–∞ —Ä–æ–∑–¥—É–º–∏?"
        )
        return STATE_FEEDBACK

async def payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    # GPT
    adv = await invoke_gpt_experts("payment", user_text, context.user_data)
    logger.info(f"GPT Experts [PAYMENT]:\n{adv}")

    if any(x in user_text for x in ["—Ç–∞–∫", "–≥–æ—Ç–æ–≤–∏–π", "—è–∫ –æ–ø–ª–∞—Ç–∏—Ç–∏"]):
        await update.message.reply_text(
            "–ß—É–¥–æ–≤–æ! –û—Å—å –Ω–∞—à—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n"
            "[–¢—É—Ç –±—É–¥—É—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏]\n\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —á–µ–∫—É. "
            "–Ø–∫ —Ç—ñ–ª—å–∫–∏ –º–∏ –æ—Ç—Ä–∏–º–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —è –ø–µ—Ä–µ–¥–∞–º –≤–∞—Å –∂–∏–≤–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É "
            "–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –î—è–∫—É—é –∑–∞ –¥–æ–≤—ñ—Ä—É!"
        )
        return STATE_TRANSFER
    else:
        await update.message.reply_text(
            "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω —á–∞—Å –Ω–∞ —Ä–æ–∑–¥—É–º–∏, –º–∏ –º–æ–∂–µ–º–æ –∑–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏ –±–µ–∑ –æ–ø–ª–∞—Ç–∏. "
            "–•–æ—á–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Ü—ñ—î—é –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é?"
        )
        return STATE_RESERVATION

async def reservation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    # GPT
    adv = await invoke_gpt_experts("reservation", user_text, context.user_data)
    logger.info(f"GPT Experts [RESERVATION]:\n{adv}")

    if any(x in user_text for x in ["—Ç–∞–∫", "—Ö–æ—á—É", "—Ä–µ–∑–µ—Ä–≤—É—é"]):
        await update.message.reply_text(
            "–ß—É–¥–æ–≤–æ! –Ø –∑–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞–ª–∞ –¥–ª—è –≤–∞—Å –º—ñ—Å—Ü–µ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏. "
            "–ü—Ä–æ—Ç—è–≥–æ–º —Ü—å–æ–≥–æ —á–∞—Å—É –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —Ç–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. "
            "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è. "
            "–î—è–∫—É—é –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –Ω–∞—à–æ–≥–æ —Ç—É—Ä—É!"
        )
        return STATE_FINISH
    else:
        await update.message.reply_text(
            "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –Ø–∫—â–æ –≤–∏ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ –∞–±–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, "
            "–±—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è. –ú–∏ –∑–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏!"
        )
        return STATE_FINISH

async def transfer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    # GPT
    adv = await invoke_gpt_experts("transfer", user_text, context.user_data)
    logger.info(f"GPT Experts [TRANSFER]:\n{adv}")

    await update.message.reply_text(
        "–î—è–∫—É—é –∑–∞ –≤–∞—à—É –æ–ø–ª–∞—Ç—É! –Ø –ø–µ—Ä–µ–¥–∞—é –≤–∞—Å –Ω–∞—à–æ–º—É –∂–∏–≤–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. "
        "–í—ñ–Ω –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π. "
        "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ —Ç–æ–≥–æ —á–∞—Å—É, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –º–µ–Ω–µ. "
        "–î—è–∫—É—é –∑–∞ –≤–∏–±—ñ—Ä –Ω–∞—à–æ–≥–æ —Ç—É—Ä—É!"
    )
    return STATE_FINISH

async def finish_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    # GPT
    adv = await invoke_gpt_experts("finish", user_text, context.user_data)
    logger.info(f"GPT Experts [FINISH]:\n{adv}")

    await update.message.reply_text(
        "–î—è–∫—É—é –∑–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –≤–∏ –∑–∞—Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è "
        "–¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ. –ë–∞–∂–∞—é –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    await update.message.reply_text(
        '–î—è–∫—É—é –∑–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start.'
    )
    return ConversationHandler.END

def main():
    if is_bot_already_running():
        logger.error("Another instance of the bot is already running. Exiting.")
        sys.exit(1)

    # –£–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
    tz = timezone(timedelta(hours=2))  # UTC+2 for Kiev

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {tz}")

    # –°–æ–∑–¥–∞—ë–º Application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ bot_data
    application.bot_data["timezone"] = tz

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            STATE_INTRO: [MessageHandler(filters.TEXT & ~filters.COMMAND, intro_handler)],
            STATE_NEEDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, needs_handler)],
            STATE_PSYCHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, psycho_handler)],
            STATE_PRESENTATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, presentation_handler)],
            STATE_OBJECTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, objections_handler)],
            STATE_QUOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, quote_handler)],
            STATE_FAQ: [MessageHandler(filters.TEXT & ~filters.COMMAND, faq_handler)],
            STATE_FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_handler)],
            STATE_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment_handler)],
            STATE_RESERVATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, reservation_handler)],
            STATE_TRANSFER: [MessageHandler(filters.TEXT & ~filters.COMMAND, transfer_handler)],
            STATE_FINISH: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

