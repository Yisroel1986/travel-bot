import os
import logging
import sys
import psutil
import sqlite3
import json

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardRemove
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackContext
)
from telegram.request import HTTPXRequest
from datetime import datetime
from flask import Flask, request
import asyncio
import threading
import re
import requests

try:
    import spacy
    nlp_uk = spacy.load("uk_core_news_sm")
except:
    nlp_uk = None

try:
    import openai
except:
    openai = None

try:
    from transformers import pipeline
    sentiment_pipeline = pipeline("sentiment-analysis", model="nlptown/bert-base-multilingual-uncased-sentiment")
except:
    sentiment_pipeline = None

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CRM_API_KEY = os.getenv("CRM_API_KEY")
CRM_API_URL = os.getenv("CRM_API_URL", "https://familyplace.keycrm.app/api/v1/products")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", 'https://your-app.onrender.com')

if openai and OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY

def is_bot_already_running():
    current_process = psutil.Process()
    for process in psutil.process_iter(['pid', 'name', 'cmdline']):
        if (
            process.info['name'] == current_process.name()
            and process.info['cmdline'] == current_process.cmdline()
            and process.info['pid'] != current_process.pid
        ):
            return True
    return False

(
    STAGE_GREET,
    STAGE_DEPARTURE,
    STAGE_TRAVEL_PARTY,
    STAGE_CHILD_AGE,
    STAGE_CHOICE,
    STAGE_DETAILS,
    STAGE_ADDITIONAL_QUESTIONS,
    STAGE_IMPRESSION,
    STAGE_CLOSE_DEAL,
    STAGE_PAYMENT,
    STAGE_PAYMENT_CONFIRM,
    STAGE_END
) = range(12)

NO_RESPONSE_DELAY_SECONDS = 6 * 3600

app = Flask(__name__)
application = None

def init_db():
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS conversation_state (
            user_id TEXT PRIMARY KEY,
            current_stage INTEGER,
            user_data TEXT,
            last_interaction TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def load_user_state(user_id: str):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("SELECT current_stage, user_data FROM conversation_state WHERE user_id = ?", (user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return row[0], row[1]
    return None, None

def save_user_state(user_id: str, current_stage: int, user_data: dict):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    user_data_json = json.dumps(user_data, ensure_ascii=False)
    now = datetime.now().isoformat()
    c.execute("""
        INSERT OR REPLACE INTO conversation_state (user_id, current_stage, user_data, last_interaction)
        VALUES (?, ?, ?, ?)
    """, (user_id, current_stage, user_data_json, now))
    conn.commit()
    conn.close()

def fetch_all_products():
    """
    –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (—Ç—É—Ä—ã) –∏–∑ CRM, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–≥–∏–Ω–∞—Ü–∏—é.
    """
    if not CRM_API_KEY or not CRM_API_URL:
        logger.warning("CRM_API_KEY or CRM_API_URL not found. Returning empty tours list.")
        return []
    headers = {
        "Authorization": f"Bearer {CRM_API_KEY}",
        "Accept": "application/json"
    }

    all_items = []
    page = 1
    limit = 50
    while True:
        logger.info("Attempting to fetch from CRM... page=%s", page)
        params = {"page": page, "limit": limit}
        try:
            resp = requests.get(CRM_API_URL, headers=headers, params=params, timeout=10)
            if resp.status_code == 200:
                try:
                    data = resp.json()
                except json.JSONDecodeError:
                    logger.error(f"Failed to parse JSON. Response text: {resp.text}")
                    break

                if isinstance(data, dict):
                    if "data" in data and isinstance(data["data"], list):
                        items = data["data"]
                        all_items.extend(items)
                        total = data.get("total", len(all_items))
                        per_page = data.get("per_page", limit)
                        current_page = data.get("current_page", page)

                    elif "data" in data and isinstance(data["data"], dict):
                        sub = data["data"]
                        items = sub.get("items", [])
                        all_items.extend(items)
                        total = sub.get("total", len(all_items))
                        per_page = sub.get("per_page", limit)
                        current_page = sub.get("page", page)
                    else:
                        logger.warning("Unexpected JSON structure: %s", data)
                        break

                    if len(all_items) >= total:
                        break
                    else:
                        page += 1
                else:
                    logger.warning("Unexpected JSON format: not a dict, got %r", data)
                    break
            else:
                logger.error(f"CRM request failed with status {resp.status_code}")
                break
        except Exception as e:
            logger.error(f"CRM request exception: {e}")
            break

    logger.info(f"Fetched total {len(all_items)} products from CRM (across pages).")
    return all_items

def no_response_callback(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    text = (
        "–ó–¥–∞–≤–∞–ª–æ—Å—è, –≤–∏ –∑–∞–π–Ω—è—Ç—ñ, —Ç–æ–º—É —è –∫–æ—Ä–æ—Ç–∫–æ –Ω–∞–≥–∞–¥–∞—é –ø—Ä–æ —Ç—É—Ä —É –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞. "
        "–¶–µ —ñ–¥–µ–∞–ª—å–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏ ‚Äî —ñ –¥–ª—è –≤–∞—Å, —â–æ–± –≤—ñ–¥–ø–æ—á–∏—Ç–∏. "
        "–ú–∏ –æ—Ä–≥–∞–Ω—ñ–∑—É—î–º–æ –≤—Å–µ –ø—ñ–¥ –∫–ª—é—á, —â–æ–± –≤–∏ –º–æ–≥–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—è —á–∞—Å–æ–º —Ä–∞–∑–æ–º —ñ–∑ —Å—ñ–º‚Äô—î—é. "
        "–î—ñ—Ç–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è —â–∞—Å–ª–∏–≤—ñ, –∞ –±–∞—Ç—å–∫–∏ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ. "
        "–Ø–∫—â–æ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ ‚Äî –¥–∞–π—Ç–µ –∑–Ω–∞—Ç–∏! üòä"
    )
    context.bot.send_message(chat_id=chat_id, text=text)
    logger.info("No response scenario triggered for chat_id=%s", chat_id)

def schedule_no_response_job(context: CallbackContext, chat_id: int):
    job_queue = context.job_queue
    current_jobs = job_queue.get_jobs_by_name(f"no_response_{chat_id}")
    for job in current_jobs:
        job.schedule_removal()
    job_queue.run_once(
        no_response_callback,
        NO_RESPONSE_DELAY_SECONDS,
        chat_id=chat_id,
        name=f"no_response_{chat_id}",
        data={"message": "–ü–æ—Ö–æ–∂–µ, –≤–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ..."}
    )

def cancel_no_response_job(context: CallbackContext):
    job_queue = context.job_queue
    chat_id = context._chat_id if hasattr(context, '_chat_id') else None
    if chat_id:
        current_jobs = job_queue.get_jobs_by_name(f"no_response_{chat_id}")
        for job in current_jobs:
            job.schedule_removal()

async def typing_simulation(update: Update, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç "typing..." –∏ –ø–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—É–∑–æ–π, –∑–∞–≤–∏—Å—è—â–µ–π –æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞.
    """
    await update.effective_chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(min(4, max(2, len(text)/70)))
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())

def is_positive_response(text: str) -> bool:
    arr = ["—Ç–∞–∫","–¥–æ–±—Ä–µ","–¥–∞","–æ–∫","–ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ","—Ä–æ–∑–∫–∞–∂—ñ—Ç—å","–≥–æ—Ç–æ–≤–∏–π","–≥–æ—Ç–æ–≤–∞","–ø—Ä–∏–≤—ñ—Ç","hello","—Ä–∞—Å—Å–∫–∞–∂–∏","–∑–∞—Ü—ñ–∫–∞–≤","–∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–∏–π"]
    return any(k in text.lower() for k in arr)

def is_negative_response(text: str) -> bool:
    arr = ["–Ω–µ —Ö–æ—á—É","–Ω–µ –º–æ–∂—É","–Ω–µ—Ç","–Ω—ñ","–Ω–µ –±—É–¥—É","–Ω–µ –∑–∞—Ä–∞–∑"]
    return any(k in text.lower() for k in arr)

def analyze_intent(text: str) -> str:
    """
    –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ intent detection: positive / negative / unclear
    """
    if nlp_uk:
        doc = nlp_uk(text)
        lemmas = [token.lemma_.lower() for token in doc]
        pos = {"—Ç–∞–∫","–¥–æ–±—Ä–µ","–¥–∞","–æ–∫","–ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏","—Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏","–≥–æ—Ç–æ–≤–∏–π","–≥–æ—Ç–æ–≤–∞","–ø—Ä–∏–≤—ñ—Ç","hello","–∑–∞—Ü—ñ–∫–∞–≤–∏—Ç–∏","–∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–∏–π"}
        neg = {"–Ω–µ","–Ω–µ—Ö–æ—á—É","–Ω–µ–º–æ–∂—É","–Ω–µ—Ç","–Ω—ñ","–Ω–µ–±—É–¥—É","–Ω–µ –∑–∞—Ä–∞–∑"}
        if any(kw in lemmas for kw in pos):
            return "positive"
        if any(kw in lemmas for kw in neg):
            return "negative"
        return "unclear"
    else:
        if is_positive_response(text):
            return "positive"
        elif is_negative_response(text):
            return "negative"
        else:
            return "unclear"

def get_sentiment(text: str) -> str:
    if sentiment_pipeline:
        result = sentiment_pipeline(text)[0]
        try:
            stars = int(result["label"].split()[0])
            if stars <= 2:
                return "negative"
            elif stars == 3:
                return "neutral"
            else:
                return "positive"
        except:
            return "neutral"
    else:
        return "negative" if is_negative_response(text) else "neutral"

async def get_chatgpt_response(prompt: str) -> str:
    """
    –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ GPT –¥–ª—è fallback-–æ—Ç–≤–µ—Ç–æ–≤
    """
    if openai is None or not OPENAI_API_KEY:
        return "–í–∏–±–∞—á—Ç–µ, —Ñ—É–Ω–∫—Ü—ñ—è ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–æ–¥–µ–ª—å gpt-4.5 (—Ñ–µ–π–∫–æ–≤–∞—è, –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        response = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-4.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=350,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error("Error calling ChatGPT: %s", e)
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."

def detect_special_cases(text: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è/—Å–ª—É—á–∞–∏.
    """
    txt_lower = text.lower()

    # –¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞
    if any(k in txt_lower for k in ["–¥–æ—Ä–æ–≥–æ","–∑–∞–≤–µ–ª–∏–∫–∞","–Ω–µ –ø–æ—Ç—è–≥–Ω—É","–∑–∞–¥–æ—Ä–æ–≥–æ","—Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ"]):
        return "too_expensive"

    # –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    if any(k in txt_lower for k in ["–Ω–µ –∑–Ω–∞—é","–Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π","–º–æ–∂–ª–∏–≤–æ –ø—ñ–∑–Ω—ñ—à–µ","–ø–æ–¥—É–º–∞—é","–º–æ–∂–µ—Ç –ø–æ—Ç–æ–º"]):
        return "uncertain"

    # –ü–æ–≥–æ–¥–∞
    if any(k in txt_lower for k in ["–ø–æ–≥–æ–¥–∞","–¥–æ–∂–¥—å","–¥–æ—â","weather"]):
        return "weather"

    return ""

async def handle_special_case(update: Update, context: ContextTypes.DEFAULT_TYPE, case: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è:
    1. –¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞
    2. –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    3. –ü–æ–≥–æ–¥–∞
    """
    if case == "too_expensive":
        text = (
            "–†–æ–∑—É–º—ñ—é, —â–æ –≤–∏ —Ö–≤–∏–ª—é—î—Ç–µ—Å—å –∑–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å. –ê–ª–µ –≤ —Ü—é —Ü—ñ–Ω—É –≤—Ö–æ–¥–∏—Ç—å –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç: "
            "—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏ –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ç–∞ —Å—É–ø—Ä–æ–≤—ñ–¥. –í–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ –æ—Ç—Ä–∏–º–∞—î –º–æ—Ä–µ –µ–º–æ—Ü—ñ–π, "
            "–∞ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø–æ—á–∏—Ç–∏ –π –Ω–µ —Ö–≤–∏–ª—é–≤–∞—Ç–∏—Å—å –ø—Ä–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω—ñ –º–æ–º–µ–Ω—Ç–∏. –¶–µ –∂ –æ–¥–∏–Ω –¥–µ–Ω—å, "
            "—è–∫–∏–π –≤–∏ –∑–∞–ø–∞–º‚Äô—è—Ç–∞—î—Ç–µ –Ω–∞ –≤—Å–µ –∂–∏—Ç—Ç—è!\n\n"
            "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ —â–æ—Å—å –¥–µ—à–µ–≤—à–µ, –º–æ–∂–µ–º–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –±–µ–∑ —à–æ–ø—ñ–Ω–≥—É –∞–±–æ —ñ–Ω—à—ñ –¥–∞—Ç–∏ –∑ –∞–∫—Ü—ñ—î—é. "
            "–í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å —Ç–∞–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞?"
        )
        await typing_simulation(update, text)
        return True

    if case == "uncertain":
        text = (
            "–†–æ–∑—É–º—ñ—é, —â–æ –≤–∞–º —Ç—Ä–µ–±–∞ –ø–æ–¥—É–º–∞—Ç–∏. –ü—Ä–æ–ø–æ–Ω—É—é –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏ –±–µ–∑ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏, "
            "—â–æ–± –≤–æ–Ω–æ —Ç–æ—á–Ω–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –∑–∞ –≤–∞–º–∏. –ú—ñ—Å—Ü—è —Ä–æ–∑–±–∏—Ä–∞—é—Ç—å –¥—É–∂–µ —à–≤–∏–¥–∫–æ, –æ—Å–æ–±–ª–∏–≤–æ –Ω–∞ –≤–∏—Ö—ñ–¥–Ω—ñ. "
            "–•–æ—Ç—ñ–ª–∏ –± –≤–∏ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Ç–∞–∫–æ—é –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é?"
        )
        await typing_simulation(update, text)
        return True

    if case == "weather":
        text = (
            "–ü–æ–≥–æ–¥–∞ –º–æ–∂–µ –±—É—Ç–∏ —Ä—ñ–∑–Ω–æ—é, –∞–ª–µ –≤ –∑–æ–æ–ø–∞—Ä–∫—É —î –∫—Ä–∏—Ç—ñ –ø–∞–≤—ñ–ª—å–π–æ–Ω–∏ —Ç–∞ –±–∞–≥–∞—Ç–æ –∑–æ–Ω –¥–ª—è –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É. "
            "–ú–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ –ø—Ä–æ–≥–Ω–æ–∑ —ñ —è–∫—â–æ –±—É–¥–µ —Å–∏–ª—å–Ω–∏–π –¥–æ—â, –ø–æ–ø–µ—Ä–µ–¥–∏–º–æ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É—î–º–æ "
            "–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞—Ç—É. –î—ñ—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–æ –æ—Ç—Ä–∏–º—É—é—Ç—å –∫—É–ø—É –≤—Ä–∞–∂–µ–Ω—å, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ç—Ä–æ—Ö–∏ –Ω–∞–∫—Ä–∞–ø–∞—î. "
            "–ß–∏ –º–æ–∂—É —è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —â–µ –Ω–∞ —è–∫—ñ—Å—å –≤–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è?"
        )
        await typing_simulation(update, text)
        return True

    return False

# ---------------------- FLASK & BOT SETUP ----------------------

@app.route('/')
def index():
    return "–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î! –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π."

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == "POST":
        data = request.get_json(force=True)
        global application
        if not application:
            logger.error("Application is not initialized yet.")
            return "No application available"
        update = Update.de_json(data, application.bot)
        loop = application.bot_data.get("loop")
        if loop:
            asyncio.run_coroutine_threadsafe(application.process_update(update), loop)
            logger.info("Webhook received and processed.")
        else:
            logger.error("No event loop available to process update.")
    return "OK"

async def setup_webhook(url, app_ref):
    webhook_url = f"{url}/webhook"
    await app_ref.bot.set_webhook(webhook_url)
    logger.info(f"Webhook set to: {webhook_url}")

async def run_bot():
    if is_bot_already_running():
        logger.error("Another instance is already running. Exiting.")
        sys.exit(1)
    logger.info("Starting bot...")
    req = HTTPXRequest(connect_timeout=20, read_timeout=40)
    application_builder = Application.builder().token(BOT_TOKEN).request(req)
    global application
    application = application_builder.build()

    # -------------------- CONVERSATION HANDLER --------------------
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            STAGE_GREET: [MessageHandler(filters.TEXT & ~filters.COMMAND, greet_handler)],
            STAGE_DEPARTURE: [MessageHandler(filters.TEXT & ~filters.COMMAND, departure_handler)],
            STAGE_TRAVEL_PARTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, travel_party_handler)],
            STAGE_CHILD_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, child_age_handler)],
            STAGE_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choice_handler)],
            STAGE_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, details_handler)],
            STAGE_ADDITIONAL_QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, additional_questions_handler)],
            STAGE_IMPRESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, impression_handler)],
            STAGE_CLOSE_DEAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, close_deal_handler)],
            STAGE_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment_handler)],
            STAGE_PAYMENT_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment_confirm_handler)],
            STAGE_END: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    lambda u, c: c.bot.send_message(
                        chat_id=u.effective_chat.id,
                        text="–î—è–∫—É—é! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî /start."
                    )
                )
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_command)],
        allow_reentry=True
    )
    application.add_handler(conv_handler)

    # -------------------- WEBHOOK SETUP --------------------
    await setup_webhook(WEBHOOK_URL, application)
    await application.initialize()
    await application.start()
    loop = asyncio.get_running_loop()
    application.bot_data["loop"] = loop
    logger.info("Bot is online and ready.")

def start_flask():
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"Starting Flask on port {port}")
    app.run(host='0.0.0.0', port=port)

# --------------------- HANDLERS LOGIC ----------------------

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    init_db()
    cancel_no_response_job(context)

    stg, dat = load_user_state(user_id)
    if stg is not None and dat is not None:
        text = (
            "–í–∏ –º–∞—î—Ç–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—É —Ä–æ–∑–º–æ–≤—É. "
            "–ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —Ç–æ–≥–æ –∂ –º—ñ—Å—Ü—è —á–∏ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ?\n"
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ: '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' –∞–±–æ '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'."
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_GREET
    else:
        txt = (
            "–í—ñ—Ç–∞—é –≤–∞—Å! üòä –í–∏ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏—Å—å –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–º —Ç—É—Ä–æ–º –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞, –£–≥–æ—Ä—â–∏–Ω–∞. "
            "–¶–µ —ñ–¥–µ–∞–ª—å–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –¥–∏—Ç–∏–Ω—ñ –¥–µ–Ω—å —â–∞—Å—Ç—è, –∞ —Å–æ–±—ñ ‚Äî –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –≤—ñ–¥ —Ä—É—Ç–∏–Ω–∏. "
            "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å, —â–æ–± –Ω–∞–¥–∞—Ç–∏ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –î–æ–±—Ä–µ?"
        )
        await typing_simulation(update, txt)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_GREET

async def greet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    case = detect_special_cases(txt)
    if case:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
        handled = await handle_special_case(update, context, case)
        if handled:
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_GREET

    if "–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏" in txt.lower():
        stg, dat = load_user_state(user_id)
        if stg is not None:
            context.user_data.update(json.loads(dat))
            resp = "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Ä–æ–∑–º–æ–≤–∏."
            await typing_simulation(update, resp)
            schedule_no_response_job(context, update.effective_chat.id)
            return stg
        else:
            r = "–ù–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö, –ø–æ—á–Ω–µ–º–æ –∑ –Ω—É–ª—è."
            await typing_simulation(update, r)
            save_user_state(user_id, STAGE_GREET, context.user_data)
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_GREET

    if "–ø–æ—á–∞—Ç–∏" in txt.lower() or "–∑–∞–Ω–æ–≤–æ" in txt.lower():
        context.user_data.clear()
        g = (
            "–í—ñ—Ç–∞—é –≤–∞—Å! üòä –ü–æ—á–Ω—ñ–º–æ —Å–ø–æ—á–∞—Ç–∫—É! –û–¥–Ω–æ–¥–µ–Ω–Ω–∏–π —Ç—É—Ä –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞ ‚Äî —ñ–¥–µ–∞–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä –¥–ª—è —Å—ñ–º–µ–π–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É. "
            "–î–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω–µ–Ω—å. –ì–æ—Ç–æ–≤—ñ?"
        )
        await typing_simulation(update, g)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_GREET

    intent = analyze_intent(txt)
    if intent == "positive":
        t = (
            "–ß—É–¥–æ–≤–æ! –î—è–∫—É—é –∑–∞ –≤–∞—à—É –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ—Å—Ç—å! "
            "–ó–≤—ñ–¥–∫–∏ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏: –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞? üöå"
        )
        await typing_simulation(update, t)
        save_user_state(user_id, STAGE_DEPARTURE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_DEPARTURE
    elif intent == "negative":
        m = (
            "–Ø –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –Ω–∞—à —Ç—É—Ä, —è–∫—â–æ –∑–∞—Ä–∞–∑ –≤–∞–º –Ω–µ–∑—Ä—É—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è. "
            "–ë—É–¥–µ –±—É–∫–≤–∞–ª—å–Ω–æ —Ö–≤–∏–ª–∏–Ω–∞, —â–æ–± –≤–∏ –∑—Ä–æ–∑—É–º—ñ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É —Å—É—Ç—å."
        )
        await typing_simulation(update, m)
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_DETAILS

    # Fallback
    fp = (
        "–í —Ä–∞–º–∫–∞—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—é —Ç—É—Ä–∞, –∫–ª—ñ—î–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤: " + txt +
        "\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å —Å—Ü–µ–Ω–∞—Ä—ñ—é —Ç—É—Ä–∞."
    )
    fallback_text = await get_chatgpt_response(fp)
    await typing_simulation(update, fallback_text)
    return STAGE_GREET

async def departure_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    case = detect_special_cases(txt)
    if case:
        handled = await handle_special_case(update, context, case)
        if handled:
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_DEPARTURE

    context.user_data["departure"] = txt
    r = (
        "–î–ª—è –∫–æ–≥–æ –≤–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç–µ —Ü—é –ø–æ—ó–∑–¥–∫—É? –ß–∏ –ø–ª–∞–Ω—É—î—Ç–µ —ó—Ö–∞—Ç–∏ —Ä–∞–∑–æ–º —ñ–∑ –¥–∏—Ç–∏–Ω–æ—é?\n"
        "–ú–∏ —á–∞—Å—Ç–æ —Ä–æ–±–∏–º–æ —Å—ñ–º–µ–π–Ω—ñ –±–æ–Ω—É—Å–∏, —è–∫—â–æ —ó–¥—É—Ç—å –¥–≤–æ—î –∞–±–æ –±—ñ–ª—å—à–µ –¥—ñ—Ç–µ–π!"
    )
    await typing_simulation(update, r)
    user_id = str(update.effective_user.id)
    save_user_state(user_id, STAGE_TRAVEL_PARTY, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_TRAVEL_PARTY

async def travel_party_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    case = detect_special_cases(txt)
    if case:
        handled = await handle_special_case(update, context, case)
        if handled:
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_TRAVEL_PARTY

    if "–¥–∏—Ç" in txt:
        context.user_data["travel_party"] = "child"
        await typing_simulation(update, "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ?")
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_CHILD_AGE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CHILD_AGE
    else:
        context.user_data["travel_party"] = "no_child"
        r = (
            "–ß—É–¥–æ–≤–æ, –º–∏ —Ç–∞–∫–æ–∂ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Ü—ñ–∫–∞–≤—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö! "
            "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
        )
        await typing_simulation(update, r)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CHOICE

async def child_age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    case = detect_special_cases(txt)
    if case:
        handled = await handle_special_case(update, context, case)
        if handled:
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_CHILD_AGE

    if txt.isdigit():
        context.user_data["child_age"] = txt
        r = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
        await typing_simulation(update, r)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CHOICE

    if any(x in txt.lower() for x in ["–¥–µ—Ç–∞–ª","–≤–∞—Ä—Ç—ñ—Å—Ç—å","—Ü—ñ–Ω–∞","–±—Ä–æ–Ω"]):
        context.user_data["child_age"] = "unspecified"
        rr = "–î–æ–±—Ä–µ, –ø–µ—Ä–µ–π–¥–µ–º–æ –¥–∞–ª—ñ."
        await typing_simulation(update, rr)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CHOICE

    await typing_simulation(update, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤—ñ–∫ –¥–∏—Ç–∏–Ω–∏ –∞–±–æ –∑–∞–¥–∞–π—Ç–µ —ñ–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è.")
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_CHILD_AGE

async def choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    case = detect_special_cases(txt)
    if case:
        handled = await handle_special_case(update, context, case)
        if handled:
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_CHOICE

    if "–¥–µ—Ç–∞–ª" in txt or "–¥–µ—Ç–∞–ª—ñ" in txt:
        context.user_data["choice"] = "details"
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        return await details_handler(update, context)

    elif "–≤–∞—Ä—Ç—ñ—Å—Ç—å" in txt or "—Ü—ñ–Ω–∞" in txt:
        context.user_data["choice"] = "cost"
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        return await details_handler(update, context)

    elif "–±—Ä–æ–Ω" in txt:
        context.user_data["choice"] = "booking"
        r = (
            "–Ø –¥—É–∂–µ —Ä–∞–¥–∞, —â–æ –í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ–¥–æ—Ä–æ–∂ –∑ –Ω–∞–º–∏, —Ü–µ –±—É–¥–µ –¥—ñ–π—Å–Ω–æ –∫—Ä—É—Ç–∞ –ø–æ—ó–∑–¥–∫–∞. "
            "–î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—Å —ñ –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏. –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å —É —Ä–æ–∑–º—ñ—Ä—ñ 30% "
            "—Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–±–æ —ñ–Ω—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º —É—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. "
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank? üí≥"
        )
        await typing_simulation(update, r)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CLOSE_DEAL

    resp = "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å: –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è?"
    await typing_simulation(update, resp)
    user_id = str(update.effective_user.id)
    save_user_state(user_id, STAGE_CHOICE, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_CHOICE

async def details_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    case = detect_special_cases(txt)
    if case:
        handled = await handle_special_case(update, context, case)
        if handled:
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_DETAILS

    choice = context.user_data.get("choice","details")
    prods = fetch_all_products()

    fprods = []
    if any(x in txt for x in ["–∑–æ–æ–ø–∞—Ä–∫","–Ω—ñ—Ä–µ–¥—å–≥–∞–∑–∞","–Ω—ó—Ä–µ–¥—å–≥–∞–∑–∞"]):
        for p in prods:
            n = p.get("name","").lower()
            if "–∑–æ–æ–ø–∞—Ä–∫" in n or "–Ω—ñ—Ä–µ–¥—å–≥–∞–∑–∞" in n:
                fprods.append(p)
    else:
        fprods = prods

    if not fprods:
        tours_info = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö —Ç—É—Ä—ñ–≤ —É CRM –∞–±–æ —Å—Ç–∞–≤—Å—è –∑–±—ñ–π."
    else:
        if len(fprods) == 1:
            p = fprods[0]
            pname = p.get("name","No name")
            pprice = p.get("price",0)
            pdesc = p.get("description","")
            if not pdesc:
                pdesc = "–ë–µ–∑ –æ–ø–∏—Å—É"
            tours_info = f"–¢—É—Ä: {pname}\n–¶—ñ–Ω–∞: {pprice}\n–û–ø–∏—Å: {pdesc}"
        else:
            tours_info = "–ó–Ω–∞–π—à–ª–∏ –∫—ñ–ª—å–∫–∞ —Ç—É—Ä—ñ–≤:\n"
            for p in fprods:
                pid = p.get("id","?")
                pname = p.get("name","No name")
                pprice = p.get("price",0)
                tours_info += f"- {pname} (ID {pid}), —Ü—ñ–Ω–∞: {pprice}\n"

    if choice == "cost":
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —Ç–∞ –ú—É–∫–∞—á–µ–≤–∞.\n"
            "–¶–µ —Ü—ñ–ª–∏–π –¥–µ–Ω—å, —ñ –≤–≤–µ—á–µ—Ä—ñ –≤–∏ –±—É–¥–µ—Ç–µ –≤–¥–æ–º–∞.\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É: 1900 –≥—Ä–Ω –∑ –æ—Å–æ–±–∏ (–≤–∫–ª—é—á–∞—î —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è).\n\n"
            "–ó–∞ —Ü—ñ –≥—Ä–æ—à—ñ –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –≥–æ—Ç–æ–≤–∏–π –¥–µ–Ω—å —è—Å–∫—Ä–∞–≤–∏—Ö –µ–º–æ—Ü—ñ–π —ñ —Å–ø–æ–≥–∞–¥—ñ–≤, "
            "–∞ —â–µ ‚Äî –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —Å–ø–æ–∫—ñ–π –±–µ–∑ –∑–∞–π–≤–∏—Ö –∫–ª–æ–ø–æ—Ç—ñ–≤.\n\n"
            + tours_info
        )
    else:
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞.\n"
            "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: –¶—ñ–ª–∏–π –¥–µ–Ω—å.\n"
            "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω–∏–π –∞–≤—Ç–æ–±—É—Å.\n"
            "–ó–æ–æ–ø–∞—Ä–∫: –ë—ñ–ª—å—à–µ 500 –≤–∏–¥—ñ–≤ —Ç–≤–∞—Ä–∏–Ω.\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å: 1900 –≥—Ä–Ω (—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è).\n\n"
            "–£—è–≤—ñ—Ç—å, —è–∫ –≤–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ –ª–µ–≤—ñ–≤, –∂–∏—Ä–∞—Ñ—ñ–≤ —ñ —Å–ª–æ–Ω—ñ–≤, "
            "–∞ –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–∑—Å–ª–∞–±–∏—Ç–∏—Å—è —ñ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—è —á–∞—Å–æ–º —Ä–∞–∑–æ–º. "
            "–î–æ —Ç–æ–≥–æ –∂ –º–∏ —Ä–æ–±–∏–º–æ –∑—É–ø–∏–Ω–∫—É –≤ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ ‚Äî –º–æ–∂–Ω–∞ –¥–æ–∫—É–ø–∏—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ —á–∏ –≤–∏–ø–∏—Ç–∏ –∫–∞–≤–∏.\n\n"
            + tours_info
        )

    await typing_simulation(update, text)
    user_id = str(update.effective_user.id)
    save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)

    await update.effective_chat.send_message(text="–ß–∏ —î —É –≤–∞—Å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç—É—Ä—É? üòä")
    return STAGE_ADDITIONAL_QUESTIONS

async def additional_questions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    case = detect_special_cases(txt)
    if case:
        handled = await handle_special_case(update, context, case)
        if handled:
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_ADDITIONAL_QUESTIONS

    time_keys = ["–∫–æ–ª–∏ –≤–∏—ó–∑–¥","–∫–æ–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è","—á–∞—Å –≤–∏—ó–∑–¥—É","–∫–æ–ª–∏ –∞–≤—Ç–æ–±—É—Å","–∫–æ–ª–∏ –≤–∏—Ä—É—à–∞—î–º–æ"]
    if any(k in txt for k in time_keys):
        ans = (
            "–í–∏—ó–∑–¥ –æ 6:00 –∑ –£–∂–≥–æ—Ä–æ–¥–∞, –æ 6:30 –∑ –ú—É–∫–∞—á–µ–≤–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –æ 20:00.\n"
            "–ß–∏ —î —â–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?"
        )
        await typing_simulation(update, ans)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

    book_keys = ["–±—Ä–æ–Ω—é–≤–∞—Ç–∏","–±—Ä–æ–Ω—é–π","–∫—É–ø—É–≤–∞—Ç–∏ —Ç—É—Ä","–¥–∞–≤–∞–π –±—Ä–æ–Ω—é–≤–∞—Ç–∏","–æ–∫–µ–π –¥–∞–≤–∞–π –±—Ä–æ–Ω—é–≤–∞—Ç–∏","–æ–∫–µ–π –±—Ä–æ–Ω—é–π —Ç—É—Ä"]
    if any(k in txt for k in book_keys):
        r = (
            "–ß—É–¥–æ–≤–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –Ø –Ω–∞–¥–∞–º –≤–∞–º —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏. "
            "–î–æ —Ä–µ—á—ñ, —É –Ω–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ª–∏—à–µ –¥–µ–∫—ñ–ª—å–∫–∞ –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å, —Ç–æ–∂ –∫—Ä–∞—â–µ –Ω–µ –≤—ñ–¥–∫–ª–∞–¥–∞—Ç–∏!"
        )
        await typing_simulation(update, r)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        return await close_deal_handler(update, context)

    no_more = ["–Ω–µ–º–∞—î","–≤—Å–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ","–≤—Å–µ –æ–∫","–¥–æ—Å–∏—Ç—å","—Å–ø–∞—Å–∏–±—ñ","–¥—è–∫—É—é"]
    if any(k in txt for k in no_more):
        rr = "–Ø–∫ –≤–∞–º –Ω–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤ —Ü—ñ–ª–æ–º—É? üåü"
        await typing_simulation(update, rr)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_IMPRESSION, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_IMPRESSION

    s = get_sentiment(txt)
    if s == "negative":
        fp = (
            "–ö–ª—ñ—î–Ω—Ç –≤–∏—Å–ª–æ–≤–∏–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ —Å—Ç–∞–≤–ª–µ–Ω–Ω—è: " + txt +
            "\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –ø—Ä–æ—è–≤–ª—è—é—á–∏ –µ–º–ø–∞—Ç—ñ—é, –≤–∏–±–∞—á—Å—è —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –¥–æ–ø–æ–º–æ–≥—É."
        )
        fallback_text = await get_chatgpt_response(fp)
        await typing_simulation(update, fallback_text)
        return STAGE_ADDITIONAL_QUESTIONS

    i = analyze_intent(txt)
    if i == "unclear":
        prompt = (
            "–í —Ä–∞–º–∫–∞—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—é —Ç—É—Ä–∞, –∫–ª—ñ—î–Ω—Ç –∑–∞–¥–∞–≤ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: " + txt +
            "\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å —Å—Ü–µ–Ω–∞—Ä—ñ—é —Ç–∞ –ø—Ä–æ—è–≤–ª—è—é—á–∏ —Ä–æ–∑—É–º—ñ–Ω–Ω—è."
        )
        fb = await get_chatgpt_response(prompt)
        await typing_simulation(update, fb)
        return STAGE_ADDITIONAL_QUESTIONS

    ans = (
        "–ì–∞—Ä–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! –Ø–∫—â–æ —î —â–µ —â–æ—Å—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–∏—Ç–∞–π—Ç–µ.\n\n"
        "–ß–∏ —î —â–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?"
    )
    await typing_simulation(update, ans)
    user_id = str(update.effective_user.id)
    save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_ADDITIONAL_QUESTIONS

async def impression_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    case = detect_special_cases(txt)
    if case:
        handled = await handle_special_case(update, context, case)
        if handled:
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_IMPRESSION

    pos = ["–¥–æ–±—Ä–µ","–∫–ª–∞—Å","—Ü—ñ–∫–∞–≤–æ","–≤—ñ–¥–º—ñ–Ω–Ω–æ","—Å—É–ø–µ—Ä","–ø—ñ–¥—Ö–æ–¥–∏—Ç—å","—Ç–∞–∫"]
    neg = ["–Ω—ñ","–Ω–µ —Ü—ñ–∫–∞–≤–æ","–¥–æ—Ä–æ–≥–æ","–∑–∞–≤–µ–ª–∏–∫–∞","–Ω–∞–¥—Ç–æ"]
    if any(k in txt for k in pos):
        r = (
            "–ß—É–¥–æ–≤–æ! üéâ –¢–æ–¥—ñ –¥–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, —â–æ–± –∑–∞ –≤–∞–º–∏ –∑–∞–∫—Ä—ñ–ø–∏—Ç–∏ –º—ñ—Å—Ü–µ. "
            "–î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å —É —Ä–æ–∑–º—ñ—Ä—ñ 30% —ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–±–æ —ñ–Ω—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É. "
            "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –Ω–∞–¥—ñ—à–ª—é –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ, –≤–∫–ª—é—á–Ω–æ –∑ –ø–æ—Ä–∞–¥–∞–º–∏ —â–æ–¥–æ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–∞ —Å–ø–∏—Å–∫–æ–º —Ä–µ—á–µ–π.\n"
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank? üí≥"
        )
        await typing_simulation(update, r)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CLOSE_DEAL
    elif any(k in txt for k in neg):
        rr = (
            "–®–∫–æ–¥–∞ —Ü–µ —á—É—Ç–∏. –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Å –∑–∞—Ü—ñ–∫–∞–≤–ª—è—Ç—å —ñ–Ω—à—ñ –Ω–∞—à—ñ —Ç—É—Ä–∏ —á–∏ –∞–∫—Ü—ñ–π–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó? "
            "–Ø–∫—â–æ —É –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–∏—Å—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —è —ñ–∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º –≤—ñ–¥–ø–æ–≤—ñ–º."
        )
        await typing_simulation(update, rr)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_END, context.user_data)
        return STAGE_END
    else:
        resp = (
            "–î—è–∫—É—é –∑–∞ –≤–∞—à—É –¥—É–º–∫—É! –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –º–æ–∂–µ–º–æ –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –∑–∞—Ä–∞–∑, "
            "–∞–±–æ –∂ —è –º–æ–∂—É —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, VIP-–ø–∞–∫–µ—Ç –∑ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–º —Å—É–ø—Ä–æ–≤–æ–¥–æ–º). "
            "–Ø–∫ –∫—Ä–∞—â–µ?"
        )
        await typing_simulation(update, resp)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CLOSE_DEAL

async def close_deal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    case = detect_special_cases(txt)
    if case:
        handled = await handle_special_case(update, context, case)
        if handled:
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_CLOSE_DEAL

    pos = ["–ø—Ä–∏–≤–∞—Ç","–º–æ–Ω–æ","–æ–ø–ª–∞—á—É","–≥–æ—Ç–æ–≤","–≥–æ—Ç–æ–≤–∞","–¥–∞–≤–∞–π—Ç–µ","—Å–∫–∏–Ω—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"]
    if any(k in txt for k in pos):
        r = (
            "–ß—É–¥–æ–≤–æ! –û—Å—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n"
            "–ö–∞—Ä—Ç–∫–∞: 0000 0000 0000 0000 (Family Place)\n\n"
            "–Ø–∫ —Ç—ñ–ª—å–∫–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. "
            "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é –≤–∞–º –ø—Ä–æ–≥—Ä–∞–º—É –ø–æ—ó–∑–¥–∫–∏ —ñ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π, "
            "—â–æ–± –ø–æ–¥–æ—Ä–æ–∂ –ø—Ä–æ–π—à–ª–∞ —ñ–¥–µ–∞–ª—å–Ω–æ!"
        )
        await typing_simulation(update, r)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_PAYMENT

    neg = ["–Ω—ñ","–Ω–µ—Ç","–Ω–µ –±—É–¥—É","–Ω–µ —Ö–æ—á—É"]
    if any(k in txt for k in neg):
        r2 = (
            "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –Ø–∫—â–æ –∑–º—ñ–Ω–∏—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è –∞–±–æ –∑‚Äô—è–≤–ª—è—Ç—å—Å—è –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —è –±—É–¥—É —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏. "
            "–ü–∞–º‚Äô—è—Ç–∞–π—Ç–µ, —â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å –æ–±–º–µ–∂–µ–Ω–∞, —Ç–æ–∂ —è–∫—â–æ –≤–∏—Ä—ñ—à–∏—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ ‚Äî –ø–∏—à—ñ—Ç—å, "
            "–∞–ª–µ –º–æ–∂–µ –≤–∂–µ –Ω–µ –∑–∞–ª–∏—à–∏—Ç–∏—Å—è –≤—ñ–ª—å–Ω–∏—Ö. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!"
        )
        await typing_simulation(update, r2)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_END, context.user_data)
        return STAGE_END

    if any(x in txt for x in ["–¥–µ—Ç–∞–ª","–≤–∞—Ä—Ç—ñ—Å—Ç—å","—Ü—ñ–Ω–∞","–ø–æ–≥–æ–¥–∞","–ø—Ä–æ–≥—Ä–∞–º–∞","—â–µ –ø–∏—Ç–∞–Ω–Ω—è"]):
        text = (
            "–ó —Ä–∞–¥—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ–º! –ü–æ–≤–µ—Ä–Ω—ñ–º–æ—Å—è –¥–æ –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä—É. "
            "–ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç–∏, —â–æ —Å–∞–º–µ —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ?"
        )
        await typing_simulation(update, text)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        return STAGE_DETAILS

    r3 = (
        "–ì–∞—Ä–∞–∑–¥! –í–∏ –≥–æ—Ç–æ–≤—ñ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è? –í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank? "
        "–ê –º–æ–∂–µ, —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ VIP-–ø–∞–∫–µ—Ç? üòâ"
    )
    await typing_simulation(update, r3)
    user_id = str(update.effective_user.id)
    save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_CLOSE_DEAL

async def payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    case = detect_special_cases(txt)
    if case:
        handled = await handle_special_case(update, context, case)
        if handled:
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_PAYMENT

    if any(k in txt for k in ["–æ–ø–ª–∞—Ç–∏–≤","–≤—ñ–¥–ø—Ä–∞–≤–∏–≤","—Å–∫–∏–Ω—É–≤","–≥–æ—Ç–æ–≤–æ","–ø–µ—Ä–µ–≤—ë–ª"]):
        r = (
            "–î—è–∫—É—é! –ó–∞—Ä–∞–∑ –ø–µ—Ä–µ–≤—ñ—Ä—é –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è. –Ø–∫ —Ç—ñ–ª—å–∫–∏ –ø–æ–±–∞—á—É –æ–ø–ª–∞—Ç—É, "
            "–≤—ñ–¥–ø—Ä–∞–≤–ª—é –≤–∞–º –¥–µ—Ç–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É —Ç–∞ –ø—ñ–¥—Å—É–º—É—é –≤—Å—ñ –∫—Ä–æ–∫–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏. "
            "–Ø–∫—â–æ –±—É–¥—É—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª—è–π—Ç–µ!"
        )
        await typing_simulation(update, r)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_PAYMENT_CONFIRM, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_PAYMENT_CONFIRM
    else:
        rr = (
            "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—â—ñ –∑ –æ–ø–ª–∞—Ç–æ—é, —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ —Å–ø–æ—Å–æ–±–∏. "
            "–ú–æ–∂–ª–∏–≤–æ, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è —â–æ–¥–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–∞–∑—É?"
        )
        await typing_simulation(update, rr)
        user_id = str(update.effective_user.id)
        save_user_state(user_id, STAGE_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_PAYMENT

async def payment_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    r = (
        "–î—è–∫—É—é –∑–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è! –í–∞—à–µ –º—ñ—Å—Ü–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–µ. "
        "–Ø –Ω–∞–¥—ñ—à–ª—é –≤–∞–º –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—ó–∑–¥–∫—É, —Å–ø–∏—Å–æ–∫ —Ä–µ—á–µ–π —ñ –∫—ñ–ª—å–∫–∞ –ø–æ—Ä–∞–¥, "
        "—â–æ–± –ø–æ–¥–æ—Ä–æ–∂ –ø—Ä–æ–π—à–ª–∞ –±–µ–∑–¥–æ–≥–∞–Ω–Ω–æ. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –ø–∏—à—ñ—Ç—å, —è –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É!"
    )
    await typing_simulation(update, r)
    user_id = str(update.effective_user.id)
    save_user_state(user_id, STAGE_END, context.user_data)
    return STAGE_END

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name if user else "Unknown")
    t = (
        "–î–æ–±—Ä–µ, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É. –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –∞–±–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî "
        "–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start. –ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏!"
    )
    await typing_simulation(update, t)
    uid = str(update.effective_user.id)
    save_user_state(uid, STAGE_END, context.user_data)
    return ConversationHandler.END

# --------------------- MAIN ----------------------

if __name__ == '__main__':
    bot_thread = threading.Thread(target=lambda: asyncio.run(run_bot()), daemon=True)
    bot_thread.start()
    logger.info("Bot thread started. Now starting Flask...")
    start_flask()
