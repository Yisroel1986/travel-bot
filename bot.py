# bot.py

import os
import logging
import sys
import psutil
import sqlite3
import json
from datetime import datetime
import asyncio
import threading
import requests

from dotenv import load_dotenv
from flask import Flask, request
from telegram import Update, ReplyKeyboardRemove
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder,
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackContext
)
from telegram.request import HTTPXRequest

# spaCy, openai, huggingface
try:
    import spacy
    nlp_uk = spacy.load("uk_core_news_sm")
except:
    nlp_uk = None

try:
    import openai
except:
    openai = None

try:
    from transformers import pipeline
    sentiment_pipeline = pipeline("sentiment-analysis", model="cardiffnlp/twitter-roberta-base-sentiment-latest")
except:
    sentiment_pipeline = None

from scenario import ScenarioData
from gpt_logic import GPTLogic

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "")

if openai and OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY

app = Flask(__name__)
application = None

gpt_logic = GPTLogic()

def is_bot_already_running():
    current_process = psutil.Process()
    for process in psutil.process_iter(['pid', 'name', 'cmdline']):
        if (
            process.info['name'] == current_process.name()
            and process.info['cmdline'] == current_process.cmdline()
            and process.info['pid'] != current_process.pid
        ):
            return True
    return False

# -----------------------------
# Conversation states
# -----------------------------
(
    STAGE_SCENARIO_CHOICE,
    STAGE_CAMP_PHONE,
    STAGE_CAMP_NO_PHONE_QA,
    STAGE_CAMP_DETAILED,
    STAGE_CAMP_END,
    STAGE_ZOO_GREET,
    STAGE_ZOO_DEPARTURE,
    STAGE_ZOO_TRAVEL_PARTY,
    STAGE_ZOO_CHILD_AGE,
    STAGE_ZOO_CHOICE,
    STAGE_ZOO_DETAILS,
    STAGE_ZOO_QUESTIONS,
    STAGE_ZOO_IMPRESSION,
    STAGE_ZOO_CLOSE_DEAL,
    STAGE_ZOO_PAYMENT,
    STAGE_ZOO_PAYMENT_CONFIRM,
    STAGE_ZOO_END
) = range(17)

NO_RESPONSE_DELAY_SECONDS = 6*3600

# -----------------------------
# DB
# -----------------------------
def init_db():
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS conversation_state (
            user_id TEXT PRIMARY KEY,
            current_stage INTEGER,
            user_data TEXT,
            last_interaction TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def load_user_state(user_id:str):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("SELECT current_stage,user_data FROM conversation_state WHERE user_id=?",(user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return row[0], row[1]
    return None,None

def save_user_state(user_id:str, stage:int, user_data:dict):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    ud_json = json.dumps(user_data, ensure_ascii=False)
    now = datetime.now().isoformat()
    c.execute("""
        INSERT OR REPLACE INTO conversation_state 
        (user_id, current_stage, user_data, last_interaction)
        VALUES (?,?,?,?)
    """,(user_id, stage, ud_json, now))
    conn.commit()
    conn.close()

# -----------------------------
# No response callback
# -----------------------------
def no_response_callback(context:CallbackContext):
    chat_id = context.job.chat_id
    text = ScenarioData.get_no_response_fallback()
    context.bot.send_message(chat_id=chat_id, text=text)

def schedule_no_response_job(context:CallbackContext, chat_id:int):
    jq = context.job_queue
    jobs = jq.get_jobs_by_name(f"noresp_{chat_id}")
    for j in jobs:
        j.schedule_removal()
    jq.run_once(no_response_callback, NO_RESPONSE_DELAY_SECONDS, 
                chat_id=chat_id, name=f"noresp_{chat_id}")

def cancel_no_response_job(context:CallbackContext):
    jq = context.job_queue
    chat_id = getattr(context, '_chat_id', None)
    if chat_id:
        jobs = jq.get_jobs_by_name(f"noresp_{chat_id}")
        for j in jobs:
            j.schedule_removal()

# -----------------------------
# Typing simulation
# -----------------------------
async def typing_simulation(update:Update, text:str):
    await update.effective_chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(min(4, max(2, len(text)/70)))
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())

# -----------------------------
# Intent detection
# -----------------------------
def is_positive_response(txt:str)->bool:
    arr = ["—Ç–∞–∫","–¥–æ–±—Ä–µ","–¥–∞","–æ–∫","–ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ","—Ä–æ–∑–∫–∞–∂—ñ—Ç—å","–≥–æ—Ç–æ–≤–∏–π","–≥–æ—Ç–æ–≤–∞","–ø—Ä–∏–≤—ñ—Ç","hello","–∑–∞—Ü—ñ–∫–∞–≤","yes","sure"]
    return any(k in txt.lower() for k in arr)

def is_negative_response(txt:str)->bool:
    arr = ["–Ω–µ —Ö–æ—á—É","–Ω–µ –º–æ–∂—É","–Ω–µ—Ç","–Ω—ñ","–Ω–µ –±—É–¥—É","–Ω–µ –∑–∞—Ä–∞–∑","no"]
    return any(k in txt.lower() for k in arr)

def analyze_intent(txt:str)->str:
    if nlp_uk:
        doc = nlp_uk(txt)
        lemmas = [t.lemma_.lower() for t in doc]
        if any(k in lemmas for k in ["—Ç–∞–∫","–æ–∫","–¥–æ–±—Ä–µ","–≥–æ—Ç–æ–≤–∏–π"]):
            return "positive"
        if any(k in lemmas for k in ["–Ω–µ","–Ω—ñ","–Ω–µ—Ç","–Ω–µ–±—É–¥—É"]):
            return "negative"
        return "unclear"
    else:
        if is_positive_response(txt):
            return "positive"
        elif is_negative_response(txt):
            return "negative"
        else:
            return "unclear"

# -----------------------------
# GPT fallback
# -----------------------------
async def gpt_fallback(user_text:str) -> str:
    return gpt_logic.get_fallback_response(user_text)

# -----------------------------
# START
# -----------------------------
async def start_command(update:Update, context:ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    init_db()
    cancel_no_response_job(context)

    stg, _ = load_user_state(user_id)
    if stg is not None:
        txt = (
            "–í–∏ –º–∞—î—Ç–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—É —Ä–æ–∑–º–æ–≤—É. –ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —Ç–æ–≥–æ –∂ –º—ñ—Å—Ü—è —á–∏ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ?\n"
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ: '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' –∞–±–æ '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'."
        )
        await typing_simulation(update, txt)
        save_user_state(user_id, STAGE_SCENARIO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_SCENARIO_CHOICE
    else:
        greet = (
            "–í—ñ—Ç–∞—é! –î—è–∫—É—é –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –Ω–∞—à–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π. "
            "–°–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å: –∑–∏–º–æ–≤–∏–π —Ç–∞–±—ñ—Ä '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö' "
            "—á–∏ –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–π —Ç—É—Ä —É –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞? üòä"
        )
        await typing_simulation(update, greet)
        save_user_state(user_id, STAGE_SCENARIO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_SCENARIO_CHOICE

# -----------------------------
# SCENARIO CHOICE
# -----------------------------
async def scenario_choice_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    # –õ–∞–≥–µ—Ä—å
    if any(k in txt for k in ["–ª–∞–ø–ª–∞–Ω–¥","–∫–∞—Ä–ø–∞—Ç","—Ç–∞–±—ñ—Ä","–ª–∞–≥–µ—Ä—å","camp"]):
        context.user_data["scenario"] = "camp"
        await typing_simulation(update, ScenarioData.LAPLANDIA_INTRO)
        save_user_state(str(update.effective_user.id), STAGE_CAMP_PHONE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_PHONE

    # –ó–æ–æ–ø–∞—Ä–∫
    elif any(k in txt for k in ["–∑–æ–æ–ø–∞—Ä–∫","–Ω—ñ—Ä–µ–¥—å–≥–∞–∑–∞","nyire","–ª–µ–≤","–æ–¥–Ω–æ–¥–µ–Ω","–º—É–∫–∞—á","—É–∂–≥–æ—Ä–æ–¥"]):
        context.user_data["scenario"] = "zoo"
        await typing_simulation(update, ScenarioData.ZOO_INTRO)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_GREET

    else:
        prompt = (
            f"–ö–ª—ñ—î–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤: {txt}\n"
            "–ù–µ–≤—ñ–¥–æ–º–æ, —á–∏ –≤—ñ–Ω —Ö–æ—á–µ '–õ–∞–ø–ª–∞–Ω–¥—ñ—è' –∞–±–æ '–ó–æ–æ–ø–∞—Ä–∫'. –ü–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç–∏."
        )
        fallback_answer = await gpt_fallback(prompt)
        await typing_simulation(update, fallback_answer)
        save_user_state(str(update.effective_user.id), STAGE_SCENARIO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_SCENARIO_CHOICE

# --------------- CAMP ---------------
async def camp_phone_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    phone_candidate = txt.replace(" ","").replace("-","")
    if phone_candidate.startswith("+") or phone_candidate.isdigit():
        await typing_simulation(update, ScenarioData.LAPLANDIA_IF_PHONE_PROVIDED)
        save_user_state(str(update.effective_user.id), STAGE_CAMP_DETAILED, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_DETAILED
    else:
        await typing_simulation(update, ScenarioData.LAPLANDIA_NO_PHONE)
        save_user_state(str(update.effective_user.id), STAGE_CAMP_NO_PHONE_QA, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_NO_PHONE_QA

async def camp_no_phone_qa_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    intent = analyze_intent(txt)
    if intent == "positive":
        # –∑–∞–¥–∞—ë–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        q = "–ó —è–∫–æ–≥–æ –í–∏ –º—ñ—Å—Ç–∞? üèôÔ∏è"
        await typing_simulation(update, q)
        context.user_data["camp_questions"] = 1
        save_user_state(str(update.effective_user.id), STAGE_CAMP_NO_PHONE_QA, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_NO_PHONE_QA
    else:
        fallback = "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å, —á–∏ –º–æ–∂–µ–º–æ –º–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ —Ç–∞–±—ñ—Ä?"
        await typing_simulation(update, fallback)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_NO_PHONE_QA

async def camp_detailed_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    text = ScenarioData.LAPLANDIA_BRIEF_DETAILS + "\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π!"
    await typing_simulation(update, text)
    save_user_state(str(update.effective_user.id), STAGE_CAMP_END, context.user_data)
    return STAGE_CAMP_END

async def camp_end_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î—è–∫—É—é! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî /start.")
    return ConversationHandler.END

# --------------- ZOO ---------------
async def zoo_greet_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    intent = analyze_intent(txt)
    if intent == "positive":
        msg = "–ó–≤—ñ–¥–∫–∏ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏: –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞? üöå"
        await typing_simulation(update, msg)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_DEPARTURE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_DEPARTURE
    elif intent == "negative":
        fallback_msg = (
            "–Ø –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –Ω–∞—à –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–π —Ç—É—Ä, —è–∫—â–æ –≤–∞–º –Ω–µ–∑—Ä—É—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è. "
            "–¶–µ –∑–∞–π–º–µ –±—É–∫–≤–∞–ª—å–Ω–æ —Ö–≤–∏–ª–∏–Ω—É!"
        )
        await typing_simulation(update, fallback_msg)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_DETAILS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_DETAILS
    else:
        prompt = (
            f"–ö–ª—ñ—î–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤: {txt}\n"
            "–°—Ü–µ–Ω–∞—Ä—ñ–π: –ó–æ–æ–ø–∞—Ä–∫. –Ø–∫—â–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–æ, –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç–∏."
        )
        fb = await gpt_fallback(prompt)
        await typing_simulation(update, fb)
        return STAGE_ZOO_GREET

async def zoo_departure_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    context.user_data["departure"] = txt
    r = "–î–ª—è –∫–æ–≥–æ –≤–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç–µ —Ü—é –ø–æ—ó–∑–¥–∫—É? –ß–∏ –ø–ª–∞–Ω—É—î—Ç–µ —ó—Ö–∞—Ç–∏ —Ä–∞–∑–æ–º —ñ–∑ –¥–∏—Ç–∏–Ω–æ—é?"
    await typing_simulation(update, r)
    save_user_state(str(update.effective_user.id), STAGE_ZOO_TRAVEL_PARTY, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_ZOO_TRAVEL_PARTY

async def zoo_travel_party_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    if "–¥–∏—Ç" in txt:
        context.user_data["travel_party"] = "child"
        await typing_simulation(update, "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ?")
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CHILD_AGE, context.user_data)
        return STAGE_ZOO_CHILD_AGE
    else:
        context.user_data["travel_party"] = "no_child"
        msg = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
        await typing_simulation(update, msg)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CHOICE, context.user_data)
        return STAGE_ZOO_CHOICE

async def zoo_child_age_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    msg = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
    await typing_simulation(update, msg)
    save_user_state(str(update.effective_user.id), STAGE_ZOO_CHOICE, context.user_data)
    return STAGE_ZOO_CHOICE

async def zoo_choice_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    if "–¥–µ—Ç–∞–ª" in txt:
        context.user_data["choice"] = "details"
        save_user_state(str(update.effective_user.id), STAGE_ZOO_DETAILS, context.user_data)
        return await zoo_details_handler(update, context)
    elif "–≤–∞—Ä—Ç—ñ—Å—Ç—å" in txt or "—Ü—ñ–Ω–∞" in txt:
        context.user_data["choice"] = "cost"
        save_user_state(str(update.effective_user.id), STAGE_ZOO_DETAILS, context.user_data)
        return await zoo_details_handler(update, context)
    elif "–±—Ä–æ–Ω" in txt:
        context.user_data["choice"] = "booking"
        r = (
            "–Ø –¥—É–∂–µ —Ä–∞–¥–∞, —â–æ –í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ–¥–æ—Ä–æ–∂ –∑ –Ω–∞–º–∏. "
            "–î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—Å —ñ –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏. "
            "–î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å 30% —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        )
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        return STAGE_ZOO_CLOSE_DEAL
    else:
        resp = "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å: –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è?"
        await typing_simulation(update, resp)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CHOICE, context.user_data)
        return STAGE_ZOO_CHOICE

async def zoo_details_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    choice = context.user_data.get("choice","details")
    if choice == "cost":
        text = ScenarioData.ZOO_PRICE_SCENARIO + "\n–ß–∏ —î —É –≤–∞—Å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?"
    else:
        text = ScenarioData.ZOO_DETAILS + "\n–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ ‚Äî —è –Ω–∞ –∑–≤'—è–∑–∫—É!"
    await typing_simulation(update, text)
    save_user_state(str(update.effective_user.id), STAGE_ZOO_QUESTIONS, context.user_data)
    return STAGE_ZOO_QUESTIONS

async def zoo_questions_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    if "–±—Ä–æ–Ω" in txt:
        r = "–ß—É–¥–æ–≤–æ, —Ç–æ–¥—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –Ø –Ω–∞–¥—ñ—à–ª—é —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏!"
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        return STAGE_ZOO_CLOSE_DEAL
    else:
        msg = "–Ø–∫ –≤–∞–º –Ω–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤ —Ü—ñ–ª–æ–º—É? üåü"
        await typing_simulation(update, msg)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_IMPRESSION, context.user_data)
        return STAGE_ZOO_IMPRESSION

async def zoo_impression_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    if is_positive_response(txt):
        r = (
            "–ß—É–¥–æ–≤–æ! üéâ –î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ. "
            "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å 30% —ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        )
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        return STAGE_ZOO_CLOSE_DEAL
    elif is_negative_response(txt):
        rr = "–®–∫–æ–¥–∞ —Ü–µ —á—É—Ç–∏. –Ø–∫—â–æ –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî —è –∑–∞–≤–∂–¥–∏ —Ç—É—Ç!"
        await typing_simulation(update, rr)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_END, context.user_data)
        return STAGE_ZOO_END
    else:
        fallback = "–î—è–∫—É—é –∑–∞ –¥—É–º–∫—É! –ß–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?"
        await typing_simulation(update, fallback)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        return STAGE_ZOO_CLOSE_DEAL

async def zoo_close_deal_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    if any(k in txt for k in ["–ø—Ä–∏–≤–∞—Ç","–º–æ–Ω–æ","–æ–ø–ª–∞—á—É","–≥–æ—Ç–æ–≤","–¥–∞–≤–∞–π—Ç–µ","—Å–∫–∏–Ω—å","—Ä–µ–∫–≤–∏–∑–∏—Ç"]):
        r = (
            "–ß—É–¥–æ–≤–æ! –û—Å—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏:\n"
            "–ö–∞—Ä—Ç–∫–∞: 0000 0000 0000 0000\n\n"
            "–Ø–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ ‚Äî –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é –ø—Ä–æ–≥—Ä–∞–º—É —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è!"
        )
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_PAYMENT, context.user_data)
        return STAGE_ZOO_PAYMENT
    elif is_negative_response(txt):
        r2 = "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –ë—É–¥—É —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ!"
        await typing_simulation(update, r2)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_END, context.user_data)
        return STAGE_ZOO_END
    else:
        r3 = "–í–∏ –≥–æ—Ç–æ–≤—ñ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è? –í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        await typing_simulation(update, r3)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        return STAGE_ZOO_CLOSE_DEAL

async def zoo_payment_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    if any(k in txt for k in ["–æ–ø–ª–∞—Ç–∏–≤","–≤—ñ–¥–ø—Ä–∞–≤–∏–≤","–≥–æ—Ç–æ–≤–æ","—Å–∫–∏–Ω—É–≤","—á–µ–∫"]):
        r = "–î—è–∫—É—é! –ü–µ—Ä–µ–≤—ñ—Ä—é –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—é –¥–µ—Ç–∞–ª—ñ!"
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_PAYMENT_CONFIRM, context.user_data)
        return STAGE_ZOO_PAYMENT_CONFIRM
    else:
        rr = "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –∑ –æ–ø–ª–∞—Ç–æ—é ‚Äî –ø–∏—à—ñ—Ç—å, —è –¥–æ–ø–æ–º–æ–∂—É."
        await typing_simulation(update, rr)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_PAYMENT, context.user_data)
        return STAGE_ZOO_PAYMENT

async def zoo_payment_confirm_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    await typing_simulation(update, 
        "–î—è–∫—É—é –∑–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è! –í–∞—à–µ –º—ñ—Å—Ü–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–µ. "
        "–°–∫–æ—Ä–æ –Ω–∞–¥—ñ—à–ª—é –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –Ø–∫—â–æ –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å!"
    )
    return ConversationHandler.END

# -----------------------------
# CANCEL
# -----------------------------
async def cancel_command(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    t = "–î–æ–±—Ä–µ, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–Ω–æ–≤—É!"
    await typing_simulation(update, t)
    return ConversationHandler.END

# -----------------------------
# GLOBAL FALLBACK (GPT)
# -----------------------------
async def global_fallback_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    fallback_answer = await gpt_fallback(user_text)
    await typing_simulation(update, fallback_answer)

# -----------------------------
# WEBHOOKS
# -----------------------------
@app.route('/')
def index():
    return "–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î! –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π."

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method=="POST":
        data = request.get_json(force=True)
        global application
        if not application:
            logger.error("No application.")
            return "No application"
        update = Update.de_json(data, application.bot)
        loop = application.bot_data.get("loop")
        if loop:
            asyncio.run_coroutine_threadsafe(application.process_update(update), loop)
        else:
            logger.error("No event loop to process update.")
    return "OK"

async def setup_webhook(url:str, app_ref):
    wh_url = f"{url}/webhook"
    await app_ref.bot.set_webhook(wh_url)
    logger.info("Webhook set to %s", wh_url)

async def run_bot():
    if is_bot_already_running():
        logger.error("Another instance is running. Exiting.")
        sys.exit(1)
    logger.info("Starting bot...")

    req = HTTPXRequest(connect_timeout=20, read_timeout=40)
    global application
    builder = ApplicationBuilder().token(BOT_TOKEN).request(req)
    application = builder.build()

    # ConversationHandler (group=0)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            STAGE_SCENARIO_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, scenario_choice_handler)
            ],
            # CAMP
            STAGE_CAMP_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_phone_handler)
            ],
            STAGE_CAMP_NO_PHONE_QA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_no_phone_qa_handler)
            ],
            STAGE_CAMP_DETAILED: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_detailed_handler)
            ],
            STAGE_CAMP_END: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_end_handler)
            ],
            # ZOO
            STAGE_ZOO_GREET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_greet_handler)
            ],
            STAGE_ZOO_DEPARTURE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_departure_handler)
            ],
            STAGE_ZOO_TRAVEL_PARTY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_travel_party_handler)
            ],
            STAGE_ZOO_CHILD_AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_child_age_handler)
            ],
            STAGE_ZOO_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_choice_handler)
            ],
            STAGE_ZOO_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_details_handler)
            ],
            STAGE_ZOO_QUESTIONS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_questions_handler)
            ],
            STAGE_ZOO_IMPRESSION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_impression_handler)
            ],
            STAGE_ZOO_CLOSE_DEAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_close_deal_handler)
            ],
            STAGE_ZOO_PAYMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_payment_handler)
            ],
            STAGE_ZOO_PAYMENT_CONFIRM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_payment_confirm_handler)
            ],
            STAGE_ZOO_END: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               lambda u,c: c.bot.send_message(u.effective_chat.id,
                                  "–î—è–∫—É—é! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî /start."))
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_command)],
        allow_reentry=True
    )
    application.add_handler(conv_handler, group=0)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π fallback - group=1
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, global_fallback_handler),
        group=1
    )

    await setup_webhook(WEBHOOK_URL, application)
    await application.initialize()
    await application.start()

    loop = asyncio.get_running_loop()
    application.bot_data["loop"] = loop

    logger.info("Bot is online and ready.")

def start_flask():
    port = int(os.environ.get('PORT', 10000))
    logger.info("Starting Flask on port %s", port)
    app.run(host='0.0.0.0', port=port)

if __name__=="__main__":
    bot_thread = threading.Thread(target=lambda: asyncio.run(run_bot()), daemon=True)
    bot_thread.start()
    logger.info("Bot thread started. Now starting Flask...")
    start_flask()
