import os
import sys
import json
import psutil
import asyncio
import threading
from datetime import datetime

import aiosqlite  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å SQLite
import requests

from dotenv import load_dotenv
from flask import Flask, request

# -----------------------------
# –ó–∞–º–µ–Ω–∞ logging -> loguru, –Ω–æ —É—Ä–æ–≤–µ–Ω—å WARNING
# -----------------------------
from loguru import logger
logger.remove()  # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π handler
logger.add(
    "bot.log",
    rotation="1 MB",
    retention="3 days",
    level="WARNING"  # –¢–æ–ª—å–∫–æ WARNING –∏ –≤—ã—à–µ
)

from telegram import (
    Update,
    ReplyKeyboardRemove
)
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    CallbackContext,
    filters
)
from telegram.request import HTTPXRequest

# -----------------------------
# spaCy: —Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –±–æ–ª—å—à—É—é –º–æ–¥–µ–ª—å
# -----------------------------
try:
    import spacy
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    try:
        nlp_uk = spacy.load("uk_core_news_sm")
        logger.warning("spaCy (uk_core_news_sm) loaded successfully.")
    except Exception as e:
        logger.warning(f"spaCy not loaded: {e}")
        nlp_uk = spacy.blank("uk")  # –ó–∞–≥–ª—É—à–∫–∞
except ImportError:
    logger.warning("spaCy is not installed. Using blank pipeline.")
    nlp_uk = None

# -----------------------------
# LangChain + OpenAI
# –û—Ç–∫–ª—é—á–∏–º —Ç—Ä–µ–π—Å–∏–Ω–≥, —á—Ç–æ–±—ã –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ –ø–∞–º—è—Ç–∏
# -----------------------------
try:
    import openai
    from langchain.llms import OpenAI
    # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –æ—Ç–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–π—Å–∏–Ω–≥:
    # from langchain_core.tracing import disable_tracing
    # disable_tracing()

    openai_api_key = os.getenv("OPENAI_API_KEY")
    if openai_api_key:
        openai.api_key = openai_api_key
        # –£–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–æ–¥–µ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –±–µ–∑ torch
        # –ï—Å–ª–∏ GPT-4 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ 'gpt-3.5-turbo'
        llm = OpenAI(
            model_name="gpt-3.5-turbo",
            openai_api_key=openai_api_key,
            temperature=0.7
        )
    else:
        llm = None
        logger.warning("No OPENAI_API_KEY found.")
except Exception as e:
    logger.warning(f"LangChain/OpenAI not available: {e}")
    llm = None

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "")

# -----------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≤—Ç–æ—Ä—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
# -----------------------------
def is_bot_already_running():
    current_process = psutil.Process()
    for process in psutil.process_iter(['pid', 'name', 'cmdline']):
        if (
            process.info['name'] == current_process.name()
            and process.info['cmdline'] == current_process.cmdline()
            and process.info['pid'] != current_process.pid
        ):
            return True
    return False

# -----------------------------
# –°—Ü–µ–Ω–∞—Ä–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ)
# -----------------------------
LAPLANDIA_INTRO = (
    "–í—ñ—Ç–∞—é –í–∞—Å! üòä –î—è–∫—É—é –∑–∞ –í–∞—à —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –Ω–∞—à–æ–≥–æ –∑–∏–º–æ–≤–æ–≥–æ —Ç–∞–±–æ—Ä—É '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö'. "
    "–©–æ–± –Ω–∞–¥–∞—Ç–∏ –í–∞–º –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤—Å—ñ –í–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, "
    "–Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î –í–∞–º —É –Ω–∞–π–±–ª–∏–∂—á–∏–π —á–∞—Å. "
    "üìû –í–∞–º –∫—É–¥–∏ –±—É–¥–µ –∑—Ä—É—á–Ω—ñ—à–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: –Ω–∞ Viber —á–∏ Telegram?"
)
LAPLANDIA_IF_PHONE = (
    "–î—è–∫—É—é! üì≤ –ü–µ—Ä–µ–¥–∞—é –í–∞—à –Ω–æ–º–µ—Ä –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É, –≤–æ–Ω–∞ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n"
    "–Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ç–∞–±–æ—Ä—É '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö' –ø—Ä—è–º–æ —Ç—É—Ç, —É —á–∞—Ç—ñ?"
)
LAPLANDIA_BRIEF = (
    "–£ —Ç–∞–±–æ—Ä—ñ '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö' –∫–æ–∂–µ–Ω –¥–µ–Ω—å ‚Äî —Ü–µ –∫–∞–∑–∫–∞! –í–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ –ø–æ—Ä–∏–Ω–µ —É –∑–∏–º–æ–≤—É –º–∞–≥—ñ—é, "
    "–¥–µ –∫–æ–∂–µ–Ω –¥–µ–Ω—å —Å–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–∏–≥–æ–¥.\n\n"
    "‚Ä¢ –†–∞–Ω–∫–æ–≤—ñ —Å–Ω—ñ–≥–æ–≤—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...\n"
    "‚Ä¢ –ú–∞–π—Å—Ç–µ—Ä-–∫–ª–∞—Å–∏ —Ç–∞ —Ç–≤–æ—Ä—á—ñ –º–∞–π–¥–∞–Ω—á–∏–∫–∏...\n"
    "‚Ä¢ –í–µ—á—ñ—Ä–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...\n"
    "‚Ä¢ –ï–∫—Å–∫—É—Ä—Å—ñ—ó...\n\n"
    "–í–∞—Ä—Ç—ñ—Å—Ç—å: 17,200 –≥—Ä–Ω. –ê–ª–µ –∑–∞—Ä–∞–∑ –¥—ñ—î –∞–∫—Ü—ñ—è —Ä–∞–Ω–Ω—å–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ‚Äî 16,200 –≥—Ä–Ω!"
)
LAPLANDIA_NO_PHONE = (
    "–†–æ–∑—É–º—ñ—é, —â–æ –≤–∏ –ø–æ–∫–∏ –Ω–µ –≥–æ—Ç–æ–≤—ñ –∑–∞–ª–∏—à–∏—Ç–∏ –Ω–æ–º–µ—Ä. –¢–æ–¥—ñ –¥–∞–≤–∞–π—Ç–µ —è –≤—ñ–¥–ø–æ–≤—ñ–º –Ω–∞ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç—É—Ç. "
    "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å, —â–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏. –î–æ–±—Ä–µ?"
)

ZOO_INTRO = (
    "–í—ñ—Ç–∞—é –≤–∞—Å! üòä –î—è–∫—É—é –∑–∞ –í–∞—à —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –æ–¥–Ω–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç—É—Ä—É –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞. "
    "–¶–µ —á—É–¥–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ —Ç–∞ –≤–∞–º –Ω–µ–∑–∞–±—É—Ç–Ω—ñ–π –¥–µ–Ω—å —Å–µ—Ä–µ–¥ –µ–∫–∑–æ—Ç–∏—á–Ω–∏—Ö —Ç–≤–∞—Ä–∏–Ω! "
    "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å. –î–æ–±—Ä–µ?"
)
ZOO_DETAILS = (
    "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è.\n"
    "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: –¶—ñ–ª–∏–π –¥–µ–Ω—å.\n"
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω–∏–π –∞–≤—Ç–æ–±—É—Å.\n"
    "–í–∞—Ä—Ç—ñ—Å—Ç—å: 1900 –≥—Ä–Ω (—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è).\n\n"
    "–ü—ñ—Å–ª—è –∑–æ–æ–ø–∞—Ä–∫—É –∑–∞—ó–¥–µ–º–æ –≤ —Ç–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä."
)

FALLBACK_TEXT = (
    "–í–∏–±–∞—á—Ç–µ, —è –ø–æ–∫–∏ —â–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. "
    "–Ø –º–æ–∂—É —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ —Ç–∞–±—ñ—Ä '–õ–∞–ø–ª–∞–Ω–¥—ñ—è' –∞–±–æ —Ç—É—Ä –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞. "
    "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å. üòä"
)

# -----------------------------
# Conversation states
# -----------------------------
(
    STAGE_SCENARIO_CHOICE,  
    STAGE_CAMP_PHONE,       
    STAGE_CAMP_NO_PHONE_QA, 
    STAGE_CAMP_DETAILED,    
    STAGE_CAMP_END,         

    STAGE_ZOO_GREET,        
    STAGE_ZOO_DEPARTURE,    
    STAGE_ZOO_TRAVEL_PARTY, 
    STAGE_ZOO_CHILD_AGE,    
    STAGE_ZOO_CHOICE,       
    STAGE_ZOO_DETAILS,      
    STAGE_ZOO_QUESTIONS,    
    STAGE_ZOO_IMPRESSION,   
    STAGE_ZOO_CLOSE_DEAL,   
    STAGE_ZOO_PAYMENT,      
    STAGE_ZOO_PAYMENT_CONFIRM,
    STAGE_ZOO_END           
) = range(17)

NO_RESPONSE_DELAY_SECONDS = 6*3600

app = Flask(__name__)
application = None

# ============================
# DB init
# ============================
async def init_db():
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS conversation_state (
                user_id TEXT PRIMARY KEY,
                current_stage INTEGER,
                user_data TEXT,
                last_interaction TIMESTAMP
            )
        """)
        await db.commit()

async def load_user_state(user_id: str):
    try:
        async with aiosqlite.connect("bot_database.db") as db:
            cursor = await db.execute(
                "SELECT current_stage, user_data FROM conversation_state WHERE user_id=?",
                (user_id,)
            )
            row = await cursor.fetchone()
            if row:
                return row[0], row[1]
            return None, None
    except Exception as e:
        logger.warning(f"load_user_state error: {e}")
        return None, None

async def save_user_state(user_id: str, stage: int, user_data: dict):
    try:
        ud_json = json.dumps(user_data, ensure_ascii=False)
        now = datetime.now().isoformat()
        async with aiosqlite.connect("bot_database.db") as db:
            await db.execute(
                """INSERT OR REPLACE INTO conversation_state 
                   (user_id, current_stage, user_data, last_interaction)
                   VALUES (?,?,?,?)""",
                (user_id, stage, ud_json, now)
            )
            await db.commit()
    except Exception as e:
        logger.warning(f"save_user_state error: {e}")

# ============================
# No response job
# ============================
def no_response_callback(context: CallbackContext):
    chat_id = context.job.chat_id
    text = (
        "–°—Ö–æ–∂–µ, —â–æ –≤–∏ –∑–∞–π–Ω—è—Ç—ñ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, "
        "–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ, —è –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É! üòä"
    )
    context.bot.send_message(chat_id=chat_id, text=text)

def schedule_no_response_job(context: CallbackContext, chat_id: int):
    jq = context.job_queue
    jobs = jq.get_jobs_by_name(f"noresp_{chat_id}")
    for j in jobs:
        j.schedule_removal()
    jq.run_once(no_response_callback, NO_RESPONSE_DELAY_SECONDS, chat_id=chat_id, name=f"noresp_{chat_id}")

def cancel_no_response_job(context: CallbackContext):
    jq = context.job_queue
    chat_id = context._chat_id if hasattr(context,'_chat_id') else None
    if chat_id:
        jobs = jq.get_jobs_by_name(f"noresp_{chat_id}")
        for j in jobs:
            j.schedule_removal()

# ============================
# Typing simulation
# ============================
async def typing_simulation(update: Update, text: str):
    await update.effective_chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(min(4, max(2, len(text) / 70)))
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())

# ============================
# Minimal intent detection (spaCy)
# ============================
def analyze_intent(txt: str) -> str:
    if nlp_uk:
        doc = nlp_uk(txt.lower())
        lemmas = [t.lemma_.lower() for t in doc]
        if any(k in lemmas for k in ["—Ç–∞–∫","–æ–∫","–¥–æ–±—Ä–µ","–≥–æ—Ç–æ–≤–∏–π","—Ö–æ—á—É"]):
            return "positive"
        if any(k in lemmas for k in ["–Ω–µ","–Ω—ñ","–Ω–µ—Ç","–Ω–µ —Ö–æ—á—É","–Ω–µ –±—É–¥—É"]):
            return "negative"
        return "unclear"
    else:
        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞, –µ—Å–ª–∏ spaCy –Ω–µ—Ç
        txt_low = txt.lower()
        if any(k in txt_low for k in ["—Ç–∞–∫","–æ–∫","–¥–æ–±—Ä–µ","–≥–æ—Ç–æ–≤","—Ö–æ—á—É"]):
            return "positive"
        if any(k in txt_low for k in ["–Ω–µ","–Ω—ñ","–Ω–µ—Ç","–Ω–µ —Ö–æ—á—É"]):
            return "negative"
        return "unclear"

# ============================
# GPT fallback (—á–µ—Ä–µ–∑ OpenAI API –∏–ª–∏ LangChain)
# ============================
async def gpt_fallback_response(user_text: str) -> str:
    if not llm:
        return FALLBACK_TEXT  # fallback

    prompt = (
        "–¢—ã ‚Äî –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ç—É—Ä–æ–≤ (–õ–∞–ø–ª–∞–Ω–¥–∏—è, –∑–æ–æ–ø–∞—Ä–∫). "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, –æ—Ç–≤–µ—á–∞–π: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ —Ç—É—Ä–æ–≤.'\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_text}\n–û—Ç–≤–µ—Ç:"
    )
    try:
        response = await asyncio.to_thread(llm, prompt)
        return response.strip()
    except Exception as e:
        logger.warning(f"GPT fallback error: {e}")
        return FALLBACK_TEXT

# ============================
# Conversation Handlers
# ============================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    await init_db()
    cancel_no_response_job(context)

    stg, _ = await load_user_state(user_id)
    if stg is not None:
        text = (
            "–í–∏ –º–∞—î—Ç–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—É —Ä–æ–∑–º–æ–≤—É. –ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —Ç–æ–≥–æ –∂ –º—ñ—Å—Ü—è —á–∏ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ?\n"
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ: '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' –∞–±–æ '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'."
        )
        await typing_simulation(update, text)
        await save_user_state(user_id, STAGE_SCENARIO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_SCENARIO_CHOICE
    else:
        txt = (
            "–í—ñ—Ç–∞—é! –î—è–∫—É—é –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –Ω–∞—à–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π. "
            "–°–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å: —Ç–∞–±—ñ—Ä '–õ–∞–ø–ª–∞–Ω–¥—ñ—è' —á–∏ —Ç—É—Ä —É –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞?"
        )
        await typing_simulation(update, txt)
        await save_user_state(user_id, STAGE_SCENARIO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_SCENARIO_CHOICE

async def scenario_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower().strip()

    # camp
    if any(k in txt for k in ["–ª–∞–ø–ª–∞–Ω–¥","–∫–∞—Ä–ø–∞—Ç","—Ç–∞–±—ñ—Ä","–ª–∞–≥–µ—Ä—å","camp"]):
        context.user_data["scenario"] = "camp"
        await typing_simulation(update, LAPLANDIA_INTRO)
        await save_user_state(user_id, STAGE_CAMP_PHONE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_PHONE
    # zoo
    elif any(k in txt for k in ["–∑–æ–æ–ø–∞—Ä–∫","–Ω—ñ—Ä–µ–¥—å–≥–∞–∑–∞","nyire","–ª–µ–≤","–æ–¥–Ω–æ–¥–µ–Ω","–º—É–∫–∞—á","—É–∂–≥–æ—Ä–æ–¥"]):
        context.user_data["scenario"] = "zoo"
        await typing_simulation(update, ZOO_INTRO)
        await save_user_state(user_id, STAGE_ZOO_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_GREET
    else:
        # GPT fallback
        answer = await gpt_fallback_response(txt)
        await typing_simulation(update, answer)
        await save_user_state(user_id, STAGE_SCENARIO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_SCENARIO_CHOICE

async def camp_phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()

    phone_candidate = txt.replace(" ","").replace("-","")
    if phone_candidate.startswith("+") or phone_candidate.isdigit():
        await typing_simulation(update, LAPLANDIA_IF_PHONE)
        await save_user_state(user_id, STAGE_CAMP_DETAILED, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_DETAILED
    else:
        await typing_simulation(update, LAPLANDIA_NO_PHONE)
        await save_user_state(user_id, STAGE_CAMP_NO_PHONE_QA, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_NO_PHONE_QA

async def camp_no_phone_qa_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()

    intent = analyze_intent(txt)
    if intent == "positive":
        msg = "–ó —è–∫–æ–≥–æ –í–∏ –º—ñ—Å—Ç–∞? üèôÔ∏è"
        await typing_simulation(update, msg)
        context.user_data["camp_questions"] = 1
        await save_user_state(user_id, STAGE_CAMP_NO_PHONE_QA, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_NO_PHONE_QA
    else:
        fallback = "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å, —á–∏ –º–æ–∂–µ–º–æ –º–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ —Ç–∞–±—ñ—Ä?"
        await typing_simulation(update, fallback)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_NO_PHONE_QA

async def camp_detailed_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    await typing_simulation(update, LAPLANDIA_BRIEF)
    await save_user_state(user_id, STAGE_CAMP_END, context.user_data)
    return STAGE_CAMP_END

async def camp_end_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î—è–∫—É—é! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî /start. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!")
    return ConversationHandler.END

# ---- Zoo
async def zoo_greet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()

    intent = analyze_intent(txt)
    if intent == "positive":
        msg = "–ó–≤—ñ–¥–∫–∏ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏: –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞? üöå"
        await typing_simulation(update, msg)
        await save_user_state(user_id, STAGE_ZOO_DEPARTURE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_DEPARTURE
    elif intent == "negative":
        msg = (
            "–Ø –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –Ω–∞—à –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–π —Ç—É—Ä, —è–∫—â–æ –≤–∞–º –Ω–µ–∑—Ä—É—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è. "
            "–¶–µ –∑–∞–π–º–µ –±—É–∫–≤–∞–ª—å–Ω–æ —Ö–≤–∏–ª–∏–Ω—É!"
        )
        await typing_simulation(update, msg)
        await save_user_state(user_id, STAGE_ZOO_DETAILS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_DETAILS
    else:
        fallback = await gpt_fallback_response(txt)
        await typing_simulation(update, fallback)
        return STAGE_ZOO_GREET

async def zoo_departure_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()

    context.user_data["departure"] = txt
    r = "–î–ª—è –∫–æ–≥–æ –≤–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç–µ —Ü—é –ø–æ—ó–∑–¥–∫—É? –ß–∏ –ø–ª–∞–Ω—É—î—Ç–µ —ó—Ö–∞—Ç–∏ —Ä–∞–∑–æ–º —ñ–∑ –¥–∏—Ç–∏–Ω–æ—é?"
    await typing_simulation(update, r)
    await save_user_state(user_id, STAGE_ZOO_TRAVEL_PARTY, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_ZOO_TRAVEL_PARTY

async def zoo_travel_party_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    txt = update.message.text.lower().strip()

    if "–¥–∏—Ç" in txt:
        context.user_data["travel_party"] = "child"
        await typing_simulation(update, "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ?")
        await save_user_state(str(update.effective_user.id), STAGE_ZOO_CHILD_AGE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CHILD_AGE
    else:
        context.user_data["travel_party"] = "no_child"
        r = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
        await typing_simulation(update, r)
        await save_user_state(str(update.effective_user.id), STAGE_ZOO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CHOICE

async def zoo_child_age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    r = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
    await typing_simulation(update, r)
    await save_user_state(user_id, STAGE_ZOO_CHOICE, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_ZOO_CHOICE

async def zoo_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower().strip()

    if "–¥–µ—Ç–∞–ª" in txt:
        context.user_data["choice"] = "details"
        await save_user_state(user_id, STAGE_ZOO_DETAILS, context.user_data)
        return await zoo_details_handler(update, context)
    elif "–≤–∞—Ä—Ç—ñ—Å—Ç—å" in txt or "—Ü—ñ–Ω–∞" in txt:
        context.user_data["choice"] = "cost"
        await save_user_state(user_id, STAGE_ZOO_DETAILS, context.user_data)
        return await zoo_details_handler(update, context)
    elif "–±—Ä–æ–Ω" in txt:
        context.user_data["choice"] = "booking"
        r = (
            "–Ø –¥—É–∂–µ —Ä–∞–¥–∞, —â–æ –í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ–¥–æ—Ä–æ–∂ –∑ –Ω–∞–º–∏. "
            "–î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—Å —ñ –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏. "
            "–î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å 30% —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        )
        await typing_simulation(update, r)
        await save_user_state(user_id, STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL
    else:
        resp = "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å: –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è?"
        await typing_simulation(update, resp)
        await save_user_state(user_id, STAGE_ZOO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CHOICE

async def zoo_details_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    choice = context.user_data.get("choice","details")

    if choice == "cost":
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è. –í–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É: 1900 –≥—Ä–Ω (–≤–∫–ª—é—á–∞—î —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è).\n\n"
            "–£—è–≤—ñ—Ç—å, —è–∫ –≤–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ –ª–µ–≤–∞–º–∏, –∂–∏—Ä–∞—Ñ–∞–º–∏, –∞ –≤–∏ "
            "–º–æ–∂–µ—Ç–µ –Ω–∞—Å–æ–ª–æ–¥–∏—Ç–∏—Å—è –ø—Ä–æ–≥—É–ª—è–Ω–∫–æ—é –±–µ–∑ —Ç—É—Ä–±–æ—Ç. "
            "–ß–∏ —î —É –≤–∞—Å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?"
        )
    else:
        text = ZOO_DETAILS

    await typing_simulation(update, text)
    await save_user_state(user_id, STAGE_ZOO_QUESTIONS, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_ZOO_QUESTIONS

async def zoo_questions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower()

    if "–±—Ä–æ–Ω" in txt:
        r = "–ß—É–¥–æ–≤–æ, —Ç–æ–¥—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –Ø –Ω–∞–¥—ñ—à–ª—é —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏!"
        await typing_simulation(update, r)
        await save_user_state(user_id, STAGE_ZOO_CLOSE_DEAL, context.user_data)
        return STAGE_ZOO_CLOSE_DEAL
    else:
        msg = "–Ø–∫ –≤–∞–º –Ω–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤ —Ü—ñ–ª–æ–º—É? üåü"
        await typing_simulation(update, msg)
        await save_user_state(user_id, STAGE_ZOO_IMPRESSION, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_IMPRESSION

async def zoo_impression_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower()

    if any(k in txt for k in ["—Ç–∞–∫","–æ–∫","–¥–æ–±—Ä–µ","–≥–æ—Ç–æ–≤","–∑–∞—Ü—ñ–∫–∞–≤"]):
        r = (
            "–ß—É–¥–æ–≤–æ! üéâ –î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ. "
            "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å 30% —ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        )
        await typing_simulation(update, r)
        await save_user_state(user_id, STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL
    elif any(k in txt for k in ["–Ω—ñ","–Ω–µ—Ç","–Ω–µ"]):
        rr = "–®–∫–æ–¥–∞ —Ü–µ —á—É—Ç–∏. –Ø–∫—â–æ –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî —è –∑–∞–≤–∂–¥–∏ —Ç—É—Ç!"
        await typing_simulation(update, rr)
        await save_user_state(user_id, STAGE_ZOO_END, context.user_data)
        return STAGE_ZOO_END
    else:
        fallback = "–î—è–∫—É—é –∑–∞ –¥—É–º–∫—É! –ß–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?"
        await typing_simulation(update, fallback)
        await save_user_state(user_id, STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL

async def zoo_close_deal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower()

    if any(k in txt for k in ["–ø—Ä–∏–≤–∞—Ç","–º–æ–Ω–æ","–æ–ø–ª–∞—á—É","–≥–æ—Ç–æ–≤","–¥–∞–≤–∞–π—Ç–µ","—Å–∫–∏–Ω—å","—Ä–µ–∫–≤–∏–∑–∏—Ç"]):
        r = (
            "–ß—É–¥–æ–≤–æ! –û—Å—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏:\n"
            "–ö–∞—Ä—Ç–∫–∞: 0000 0000 0000 0000\n\n"
            "–Ø–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ ‚Äî –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é –ø—Ä–æ–≥—Ä–∞–º—É —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!"
        )
        await typing_simulation(update, r)
        await save_user_state(user_id, STAGE_ZOO_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_PAYMENT
    elif any(k in txt for k in ["–Ω—ñ","–Ω–µ—Ç","–Ω–µ"]):
        r2 = "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –ë—É–¥—É —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ!"
        await typing_simulation(update, r2)
        await save_user_state(user_id, STAGE_ZOO_END, context.user_data)
        return STAGE_ZOO_END
    else:
        r3 = "–í–∏ –≥–æ—Ç–æ–≤—ñ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è? –í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        await typing_simulation(update, r3)
        await save_user_state(user_id, STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL

async def zoo_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower()

    if any(k in txt for k in ["–æ–ø–ª–∞—Ç–∏–≤","–≤—ñ–¥–ø—Ä–∞–≤–∏–≤","–≥–æ—Ç–æ–≤–æ","—Å–∫–∏–Ω—É–≤","—á–µ–∫"]):
        r = "–î—è–∫—É—é! –ü–µ—Ä–µ–≤—ñ—Ä—é –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—é –¥–µ—Ç–∞–ª—ñ!"
        await typing_simulation(update, r)
        await save_user_state(user_id, STAGE_ZOO_PAYMENT_CONFIRM, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_PAYMENT_CONFIRM
    else:
        rr = "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –∑ –æ–ø–ª–∞—Ç–æ—é ‚Äî –ø–∏—à—ñ—Ç—å, —è –¥–æ–ø–æ–º–æ–∂—É."
        await typing_simulation(update, rr)
        await save_user_state(user_id, STAGE_ZOO_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_PAYMENT

async def zoo_payment_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    r = (
        "–î—è–∫—É—é –∑–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è! –í–∞—à–µ –º—ñ—Å—Ü–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–µ. "
        "–°–∫–æ—Ä–æ –Ω–∞–¥—ñ—à–ª—é –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –Ø–∫—â–æ –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å!"
    )
    await typing_simulation(update, r)
    return ConversationHandler.END

# ---- /cancel
async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    logger.warning("User canceled conversation")
    t = "–î–æ–±—Ä–µ, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–Ω–æ–≤—É!"
    await typing_simulation(update, t)
    return ConversationHandler.END

# ---- –ì–ª–æ–±–∞–ª—å–Ω—ã–π fallback
async def global_fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()
    fallback_answer = await gpt_fallback_response(user_text)
    await typing_simulation(update, fallback_answer)

# ============================
# Flask endpoints
# ============================
@app.route('/')
def index():
    return "–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î! –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π."

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == "POST":
        data = request.get_json(force=True)
        global application
        if not application:
            logger.warning("No application.")
            return "No application"
        update = Update.de_json(data, application.bot)
        loop = application.bot_data.get("loop")
        if loop:
            asyncio.run_coroutine_threadsafe(application.process_update(update), loop)
        else:
            logger.warning("No event loop to process update.")
    return "OK"

async def setup_webhook(url: str, app_ref):
    if not url:
        logger.warning("No RENDER_EXTERNAL_URL provided, skipping set_webhook.")
        return
    wh_url = f"{url}/webhook"
    await app_ref.bot.set_webhook(wh_url)
    logger.warning(f"Webhook set to {wh_url}")

async def run_bot():
    if is_bot_already_running():
        logger.warning("Another instance is running. Exiting.")
        sys.exit(1)
    logger.warning("Starting bot...")

    req = HTTPXRequest(connect_timeout=20, read_timeout=40)
    global application
    builder = ApplicationBuilder().token(BOT_TOKEN).request(req)
    # drop_pending_updates=True ‚Äî —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
    application = builder.build()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (async)
    await init_db()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            STAGE_SCENARIO_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, scenario_choice_handler)
            ],
            STAGE_CAMP_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_phone_handler)
            ],
            STAGE_CAMP_NO_PHONE_QA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_no_phone_qa_handler)
            ],
            STAGE_CAMP_DETAILED: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_detailed_handler)
            ],
            STAGE_CAMP_END: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_end_handler)
            ],
            # Zoo
            STAGE_ZOO_GREET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_greet_handler)
            ],
            STAGE_ZOO_DEPARTURE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_departure_handler)
            ],
            STAGE_ZOO_TRAVEL_PARTY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_travel_party_handler)
            ],
            STAGE_ZOO_CHILD_AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_child_age_handler)
            ],
            STAGE_ZOO_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_choice_handler)
            ],
            STAGE_ZOO_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_details_handler)
            ],
            STAGE_ZOO_QUESTIONS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_questions_handler)
            ],
            STAGE_ZOO_IMPRESSION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_impression_handler)
            ],
            STAGE_ZOO_CLOSE_DEAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_close_deal_handler)
            ],
            STAGE_ZOO_PAYMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_payment_handler)
            ],
            STAGE_ZOO_PAYMENT_CONFIRM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_payment_confirm_handler)
            ],
            STAGE_ZOO_END: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                    lambda u, c: c.bot.send_message(u.effective_chat.id, "–î—è–∫—É—é! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî /start."))
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_command)],
        allow_reentry=True
    )
    application.add_handler(conv_handler, group=0)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π fallback
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, global_fallback_handler),
        group=1
    )

    await setup_webhook(WEBHOOK_URL, application)
    await application.initialize()
    await application.start()

    loop = asyncio.get_running_loop()
    application.bot_data["loop"] = loop

    logger.warning("Bot is online and ready.")

def start_flask():
    port = int(os.environ.get('PORT', 10000))
    logger.warning(f"Starting Flask on port {port}")
    app.run(host='0.0.0.0', port=port)

if __name__ == "__main__":
    bot_thread = threading.Thread(target=lambda: asyncio.run(run_bot()), daemon=True)
    bot_thread.start()
    logger.warning("Bot thread started. Now starting Flask...")
    start_flask()
