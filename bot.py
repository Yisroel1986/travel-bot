import os
import logging
import sys
import psutil
import sqlite3
import json
from datetime import datetime
import asyncio
import threading
import requests

from dotenv import load_dotenv
from flask import Flask, request

from telegram import (
    Update,
    ReplyKeyboardRemove
)
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackContext,
    ApplicationBuilder
)
from telegram.request import HTTPXRequest

try:
    import spacy
    nlp_uk = spacy.load("uk_core_news_sm")  # —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å spaCy
except:
    nlp_uk = None

try:
    import openai
except:
    openai = None

try:
    from transformers import pipeline
    sentiment_pipeline = pipeline("sentiment-analysis", model="cardiffnlp/twitter-roberta-base-sentiment-latest")
except:
    sentiment_pipeline = None

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CRM_API_KEY = os.getenv("CRM_API_KEY")
CRM_API_URL = os.getenv("CRM_API_URL", "")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "")

# –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á openai, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
if openai and OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY

def is_bot_already_running():
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≤—Ç–æ—Ä—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º.
    """
    current_process = psutil.Process()
    for process in psutil.process_iter(['pid', 'name', 'cmdline']):
        if (
            process.info['name'] == current_process.name()
            and process.info['cmdline'] == current_process.cmdline()
            and process.info['pid'] != current_process.pid
        ):
            return True
    return False

# -----------------------------
# Conversation states
# -----------------------------
(
    STAGE_SCENARIO_CHOICE,  # 0
    STAGE_CAMP_PHONE,       # 1
    STAGE_CAMP_NO_PHONE_QA, # 2
    STAGE_CAMP_DETAILED,    # 3
    STAGE_CAMP_END,         # 4

    STAGE_ZOO_GREET,        # 5
    STAGE_ZOO_DEPARTURE,    # 6
    STAGE_ZOO_TRAVEL_PARTY, # 7
    STAGE_ZOO_CHILD_AGE,    # 8
    STAGE_ZOO_CHOICE,       # 9
    STAGE_ZOO_DETAILS,      # 10
    STAGE_ZOO_QUESTIONS,    # 11
    STAGE_ZOO_IMPRESSION,   # 12
    STAGE_ZOO_CLOSE_DEAL,   # 13
    STAGE_ZOO_PAYMENT,      # 14
    STAGE_ZOO_PAYMENT_CONFIRM, # 15
    STAGE_ZOO_END           # 16
) = range(17)

NO_RESPONSE_DELAY_SECONDS = 6*3600  # 6 —á–∞—Å–æ–≤ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è

app = Flask(__name__)
application = None

# -----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è / —Ö—Ä–∞–Ω–µ–Ω–∏–µ state –≤ sqlite
# -----------------------------
def init_db():
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS conversation_state (
            user_id TEXT PRIMARY KEY,
            current_stage INTEGER,
            user_data TEXT,
            last_interaction TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def load_user_state(user_id:str):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("SELECT current_stage,user_data FROM conversation_state WHERE user_id=?",(user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return row[0], row[1]
    return None,None

def save_user_state(user_id:str, stage:int, user_data:dict):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    ud_json = json.dumps(user_data, ensure_ascii=False)
    now = datetime.now().isoformat()
    c.execute("""
        INSERT OR REPLACE INTO conversation_state 
        (user_id, current_stage, user_data, last_interaction)
        VALUES (?,?,?,?)
    """,(user_id, stage, ud_json, now))
    conn.commit()
    conn.close()

# -----------------------------
# No-response callback
# -----------------------------
def no_response_callback(context:CallbackContext):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 6 —á–∞—Å–æ–≤ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º gentle reminder.
    """
    chat_id = context.job.chat_id
    text = (
        "–°—Ö–æ–∂–µ, —â–æ –≤–∏ –∑–∞–π–Ω—è—Ç—ñ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó "
        "(–∑–∏–º–æ–≤–∏–π —Ç–∞–±—ñ—Ä —á–∏ –∑–æ–æ–ø–∞—Ä–∫), –ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ, —è –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É! üòä"
    )
    context.bot.send_message(chat_id=chat_id, text=text)

def schedule_no_response_job(context:CallbackContext, chat_id:int):
    jq = context.job_queue
    jobs = jq.get_jobs_by_name(f"noresp_{chat_id}")
    for j in jobs:
        j.schedule_removal()
    jq.run_once(no_response_callback, NO_RESPONSE_DELAY_SECONDS, 
                chat_id=chat_id, name=f"noresp_{chat_id}")

def cancel_no_response_job(context:CallbackContext):
    jq = context.job_queue
    chat_id = context._chat_id if hasattr(context,'_chat_id') else None
    if chat_id:
        jobs = jq.get_jobs_by_name(f"noresp_{chat_id}")
        for j in jobs:
            j.schedule_removal()

# -----------------------------
# Typing simulation
# -----------------------------
async def typing_simulation(update:Update, text:str):
    await update.effective_chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(min(4, max(2, len(text)/70)))
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())

# -----------------------------
# Simple intent detection
# -----------------------------
def is_positive_response(txt:str)->bool:
    arr = ["—Ç–∞–∫","–¥–æ–±—Ä–µ","–¥–∞","–æ–∫","–ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ","—Ä–æ–∑–∫–∞–∂—ñ—Ç—å","–≥–æ—Ç–æ–≤–∏–π","–≥–æ—Ç–æ–≤–∞","–ø—Ä–∏–≤—ñ—Ç","hello","–∑–∞—Ü—ñ–∫–∞–≤","yes","sure"]
    return any(k in txt.lower() for k in arr)

def is_negative_response(txt:str)->bool:
    arr = ["–Ω–µ —Ö–æ—á—É","–Ω–µ –º–æ–∂—É","–Ω–µ—Ç","–Ω—ñ","–Ω–µ –±—É–¥—É","–Ω–µ –∑–∞—Ä–∞–∑","no"]
    return any(k in txt.lower() for k in arr)

def analyze_intent(txt:str)->str:
    if nlp_uk:
        doc = nlp_uk(txt)
        lemmas = [t.lemma_.lower() for t in doc]
        if any(k in lemmas for k in ["—Ç–∞–∫","–æ–∫","–¥–æ–±—Ä–µ","–≥–æ—Ç–æ–≤–∏–π"]):
            return "positive"
        if any(k in lemmas for k in ["–Ω–µ","–Ω—ñ","–Ω–µ—Ç","–Ω–µ–±—É–¥—É"]):
            return "negative"
        return "unclear"
    else:
        if is_positive_response(txt):
            return "positive"
        elif is_negative_response(txt):
            return "negative"
        else:
            return "unclear"

def get_sentiment(txt:str)->str:
    if sentiment_pipeline:
        res = sentiment_pipeline(txt)[0]
        lbl = res["label"].lower()
        if "negative" in lbl:
            return "negative"
        elif "neutral" in lbl:
            return "neutral"
        elif "positive" in lbl:
            return "positive"
        return "neutral"
    else:
        return "negative" if is_negative_response(txt) else "neutral"

# -----------------------------
# GPT fallback
# -----------------------------
async def get_chatgpt_response(prompt:str)->str:
    if not openai or not OPENAI_API_KEY:
        return "–í–∏–±–∞—á—Ç–µ, —Ñ—É–Ω–∫—Ü—ñ—è GPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    try:
        resp = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-4",
            messages=[{"role":"user","content":prompt}],
            max_tokens=400,
            temperature=0.7
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"Error calling GPT: {e}")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."

# -----------------------------
# START Handler
# -----------------------------
async def start_command(update:Update, context:ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    init_db()
    cancel_no_response_job(context)

    stg, dat = load_user_state(user_id)
    if stg is not None:
        # —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –±–µ—Å–µ–¥–∞
        text = (
            "–í–∏ –º–∞—î—Ç–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—É —Ä–æ–∑–º–æ–≤—É. –ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —Ç–æ–≥–æ –∂ –º—ñ—Å—Ü—è —á–∏ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ?\n"
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ: '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' –∞–±–æ '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'."
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_SCENARIO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_SCENARIO_CHOICE
    else:
        # new user
        txt = (
            "–í—ñ—Ç–∞—é! –î—è–∫—É—é –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –Ω–∞—à–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π. "
            "–°–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å: –∑–∏–º–æ–≤–∏–π —Ç–∞–±—ñ—Ä '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö' "
            "—á–∏ –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–π —Ç—É—Ä —É –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞? üòä"
        )
        await typing_simulation(update, txt)
        save_user_state(user_id, STAGE_SCENARIO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_SCENARIO_CHOICE

# -----------------------------
# SCENARIO CHOICE
# -----------------------------
async def scenario_choice_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∞–≥–µ—Ä—å
    if any(k in txt for k in ["–ª–∞–ø–ª–∞–Ω–¥","–∫–∞—Ä–ø–∞—Ç","—Ç–∞–±—ñ—Ä","–ª–∞–≥–µ—Ä—å","camp"]):
        context.user_data["scenario"] = "camp"
        text = (
            "–í—ñ—Ç–∞—é –í–∞—Å! üòä –î—è–∫—É—é –∑–∞ –í–∞—à —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –Ω–∞—à–æ–≥–æ –∑–∏–º–æ–≤–æ–≥–æ —Ç–∞–±–æ—Ä—É '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö'. "
            "–©–æ–± –Ω–∞–¥–∞—Ç–∏ –í–∞–º –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤—Å—ñ –í–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, "
            "–Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. "
            "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î –í–∞–º —É –Ω–∞–π–±–ª–∏–∂—á–∏–π —á–∞—Å. –í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É Viber —á–∏ Telegram?"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_CAMP_PHONE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_PHONE

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–æ–æ–ø–∞—Ä–∫
    elif any(k in txt for k in ["–∑–æ–æ–ø–∞—Ä–∫","–Ω—ñ—Ä–µ–¥—å–≥–∞–∑–∞","nyire","–ª–µ–≤","–æ–¥–Ω–æ–¥–µ–Ω","–º—É–∫–∞—á","—É–∂–≥–æ—Ä–æ–¥"]):
        context.user_data["scenario"] = "zoo"
        text = (
            "–í—ñ—Ç–∞—é –≤–∞—Å! üòä –î—è–∫—É—é –∑–∞ –í–∞—à —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –æ–¥–Ω–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç—É—Ä—É –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞, –£–≥–æ—Ä—â–∏–Ω–∞. "
            "–¶–µ —á—É–¥–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ —Ç–∞ –≤–∞–º –Ω–µ–∑–∞–±—É—Ç–Ω—ñ–π –¥–µ–Ω—å —Å–µ—Ä–µ–¥ –µ–∫–∑–æ—Ç–∏—á–Ω–∏—Ö —Ç–≤–∞—Ä–∏–Ω! "
            "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å. –î–æ–±—Ä–µ?"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_ZOO_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_GREET

    else:
        # GPT fallback
        prompt = (
            f"–ö–ª—ñ—î–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤: {txt}\n"
            "–¢—Ä–µ–±–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —á–∏ —Ü—ñ–∫–∞–≤–∏—Ç—å –π–æ–≥–æ '–õ–∞–ø–ª–∞–Ω–¥—ñ—è' –∞–±–æ '–ó–æ–æ–ø–∞—Ä–∫'? –Ø–∫—â–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–æ, –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å."
        )
        fallback = await get_chatgpt_response(prompt)
        await typing_simulation(update, fallback)
        save_user_state(user_id, STAGE_SCENARIO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_SCENARIO_CHOICE

# -----------------------------
# CAMP: PHONE
# -----------------------------
async def camp_phone_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    phone_candidate = txt.replace(" ","").replace("-","")
    if phone_candidate.startswith("+") or phone_candidate.isdigit():
        text = (
            "–î—è–∫—É—é! üì≤ –ü–µ—Ä–µ–¥–∞—é –í–∞—à –Ω–æ–º–µ—Ä –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É, –≤–æ–Ω–∞ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n"
            "–Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ç–∞–±–æ—Ä—É '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö' –ø—Ä—è–º–æ —Ç—É—Ç, —É —á–∞—Ç—ñ?"
        )
        await typing_simulation(update, text)
        # –ø–µ—Ä–µ–¥–∞—ë–º –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä—É (CRM)
        save_user_state(user_id, STAGE_CAMP_DETAILED, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_DETAILED
    else:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω
        text = (
            "–†–æ–∑—É–º—ñ—é, —â–æ –≤–∏ –ø–æ–∫–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –ª–∏—à–∞—Ç–∏ –Ω–æ–º–µ—Ä. –Ø –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç—É—Ç. "
            "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å, —â–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏. –î–æ–±—Ä–µ?"
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_CAMP_NO_PHONE_QA, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_NO_PHONE_QA

# -----------------------------
# CAMP: NO PHONE Q/A
# -----------------------------
async def camp_no_phone_qa_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    intent = analyze_intent(txt)
    if intent == "positive":
        # –∑–∞–¥–∞—ë–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        text = "–ó —è–∫–æ–≥–æ –í–∏ –º—ñ—Å—Ç–∞? üèôÔ∏è"
        await typing_simulation(update, text)
        context.user_data["camp_questions"] = 1
        save_user_state(user_id, STAGE_CAMP_NO_PHONE_QA, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_NO_PHONE_QA
    else:
        fallback = "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å, —á–∏ –º–æ–∂–µ–º–æ –º–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ —Ç–∞–±—ñ—Ä?"
        await typing_simulation(update, fallback)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_NO_PHONE_QA

# -----------------------------
# CAMP: DETAILED
# -----------------------------
async def camp_detailed_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip().lower()
    cancel_no_response_job(context)

    # –ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ª–∞–≥–µ—Ä—è
    r = (
        "–£ —Ç–∞–±–æ—Ä—ñ '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö' –∫–æ–∂–µ–Ω –¥–µ–Ω—å ‚Äî —Ü–µ –∫–∞–∑–∫–∞! –í–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ –ø–æ—Ä–∏–Ω–µ —É –∑–∏–º–æ–≤—É –º–∞–≥—ñ—é, "
        "–¥–µ –∫–æ–∂–µ–Ω –¥–µ–Ω—å —Å–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–∏–≥–æ–¥. –ú–∏ –ø—ñ–¥–≥–æ—Ç—É–≤–∞–ª–∏ —Ü—ñ–∫–∞–≤—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—É —Ç–∞ —Ç–≤–æ—Ä—á—É –ø—Ä–æ–≥—Ä–∞–º—É, "
        "–∞ —Ç–∞–∫–æ–∂ –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –±–µ–∑–ø–µ–∫—É —ñ —Ç–µ–ø–ª—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. "
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–¥–∞—Å—Ç—å —É—Å—ñ –¥–µ—Ç–∞–ª—ñ, —è–∫ —Ç—ñ–ª—å–∫–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏. "
        "–ß–∏ —î —É –≤–∞—Å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ–∫–∏ —â–æ?"
    )
    await typing_simulation(update, r)
    # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å scenario, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    save_user_state(str(update.effective_user.id), STAGE_CAMP_END, context.user_data)
    return STAGE_CAMP_END

# -----------------------------
# CAMP: END
# -----------------------------
async def camp_end_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    # –ü–æ —Å—É—Ç–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç ‚Äî fallback GPT –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    await update.message.reply_text(
        "–î—è–∫—É—é! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî /start. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!"
    )
    return ConversationHandler.END

# -----------------------------
# ZOO: Greet
# -----------------------------
async def zoo_greet_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    intent = analyze_intent(txt)
    if intent == "positive":
        text = "–ó–≤—ñ–¥–∫–∏ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏: –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞? üöå"
        await typing_simulation(update, text)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_DEPARTURE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_DEPARTURE
    elif intent == "negative":
        msg = (
            "–Ø –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –Ω–∞—à –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–π —Ç—É—Ä, —è–∫—â–æ –≤–∞–º –Ω–µ–∑—Ä—É—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è. "
            "–¶–µ –∑–∞–π–º–µ –±—É–∫–≤–∞–ª—å–Ω–æ —Ö–≤–∏–ª–∏–Ω—É!"
        )
        await typing_simulation(update, msg)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_DETAILS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_DETAILS
    else:
        prompt = (
            f"–ö–ª—ñ—î–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤: {txt}\n"
            "–í —Ä–∞–º–∫–∞—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—é —Ç—É—Ä–∞ (–∑–æ–æ–ø–∞—Ä–∫), —è–∫—â–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–æ ‚Äî –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç–∏."
        )
        fallback = await get_chatgpt_response(prompt)
        await typing_simulation(update, fallback)
        return STAGE_ZOO_GREET

async def zoo_departure_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    context.user_data["departure"] = txt
    r = "–î–ª—è –∫–æ–≥–æ –≤–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç–µ —Ü—é –ø–æ—ó–∑–¥–∫—É? –ß–∏ –ø–ª–∞–Ω—É—î—Ç–µ —ó—Ö–∞—Ç–∏ —Ä–∞–∑–æ–º —ñ–∑ –¥–∏—Ç–∏–Ω–æ—é?"
    await typing_simulation(update, r)
    save_user_state(str(update.effective_user.id), STAGE_ZOO_TRAVEL_PARTY, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_ZOO_TRAVEL_PARTY

async def zoo_travel_party_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    if "–¥–∏—Ç" in txt:
        context.user_data["travel_party"] = "child"
        await typing_simulation(update, "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ?")
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CHILD_AGE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CHILD_AGE
    else:
        context.user_data["travel_party"] = "no_child"
        r = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CHOICE

async def zoo_child_age_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    cancel_no_response_job(context)

    r = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
    await typing_simulation(update, r)
    save_user_state(str(update.effective_user.id), STAGE_ZOO_CHOICE, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_ZOO_CHOICE

async def zoo_choice_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower().strip()
    cancel_no_response_job(context)

    if "–¥–µ—Ç–∞–ª" in txt:
        context.user_data["choice"] = "details"
        save_user_state(str(update.effective_user.id), STAGE_ZOO_DETAILS, context.user_data)
        return await zoo_details_handler(update, context)
    elif "–≤–∞—Ä—Ç—ñ—Å—Ç—å" in txt or "—Ü—ñ–Ω–∞" in txt:
        context.user_data["choice"] = "cost"
        save_user_state(str(update.effective_user.id), STAGE_ZOO_DETAILS, context.user_data)
        return await zoo_details_handler(update, context)
    elif "–±—Ä–æ–Ω" in txt:
        context.user_data["choice"] = "booking"
        r = (
            "–Ø –¥—É–∂–µ —Ä–∞–¥–∞, —â–æ –í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ–¥–æ—Ä–æ–∂ –∑ –Ω–∞–º–∏. "
            "–î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—Å —ñ –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏. "
            "–î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å 30% —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        )
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL
    else:
        resp = "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å: –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è?"
        await typing_simulation(update, resp)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CHOICE

async def zoo_details_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    choice = context.user_data.get("choice","details")
    if choice == "cost":
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —Ç–∞ –ú—É–∫–∞—á–µ–≤–∞.\n"
            "–¶–µ —Ü—ñ–ª–∏–π –¥–µ–Ω—å, —ñ –≤–≤–µ—á–µ—Ä—ñ –≤–∏ –±—É–¥–µ—Ç–µ –≤–¥–æ–º–∞.\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É: 1900 –≥—Ä–Ω (–≤–∫–ª—é—á–∞—î —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è).\n\n"
            "–£—è–≤—ñ—Ç—å, —è–∫ –≤–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ –ª–µ–≤–∞–º–∏, —Å–ª–æ–Ω–∞–º–∏ —ñ –∂–∏—Ä–∞—Ñ–∞–º–∏, –∞ –≤–∏ "
            "–º–æ–∂–µ—Ç–µ –Ω–∞—Å–æ–ª–æ–¥–∏—Ç–∏—Å—è –ø—Ä–æ–≥—É–ª—è–Ω–∫–æ—é –±–µ–∑ –∑–∞–π–≤–∏—Ö —Ç—É—Ä–±–æ—Ç. "
            "–ß–∏ —î —É –≤–∞—Å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?"
        )
    else:
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞.\n"
            "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: –¶—ñ–ª–∏–π –¥–µ–Ω—å. –£–≤–µ—á–µ—Ä—ñ –≤–∂–µ –≤–¥–æ–º–∞.\n"
            "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω–∏–π –∞–≤—Ç–æ–±—É—Å.\n"
            "–ó–æ–æ–ø–∞—Ä–∫: –ë—ñ–ª—å—à–µ 500 –≤–∏–¥—ñ–≤ —Ç–≤–∞—Ä–∏–Ω.\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å: 1900 –≥—Ä–Ω (—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è).\n\n"
            "–ü—ñ—Å–ª—è –∑–æ–æ–ø–∞—Ä–∫—É –∑–∞—ó–¥–µ–º–æ –≤ —Ç–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä, –º–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ—á–∏—Ç–∏, –≤–∏–ø–∏—Ç–∏ –∫–∞–≤–∏ —á–∏ –∑—Ä–æ–±–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏."
        )
    await typing_simulation(update, text)
    save_user_state(str(update.effective_user.id), STAGE_ZOO_QUESTIONS, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_ZOO_QUESTIONS

async def zoo_questions_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    if "–±—Ä–æ–Ω" in txt:
        r = "–ß—É–¥–æ–≤–æ, —Ç–æ–¥—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –Ø –Ω–∞–¥—ñ—à–ª—é —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏!"
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        return STAGE_ZOO_CLOSE_DEAL
    else:
        msg = "–Ø–∫ –≤–∞–º –Ω–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤ —Ü—ñ–ª–æ–º—É? üåü"
        await typing_simulation(update, msg)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_IMPRESSION, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_IMPRESSION

async def zoo_impression_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    if is_positive_response(txt):
        r = (
            "–ß—É–¥–æ–≤–æ! üéâ –î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ. "
            "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å 30% —ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        )
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL
    elif is_negative_response(txt):
        rr = "–®–∫–æ–¥–∞ —Ü–µ —á—É—Ç–∏. –Ø–∫—â–æ –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî —è –∑–∞–≤–∂–¥–∏ —Ç—É—Ç!"
        await typing_simulation(update, rr)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_END, context.user_data)
        return STAGE_ZOO_END
    else:
        fallback = "–î—è–∫—É—é –∑–∞ –¥—É–º–∫—É! –ß–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?"
        await typing_simulation(update, fallback)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL

async def zoo_close_deal_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    if any(k in txt for k in ["–ø—Ä–∏–≤–∞—Ç","–º–æ–Ω–æ","–æ–ø–ª–∞—á—É","–≥–æ—Ç–æ–≤","–¥–∞–≤–∞–π—Ç–µ","—Å–∫–∏–Ω—å","—Ä–µ–∫–≤–∏–∑–∏—Ç"]):
        r = (
            "–ß—É–¥–æ–≤–æ! –û—Å—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏:\n"
            "–ö–∞—Ä—Ç–∫–∞: 0000 0000 0000 0000\n\n"
            "–Ø–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ ‚Äî –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é –ø—Ä–æ–≥—Ä–∞–º—É —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è!"
        )
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_PAYMENT
    elif is_negative_response(txt):
        r2 = "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –ë—É–¥—É —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ!"
        await typing_simulation(update, r2)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_END, context.user_data)
        return STAGE_ZOO_END
    else:
        r3 = "–í–∏ –≥–æ—Ç–æ–≤—ñ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è? –í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        await typing_simulation(update, r3)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL

async def zoo_payment_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    cancel_no_response_job(context)

    if any(k in txt for k in ["–æ–ø–ª–∞—Ç–∏–≤","–≤—ñ–¥–ø—Ä–∞–≤–∏–≤","–≥–æ—Ç–æ–≤–æ","—Å–∫–∏–Ω—É–≤","—á–µ–∫"]):
        r = "–î—è–∫—É—é! –ü–µ—Ä–µ–≤—ñ—Ä—é –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—é –¥–µ—Ç–∞–ª—ñ!"
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_PAYMENT_CONFIRM, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_PAYMENT_CONFIRM
    else:
        rr = "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –∑ –æ–ø–ª–∞—Ç–æ—é ‚Äî –ø–∏—à—ñ—Ç—å, —è –¥–æ–ø–æ–º–æ–∂—É."
        await typing_simulation(update, rr)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_PAYMENT

async def zoo_payment_confirm_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    r = (
        "–î—è–∫—É—é –∑–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è! –í–∞—à–µ –º—ñ—Å—Ü–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–µ. "
        "–°–∫–æ—Ä–æ –Ω–∞–¥—ñ—à–ª—é –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –Ø–∫—â–æ –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å!"
    )
    await typing_simulation(update, r)
    return ConversationHandler.END

# cancel
async def cancel_command(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user = update.message.from_user
    logger.info("User %s canceled conversation", user.first_name if user else "Unknown")
    t = "–î–æ–±—Ä–µ, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–Ω–æ–≤—É!"
    await typing_simulation(update, t)
    uid = str(update.effective_user.id)
    return ConversationHandler.END

# -----------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π fallback Handler
# -----------------------------
async def global_fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–π —Å—Ç–µ–π—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, ConversationHandler –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª ‚Äî
    —Ç–æ–≥–¥–∞ –ª–æ–≤–∏–º —Ç—É—Ç –∏ –≤—ã–∑—ã–≤–∞–µ–º GPT.
    """
    user_text = update.message.text
    prompt = (
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: " + user_text + "\n"
        "–¢—ã ‚Äî —á–∞—Ç-–±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ –û–ª–µ–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º/—Ä—É—Å—Å–∫–æ–º, "
        "–ø—Ä–æ–¥–∞–∂–∞ —Ç—É—Ä–æ–≤ –∏ –ª–∞–≥–µ—Ä–µ–π, –±—É–¥—å –≤–µ–∂–ª–∏–≤–æ–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω–æ–π. "
        "–û—Ç–≤–µ—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏."
    )
    gpt_answer = await get_chatgpt_response(prompt)
    await typing_simulation(update, gpt_answer)


# -----------------------------
# WEBHOOKS
# -----------------------------
@app.route('/')
def index():
    return "–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î! –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π."

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == "POST":
        data = request.get_json(force=True)
        global application
        if not application:
            logger.error("No application.")
            return "No application"
        update = Update.de_json(data, application.bot)
        loop = application.bot_data.get("loop")
        if loop:
            asyncio.run_coroutine_threadsafe(application.process_update(update), loop)
        else:
            logger.error("No event loop to process update.")
    return "OK"

async def setup_webhook(url:str, app_ref):
    wh_url = f"{url}/webhook"
    await app_ref.bot.set_webhook(wh_url)
    logger.info("Webhook set to %s", wh_url)

async def run_bot():
    if is_bot_already_running():
        logger.error("Another instance is running. Exiting.")
        sys.exit(1)
    logger.info("Starting bot...")

    req = HTTPXRequest(connect_timeout=20, read_timeout=40)
    global application
    builder = ApplicationBuilder().token(BOT_TOKEN).request(req)
    application = builder.build()

    # ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            STAGE_SCENARIO_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, scenario_choice_handler)
            ],

            # Camp
            STAGE_CAMP_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_phone_handler)
            ],
            STAGE_CAMP_NO_PHONE_QA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_no_phone_qa_handler)
            ],
            STAGE_CAMP_DETAILED: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_detailed_handler)
            ],
            STAGE_CAMP_END: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, camp_end_handler)
            ],

            # Zoo
            STAGE_ZOO_GREET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_greet_handler)
            ],
            STAGE_ZOO_DEPARTURE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_departure_handler)
            ],
            STAGE_ZOO_TRAVEL_PARTY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_travel_party_handler)
            ],
            STAGE_ZOO_CHILD_AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_child_age_handler)
            ],
            STAGE_ZOO_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_choice_handler)
            ],
            STAGE_ZOO_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_details_handler)
            ],
            STAGE_ZOO_QUESTIONS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_questions_handler)
            ],
            STAGE_ZOO_IMPRESSION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_impression_handler)
            ],
            STAGE_ZOO_CLOSE_DEAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_close_deal_handler)
            ],
            STAGE_ZOO_PAYMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_payment_handler)
            ],
            STAGE_ZOO_PAYMENT_CONFIRM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, zoo_payment_confirm_handler)
            ],
            STAGE_ZOO_END: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u,c: c.bot.send_message(
                    u.effective_chat.id,"–î—è–∫—É—é! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî /start."))
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_command)],
        allow_reentry=True
    )
    application.add_handler(conv_handler, group=0)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π fallback - –µ—Å–ª–∏ ConversationHandler –Ω–µ –∑–∞–±—Ä–∞–ª
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, global_fallback_handler),
        group=1
    )

    await setup_webhook(WEBHOOK_URL, application)
    await application.initialize()
    await application.start()

    loop = asyncio.get_running_loop()
    application.bot_data["loop"] = loop

    logger.info("Bot is online and ready.")

def start_flask():
    port = int(os.environ.get('PORT',10000))
    logger.info("Starting Flask on port %s", port)
    app.run(host='0.0.0.0', port=port)

if __name__=="__main__":
    bot_thread = threading.Thread(target=lambda: asyncio.run(run_bot()), daemon=True)
    bot_thread.start()
    logger.info("Bot thread started. Now starting Flask...")
    start_flask()
