import os
import logging
import sys
import psutil
import sqlite3
import json
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardRemove
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackContext
)
from telegram.request import HTTPXRequest
from datetime import datetime
from flask import Flask, request
import asyncio
import threading
import re

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ spaCy –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π –º–æ–¥–µ–ª–∏
try:
    import spacy
    nlp_uk = spacy.load("uk_core_news_sm")
    logging.info("spaCy and Ukrainian model loaded successfully.")
except Exception as e:
    nlp_uk = None
    logging.warning("spaCy or Ukrainian model not available. Falling back to basic keyword analysis.")

# --- LOGGING AND SETTINGS ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", 'https://your-app.onrender.com')

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã
def is_bot_already_running():
    current_process = psutil.Process()
    for process in psutil.process_iter(['pid', 'name', 'cmdline']):
        if (process.info['name'] == current_process.name() and 
            process.info['cmdline'] == current_process.cmdline() and 
            process.info['pid'] != current_process.pid):
            return True
    return False

# --- STATE DEFINITIONS ---
(
    STAGE_GREET,                # 0. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    STAGE_DEPARTURE,            # 1. "–ó–≤—ñ–¥–∫–∏ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏: –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞?"
    STAGE_TRAVEL_PARTY,         # 2. "–î–ª—è –∫–æ–≥–æ –≤–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç–µ –ø–æ—ó–∑–¥–∫—É? –ß–∏ –∑ –¥–∏—Ç–∏–Ω–æ—é?"
    STAGE_CHILD_AGE,            # 3. "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ?"
    STAGE_CHOICE,               # 4. "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å: –¥–µ—Ç–∞–ª—ñ, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?"
    STAGE_DETAILS,              # 5. –î–µ—Ç–∞–ª—ñ —Ç—É—Ä—É
    STAGE_ADDITIONAL_QUESTIONS, # 6. –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è
    STAGE_IMPRESSION,           # 7. –ó–∞–ø–∏—Ç –ø—Ä–æ –∑–∞–≥–∞–ª—å–Ω–µ –≤—Ä–∞–∂–µ–Ω–Ω—è
    STAGE_CLOSE_DEAL,           # 8. –ó–∞–∫—Ä–∏—Ç—Ç—è —É–≥–æ–¥–∏ (–±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è)
    STAGE_PAYMENT,              # 9. –û–ø–ª–∞—Ç–∞
    STAGE_PAYMENT_CONFIRM,      # 10. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
    STAGE_END                   # 11. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
) = range(12)

NO_RESPONSE_DELAY_SECONDS = 6 * 3600  # 6 —á–∞—Å–æ–≤

# --- FLASK APP ---
app = Flask(__name__)
application = None

#
# --- SQLITE DB ---
#
def init_db():
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS conversation_state (
            user_id TEXT PRIMARY KEY,
            current_stage INTEGER,
            user_data TEXT,
            last_interaction TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def load_user_state(user_id: str):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("SELECT current_stage, user_data FROM conversation_state WHERE user_id = ?", (user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return row[0], row[1]
    return None, None

def save_user_state(user_id: str, current_stage: int, user_data: dict):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    user_data_json = json.dumps(user_data, ensure_ascii=False)
    now = datetime.now().isoformat()
    c.execute("""
        INSERT OR REPLACE INTO conversation_state (user_id, current_stage, user_data, last_interaction)
        VALUES (?, ?, ?, ?)
    """, (user_id, current_stage, user_data_json, now))
    conn.commit()
    conn.close()

#
# --- FOLLOW-UP LOGIC (NO RESPONSE) ---
#
def no_response_callback(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    message = (
        "–Ø –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –Ω–∞—à –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–π —Ç—É—Ä –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∏, –£–≥–æ—Ä—â–∏–Ω–∞. "
        "–¶–µ —à–∞–Ω—Å –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ –Ω–µ–∑–∞–±—É—Ç–Ω—ñ–π –¥–µ–Ω—å —Å–µ—Ä–µ–¥ –µ–∫–∑–æ—Ç–∏—á–Ω–∏—Ö —Ç–≤–∞—Ä–∏–Ω —ñ –≤–æ–¥–Ω–æ—á–∞—Å –Ω–∞—Ä–µ—à—Ç—ñ –≤—ñ–¥–ø–æ—á–∏—Ç–∏ –≤–∞–º. ü¶Åüêß\n\n"
        "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π –∞–≤—Ç–æ–±—É—Å, –Ω–∞—Å–∏—á–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ —ñ –º—ñ–Ω—ñ–º—É–º —Ç—É—Ä–±–æ—Ç –¥–ª—è –≤–∞—Å ‚Äì –≤—Å–µ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–æ. "
        "–î—ñ—Ç–∏ –æ—Ç—Ä–∏–º–∞—é—Ç—å –º–æ—Ä–µ –≤—Ä–∞–∂–µ–Ω—å, –∞ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—å —Ä–∞–∑–æ–º –∑ –Ω–∏–º–∏. üéâ\n"
        "–ö–æ–∂–µ–Ω —Ä–∞–∑ –Ω–∞—à—ñ –∫–ª—ñ—î–Ω—Ç–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è —ñ–∑ —Å–≤–æ—ó–º–∏ –¥—ñ—Ç–ª–∞—Ö–∞–º–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —â–∞—Å–ª–∏–≤–∏–º–∏. "
        "–í–∏ —Ç–æ—á–Ω–æ –ø–æ–ª—é–±–∏—Ç–µ —Ü–µ–π —Ç—É—Ä! üòä"
    )
    context.bot.send_message(chat_id=chat_id, text=message)
    logger.info("No response scenario triggered for chat_id=%s", chat_id)

def schedule_no_response_job(context: CallbackContext, chat_id: int):
    job_queue = context.job_queue
    current_jobs = job_queue.get_jobs_by_name(f"no_response_{chat_id}")
    for job in current_jobs:
        job.schedule_removal()
    job_queue.run_once(
        no_response_callback,
        NO_RESPONSE_DELAY_SECONDS,
        chat_id=chat_id,
        name=f"no_response_{chat_id}",
        data={"message": "–ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç–µ..."}
    )

def cancel_no_response_job(context: CallbackContext):
    job_queue = context.job_queue
    chat_id = context._chat_id if hasattr(context, '_chat_id') else None
    if chat_id:
        current_jobs = job_queue.get_jobs_by_name(f"no_response_{chat_id}")
        for job in current_jobs:
            job.schedule_removal()

#
# --- HELPER FUNCTIONS ---
#
async def typing_simulation(update: Update, text: str):
    await update.effective_chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(min(2, max(1, len(text)/80)))
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())

def mention_user(update: Update) -> str:
    user = update.effective_user
    return user.first_name if user and user.first_name else "–¥—Ä—É–∂–µ"

# –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
def is_positive_response(text: str) -> bool:
    positive_keywords = [
        "—Ç–∞–∫", "–¥–æ–±—Ä–µ", "–¥–∞", "–æ–∫", "–ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ", "—Ä–æ–∑–∫–∞–∂—ñ—Ç—å", "–≥–æ—Ç–æ–≤–∏–π", "–≥–æ—Ç–æ–≤–∞",
        "–ø—Ä–∏–≤–µ—Ç", "hello", "—Ä–∞—Å—Å–∫–∞–∂–∏", "–∑–∞—Ü—ñ–∫–∞–≤", "–∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–∏–π"
    ]
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in positive_keywords)

def is_negative_response(text: str) -> bool:
    negative_keywords = ["–Ω–µ —Ö–æ—á—É", "–Ω–µ –º–æ–∂—É", "–Ω–µ—Ç", "–Ω—ñ", "–Ω–µ –±—É–¥—É", "–Ω–µ –∑–∞—Ä–∞–∑"]
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in negative_keywords)

def analyze_intent(text: str) -> str:
    """
    –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º spaCy (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ).
    –ï—Å–ª–∏ spaCy –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
    """
    if nlp_uk:
        doc = nlp_uk(text)
        lemmas = [token.lemma_.lower() for token in doc]
        positive_keywords = {"—Ç–∞–∫", "–¥–æ–±—Ä–µ", "–¥–∞", "–æ–∫", "–ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏", "—Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏", "–≥–æ—Ç–æ–≤–∏–π", "–≥–æ—Ç–æ–≤–∞", "–ø—Ä–∏–≤—ñ—Ç", "hello", "–∑–∞—Ü—ñ–∫–∞–≤–∏—Ç–∏", "–∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–∏–π"}
        negative_keywords = {"–Ω–µ", "–Ω–µ—Ö–æ—á—É", "–Ω–µ–º–æ–∂—É", "–Ω–µ—Ç", "–Ω—ñ", "–Ω–µ–±—É–¥—É", "–Ω–µ –∑–∞—Ä–∞–∑"}
        if any(kw in lemmas for kw in positive_keywords):
            return "positive"
        if any(kw in lemmas for kw in negative_keywords):
            return "negative"
        return "unclear"
    else:
        if is_positive_response(text):
            return "positive"
        elif is_negative_response(text):
            return "negative"
        else:
            return "unclear"

#
# --- BOT HANDLERS ---
#
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    init_db()
    cancel_no_response_job(context)

    saved_stage, saved_user_data_json = load_user_state(user_id)
    if saved_stage is not None and saved_user_data_json is not None:
        text = (
            "–í–∏ –º–∞—î—Ç–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—É —Ä–æ–∑–º–æ–≤—É. "
            "–ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —Ç–æ–≥–æ –∂ –º—ñ—Å—Ü—è —á–∏ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ?\n"
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ: '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' –∞–±–æ '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'."
        )
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_GREET
    else:
        greeting_text = (
            "–í—ñ—Ç–∞—é –≤–∞—Å! üòä –í–∏ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏—Å—å –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–º —Ç—É—Ä–æ–º –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞, –£–≥–æ—Ä—â–∏–Ω–∞. "
            "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å. –î–æ–±—Ä–µ?"
        )
        await typing_simulation(update, greeting_text)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_GREET

# –≠–¢–ê–ü 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.
async def greet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text = update.message.text.strip()
    cancel_no_response_job(context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ "–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏" –∏ "–ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ"
    if "–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏" in user_text.lower():
        saved_stage, saved_data_json = load_user_state(user_id)
        if saved_stage is not None:
            context.user_data.update(json.loads(saved_data_json))
            response_text = "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Ä–æ–∑–º–æ–≤–∏."
            await typing_simulation(update, response_text)
            schedule_no_response_job(context, update.effective_chat.id)
            return saved_stage
        else:
            response_text = "–ù–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö, –ø–æ—á–Ω–µ–º–æ –∑ –Ω—É–ª—è."
            await typing_simulation(update, response_text)
            save_user_state(user_id, STAGE_GREET, context.user_data)
            schedule_no_response_job(context, update.effective_chat.id)
            return STAGE_GREET

    if "–ø–æ—á–∞—Ç–∏" in user_text.lower() or "–∑–∞–Ω–æ–≤–æ" in user_text.lower():
        context.user_data.clear()
        greeting_text = (
            "–í—ñ—Ç–∞—é –≤–∞—Å! üòä –í–∏ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏—Å—å –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–º —Ç—É—Ä–æ–º –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞, –£–≥–æ—Ä—â–∏–Ω–∞. "
            "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å. –î–æ–±—Ä–µ?"
        )
        await typing_simulation(update, greeting_text)
        save_user_state(user_id, STAGE_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_GREET

    # –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é spaCy (–∏–ª–∏ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑)
    intent = analyze_intent(user_text)
    if intent == "positive":
        response_text = (
            "–î—è–∫—É—é –∑–∞ –≤–∞—à—É –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ—Å—Ç—å! üòä\n"
            "–ó–≤—ñ–¥–∫–∏ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏: –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞? üöå"
        )
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_DEPARTURE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_DEPARTURE
    elif intent == "negative":
        message = (
            "–Ø –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –Ω–∞—à —Ç—É—Ä, —è–∫—â–æ –∑–∞—Ä–∞–∑ –≤–∞–º –Ω–µ–∑—Ä—É—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è."
        )
        await typing_simulation(update, message)
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_DETAILS

    # –§–æ–ª–±–µ–∫ –¥–ª—è –Ω–µ—è—Å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    text = (
        "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–∞–∂—ñ—Ç—å, —á–∏ –º–æ–∂–µ–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?"
    )
    await typing_simulation(update, text)
    save_user_state(user_id, STAGE_GREET, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_GREET

# –≠–¢–ê–ü 2: –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
async def departure_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    departure = update.message.text.strip()
    cancel_no_response_job(context)
    context.user_data["departure"] = departure

    response_text = "–î–ª—è –∫–æ–≥–æ –≤–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç–µ —Ü—é –ø–æ—ó–∑–¥–∫—É? –ß–∏ –ø–ª–∞–Ω—É—î—Ç–µ —ó—Ö–∞—Ç–∏ —Ä–∞–∑–æ–º —ñ–∑ –¥–∏—Ç–∏–Ω–æ—é?"
    await typing_simulation(update, response_text)
    save_user_state(user_id, STAGE_TRAVEL_PARTY, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_TRAVEL_PARTY

# –≠–¢–ê–ü 3: –ó–∞–ø—Ä–æ—Å –æ —Å–æ—Å—Ç–∞–≤–µ –≥—Ä—É–ø–ø—ã.
async def travel_party_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    party_info = update.message.text.lower().strip()
    cancel_no_response_job(context)
    context.user_data["travel_party"] = party_info

    if "–¥–∏—Ç–∏–Ω–∞" in party_info:
        response_text = "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ?"
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_CHILD_AGE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CHILD_AGE
    else:
        response_text = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CHOICE

# –≠–¢–ê–ü 3.1: –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –¥–∏—Ç–∏–Ω–∞ ‚Äì –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ—ë –≤–æ–∑—Ä–∞—Å—Ç.
async def child_age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    child_age = update.message.text.strip()
    cancel_no_response_job(context)
    context.user_data["child_age"] = child_age

    response_text = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
    await typing_simulation(update, response_text)
    save_user_state(user_id, STAGE_CHOICE, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_CHOICE

# –≠–¢–ê–ü 4: –í—ã–±–æ—Ä –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
async def choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    choice_text = update.message.text.lower().strip()
    cancel_no_response_job(context)
    # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–¥–µ—Ç–∞–ª—ñ"
    if "–¥–µ—Ç–∞–ª—å" in choice_text or "–¥–µ—Ç–∞–ª—ñ" in choice_text:
        context.user_data["choice"] = "details"
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        return await details_handler(update, context)
    elif "–≤–∞—Ä—Ç—ñ—Å—Ç—å" in choice_text or "—Ü—ñ–Ω–∞" in choice_text:
        context.user_data["choice"] = "cost"
        save_user_state(user_id, STAGE_DETAILS, context.user_data)
        return await details_handler(update, context)
    elif "–±—Ä–æ–Ω" in choice_text:
        context.user_data["choice"] = "booking"
        response_text = (
            "–Ø –¥—É–∂–µ —Ä–∞–¥–∞, —â–æ –í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ–¥–æ—Ä–æ–∂ –∑ –Ω–∞–º–∏, —Ü–µ –±—É–¥–µ –¥—ñ–π—Å–Ω–æ –∫—Ä—É—Ç–∞ –ø–æ—ó–∑–¥–∫–∞. "
            "–î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—Å —ñ –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏. –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å —É —Ä–æ–∑–º—ñ—Ä—ñ 30% "
            "—Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–±–æ —ñ–Ω—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º —É—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. "
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank? üí≥"
        )
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CLOSE_DEAL
    else:
        response_text = "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å: –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è?"
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CHOICE

# –≠–¢–ê–ü 5: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä–∞.
async def details_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    cancel_no_response_job(context)
    choice = context.user_data.get("choice", "details")
    if choice == "cost":
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —Ç–∞ –ú—É–∫–∞—á–µ–≤–∞. üåü\n"
            "–¶–µ —Ü—ñ–ª–∏–π –¥–µ–Ω—å, –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–∏–≥–æ–¥–∞–º–∏, —ñ –≤–∂–µ –≤–≤–µ—á–µ—Ä—ñ –≤–∏ –±—É–¥–µ—Ç–µ –≤–¥–æ–º–∞, —Å–ø–æ–≤–Ω–µ–Ω—ñ –ø—Ä–∏—î–º–Ω–∏—Ö —Å–ø–æ–≥–∞–¥—ñ–≤. "
            "–£—è–≤—ñ—Ç—å, —è–∫ –≤–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ –ª–µ–≤–∞–º–∏, —Å–ª–æ–Ω–∞–º–∏ —ñ –∂–∏—Ä–∞—Ñ–∞–º–∏, –∞ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –Ω–∞—Å–æ–ª–æ–¥–∏—Ç–∏—Å—è —Å–ø–æ–∫—ñ–π–Ω–∏–º —á–∞—Å–æ–º.\n\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å 1900 –≥—Ä–Ω –∑ –æ—Å–æ–±–∏. –¶–µ —Ü—ñ–Ω–∞, —â–æ –≤–∫–ª—é—á–∞—î —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏ –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ç–∞ —Å—É–ø—Ä–æ–≤—ñ–¥. "
            "–í–∏ –ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ —ñ –±—ñ–ª—å—à–µ –Ω–µ —Ç—É—Ä–±—É—î—Ç–µ—Å—è –ø—Ä–æ –∂–æ–¥–Ω—ñ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω—ñ –º–æ–º–µ–Ω—Ç–∏! üè∑Ô∏è\n\n"
            "–ü–æ–¥–æ—Ä–æ–∂ –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω–æ–º—É –∞–≤—Ç–æ–±—É—Å—ñ —ñ–∑ –∑–∞—Ä—è–¥–∫–∞–º–∏ –¥–ª—è –≥–∞–¥–∂–µ—Ç—ñ–≤ —ñ –∫–ª—ñ–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–µ–º. üöå\n"
            "–ù–∞—à —Å—É–ø—Ä–æ–≤—ñ–¥ –≤–∏—Ä—ñ—à—É—î –≤—Å—ñ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤ –¥–æ—Ä–æ–∑—ñ, –∞ –¥—ñ—Ç–∏ –æ—Ç—Ä–∏–º–∞—é—Ç—å –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –µ–º–æ—Ü—ñ–π! üéâ"
        )
    else:
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞.\n"
            "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: –¶—ñ–ª–∏–π –¥–µ–Ω—å, –≤–≤–µ—á–µ—Ä—ñ –í–∏ –≤–∂–µ –≤–¥–æ–º–∞.\n"
            "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω–∏–π –∞–≤—Ç–æ–±—É—Å —ñ–∑ –∫–ª—ñ–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–∞ –∑–∞—Ä—è–¥–∫–∞–º–∏. üöå\n"
            "–ó–æ–æ–ø–∞—Ä–∫: –ë—ñ–ª—å—à–µ 500 –≤–∏–¥—ñ–≤ —Ç–≤–∞—Ä–∏–Ω, —à–æ—É –º–æ—Ä—Å—å–∫–∏—Ö –∫–æ—Ç–∏–∫—ñ–≤, —Ñ–æ—Ç–æ —Ç–∞ –±–∞–≥–∞—Ç–æ –≤—Ä–∞–∂–µ–Ω—å! ü¶Å\n"
            "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è: –ó–∞ –≤–ª–∞—Å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫, –∞–ª–µ —É –Ω–∞—Å –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏–π —á–∞—Å –¥–ª—è –æ–±—ñ–¥—É –≤ –∑–∞—Ç–∏—à–Ω–æ–º—É –∫–∞—Ñ–µ. üçΩÔ∏è\n"
            "–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–æ–∑–≤–∞–≥–∏: –ü—ñ—Å–ª—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –∑–æ–æ–ø–∞—Ä–∫—É –º–∏ –∑–∞—ó–¥–µ–º–æ –¥–æ –≤–µ–ª–∏–∫–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É, –¥–µ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ—á–∏—Ç–∏, –∑—Ä–æ–±–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –∞–±–æ –≤–∏–ø–∏—Ç–∏ –∫–∞–≤–∏. ‚òï\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É: 1900 –≥—Ä–Ω –∑ –æ—Å–æ–±–∏. –£ –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏ –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É, –º–µ–¥–∏—á–Ω–µ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ç–∞ —Å—É–ø—Ä–æ–≤—ñ–¥. üè∑Ô∏è"
        )
    await typing_simulation(update, text)
    save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    response_followup = "–ß–∏ —î —É –≤–∞—Å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç—É—Ä—É? üòä"
    await update.effective_chat.send_message(text=response_followup)
    return STAGE_ADDITIONAL_QUESTIONS

# –≠–¢–ê–ü 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
async def additional_questions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text = update.message.text.lower().strip()
    cancel_no_response_job(context)
    
    no_more_questions = ["–Ω–µ–º–∞—î", "–≤—Å–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ", "–≤—Å–µ –æ–∫", "–¥–æ—Å–∏—Ç—å", "—Å–ø–∞—Å–∏–±—ñ", "–¥—è–∫—É—é"]
    if any(k in user_text for k in no_more_questions):
        response_text = "–Ø–∫ –≤–∞–º –Ω–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤ —Ü—ñ–ª–æ–º—É? üåü"
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_IMPRESSION, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_IMPRESSION
    elif "–¥–∏—Ç–∏–Ω–∞" in user_text and "–∑–ª—è–∫–∞—î—Ç—å—Å—è" in user_text:
        answer_text = (
            "–†–æ–∑—É–º—ñ—é –≤–∞—à—ñ —Ö–≤–∏–ª—é–≤–∞–Ω–Ω—è. –ú–∏ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤—É—î–º–æ –µ–∫—Å–∫—É—Ä—Å—ñ—é —Ç–∞–∫, —â–æ–± –¥—ñ—Ç–∏ –ø–æ—á—É–≤–∞–ª–∏—Å—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ: "
            "—î –¥–∏—Ç—è—á—ñ –º–∞–π–¥–∞–Ω—á–∏–∫–∏, –∑–æ–Ω–∏ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É —Ç–∞ —à–æ—É –º–æ—Ä—Å—å–∫–∏—Ö –∫–æ—Ç–∏–∫—ñ–≤, —è–∫–µ –¥—É–∂–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –¥—ñ—Ç—è–º. üòä"
        )
        await typing_simulation(update, answer_text + "\n\n–ß–∏ —î —â–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?")
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS
    else:
        answer_text = "–ì–∞—Ä–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! –Ø–∫—â–æ —î —â–µ —â–æ—Å—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–∏—Ç–∞–π—Ç–µ."
        await typing_simulation(update, answer_text + "\n\n–ß–∏ —î —â–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?")
        save_user_state(user_id, STAGE_ADDITIONAL_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ADDITIONAL_QUESTIONS

# –≠–¢–ê–ü 7: –ó–∞–ø—Ä–æ—Å –æ–±—â–µ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.
async def impression_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text = update.message.text.lower().strip()
    cancel_no_response_job(context)
    
    positive_keywords = ["–¥–æ–±—Ä–µ", "–∫–ª–∞—Å", "—Ü—ñ–∫–∞–≤–æ", "–≤—ñ–¥–º—ñ–Ω–Ω–æ", "—Å—É–ø–µ—Ä", "–ø—ñ–¥—Ö–æ–¥–∏—Ç—å", "—Ç–∞–∫"]
    negative_keywords = ["–Ω—ñ", "–Ω–µ —Ü—ñ–∫–∞–≤–æ", "–¥–æ—Ä–æ–≥–æ", "–∑–∞–≤–µ–ª–∏–∫–∞", "–Ω–∞–¥—Ç–æ"]
    if any(k in user_text for k in positive_keywords):
        response_text = (
            "–ß—É–¥–æ–≤–æ! üéâ –î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—Å —ñ –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏, —â–æ–± –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫. "
            "–î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å —É —Ä–æ–∑–º—ñ—Ä—ñ 30% —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–±–æ —ñ–Ω—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É. "
            "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º —É—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.\n"
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank? üí≥"
        )
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CLOSE_DEAL
    elif any(k in user_text for k in negative_keywords):
        response_text = (
            "–®–∫–æ–¥–∞ —Ü–µ —á—É—Ç–∏. –Ø–∫—â–æ —É –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–∏—Å—è –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –≤–∏ –∑–∞—Ö–æ—á–µ—Ç–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è."
        )
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_END, context.user_data)
        return STAGE_END
    else:
        response_text = "–î—è–∫—É—é –∑–∞ –¥—É–º–∫—É! –ß–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?"
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CLOSE_DEAL

# –≠–¢–ê–ü 8: –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ (–±—Ä–æ–Ω—å).
async def close_deal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text = update.message.text.lower().strip()
    cancel_no_response_job(context)
    
    positive_keywords = ["–ø—Ä–∏–≤–∞—Ç", "–º–æ–Ω–æ", "–æ–ø–ª–∞—á—É", "–≥–æ—Ç–æ–≤", "–≥–æ—Ç–æ–≤–∞", "–¥–∞–≤–∞–π—Ç–µ"]
    if any(k in user_text for k in positive_keywords):
        response_text = (
            "–ß—É–¥–æ–≤–æ! –û—Å—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n"
            "–ö–∞—Ä—Ç–∫–∞: 0000 0000 0000 0000 (Family Place)\n\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."
        )
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_PAYMENT
    negative_keywords = ["–Ω—ñ", "–Ω–µ—Ç", "–Ω–µ –±—É–¥—É", "–Ω–µ —Ö–æ—á—É"]
    if any(k in user_text for k in negative_keywords):
        response_text = "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –ë—É–¥—É —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ!"
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_END, context.user_data)
        return STAGE_END

    response_text = (
        "–î—è–∫—É—é! –í–∏ –≥–æ—Ç–æ–≤—ñ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è?\n"
        "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank? üí≥"
    )
    await typing_simulation(update, response_text)
    save_user_state(user_id, STAGE_CLOSE_DEAL, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_CLOSE_DEAL

# –≠–¢–ê–ü 9: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã.
async def payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_text = update.message.text.lower().strip()
    cancel_no_response_job(context)
    
    if any(keyword in user_text for keyword in ["–æ–ø–ª–∞—Ç–∏–≤", "–≤—ñ–¥–ø—Ä–∞–≤–∏–≤", "—Å–∫–∏–Ω—É–≤", "–≥–æ—Ç–æ–≤–æ"]):
        response_text = (
            "–î—è–∫—É—é! –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—é –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è. –Ø–∫ —Ç—ñ–ª—å–∫–∏ –≤—Å–µ –±—É–¥–µ –æ–∫, —è –Ω–∞–¥—ñ—à–ª—é –¥–µ—Ç–∞–ª—ñ –ø–æ—ó–∑–¥–∫–∏ —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è!"
        )
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_PAYMENT_CONFIRM, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_PAYMENT_CONFIRM
    else:
        response_text = (
            "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî —è –Ω–∞ –∑–≤'—è–∑–∫—É. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –æ–ø–ª–∞—Ç–æ—é?"
        )
        await typing_simulation(update, response_text)
        save_user_state(user_id, STAGE_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_PAYMENT

# –≠–¢–ê–ü 10: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.
async def payment_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    cancel_no_response_job(context)
    response_text = (
        "–î—è–∫—É—é –∑–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è! üéâ –ú–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–≥–ª–∏ –∑–∞ –≤–∞–º–∏ –º—ñ—Å—Ü–µ –≤ —Ç—É—Ä—ñ –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞. "
        "–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º —è –Ω–∞–¥—ñ—à–ª—é –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ (—Å–ø–∏—Å–æ–∫ —Ä–µ—á–µ–π, —á–∞—Å –≤–∏—ó–∑–¥—É —Ç–æ—â–æ). "
        "–Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è. –ú–∏ –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É!"
    )
    await typing_simulation(update, response_text)
    save_user_state(user_id, STAGE_END, context.user_data)
    return STAGE_END

# –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name if user else "Unknown")
    text = "–ì–∞—Ä–∞–∑–¥, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –∑–Ω–æ–≤—É!"
    await typing_simulation(update, text)
    user_id = str(update.effective_user.id)
    save_user_state(user_id, STAGE_END, context.user_data)
    return ConversationHandler.END

#
# --- WEBHOOK & BOT LAUNCH ---
#
@app.route('/')
def index():
    return "–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î! –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π."

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == "POST":
        data = request.get_json(force=True)
        global application
        if not application:
            logger.error("Application is not initialized yet.")
            return "No application available"
        update = Update.de_json(data, application.bot)
        loop = application.bot_data.get("loop")
        if loop:
            asyncio.run_coroutine_threadsafe(application.process_update(update), loop)
            logger.info("Webhook received and processed.")
        else:
            logger.error("No event loop available to process update.")
    return "OK"

async def setup_webhook(url, app_ref):
    webhook_url = f"{url}/webhook"
    await app_ref.bot.set_webhook(webhook_url)
    logger.info(f"Webhook set to: {webhook_url}")

async def run_bot():
    if is_bot_already_running():
        logger.error("Another instance is already running. Exiting.")
        sys.exit(1)
    logger.info("Starting bot...")
    req = HTTPXRequest(connect_timeout=20, read_timeout=40)
    application_builder = Application.builder().token(BOT_TOKEN).request(req)
    global application
    application = application_builder.build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            STAGE_GREET: [MessageHandler(filters.TEXT & ~filters.COMMAND, greet_handler)],
            STAGE_DEPARTURE: [MessageHandler(filters.TEXT & ~filters.COMMAND, departure_handler)],
            STAGE_TRAVEL_PARTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, travel_party_handler)],
            STAGE_CHILD_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, child_age_handler)],
            STAGE_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choice_handler)],
            STAGE_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, details_handler)],
            STAGE_ADDITIONAL_QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, additional_questions_handler)],
            STAGE_IMPRESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, impression_handler)],
            STAGE_CLOSE_DEAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, close_deal_handler)],
            STAGE_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment_handler)],
            STAGE_PAYMENT_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment_confirm_handler)],
            STAGE_END: [MessageHandler(filters.TEXT & ~filters.COMMAND,
                                       lambda update, context: context.bot.send_message(
                                           chat_id=update.effective_chat.id,
                                           text="–î—è–∫—É—é! –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî /start."
                                       ))],
        },
        fallbacks=[CommandHandler('cancel', cancel_command)],
        allow_reentry=True
    )
    application.add_handler(conv_handler)

    await setup_webhook(WEBHOOK_URL, application)
    await application.initialize()
    await application.start()
    loop = asyncio.get_running_loop()
    application.bot_data["loop"] = loop
    logger.info("Bot is online and ready.")

def start_flask():
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"Starting Flask on port {port}")
    app.run(host='0.0.0.0', port=port)

if __name__ == '__main__':
    bot_thread = threading.Thread(target=lambda: asyncio.run(run_bot()), daemon=True)
    bot_thread.start()
    logger.info("Bot thread started. Now starting Flask...")
    start_flask()
