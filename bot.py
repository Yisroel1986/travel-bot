import os
import logging
import sys
import psutil
import sqlite3
import json
from datetime import datetime
import asyncio
import threading
import requests

from dotenv import load_dotenv
from flask import Flask, request

from telegram import (
    Update,
    ReplyKeyboardRemove
)
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    CallbackContext,
    filters
)
from telegram.request import HTTPXRequest

# -----------------------------
# –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å spaCy, openai, huggingface
# -----------------------------
try:
    import spacy
    nlp_uk = spacy.load("uk_core_news_sm")  # —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å spaCy
except:
    nlp_uk = None

try:
    import openai
except:
    openai = None

try:
    from transformers import pipeline
    sentiment_pipeline = pipeline("sentiment-analysis", model="cardiffnlp/twitter-roberta-base-sentiment-latest")
except:
    sentiment_pipeline = None

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CRM_API_KEY = os.getenv("CRM_API_KEY")
CRM_API_URL = os.getenv("CRM_API_URL", "")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "")


# –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á openai, –∏—Å–ø–æ–ª—å–∑—É–µ–º
if openai and OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY

# -----------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≤—Ç–æ—Ä—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
# -----------------------------
def is_bot_already_running():
    current_process = psutil.Process()
    for process in psutil.process_iter(['pid', 'name', 'cmdline']):
        if (
            process.info['name'] == current_process.name()
            and process.info['cmdline'] == current_process.cmdline()
            and process.info['pid'] != current_process.pid
        ):
            return True
    return False

# -----------------------------
# –°–¶–ï–ù–ê–†–ù–´–ï –¢–ï–ö–°–¢–´ (–≤–º–µ—Å—Ç–æ scenario.py)
# -----------------------------

# ---- –î–µ—Ç—Å–∫–∏–π –ª–∞–≥–µ—Ä—å "–õ–∞–ø–ª–∞–Ω–¥–∏—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö"
LAPLANDIA_INTRO = (
    "–í—ñ—Ç–∞—é! üòä –î—è–∫—É—é –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –Ω–∞—à–æ–≥–æ –∑–∏–º–æ–≤–æ–≥–æ —Ç–∞–±–æ—Ä—É '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö'. "
    "–©–æ–± –Ω–∞–¥–∞—Ç–∏ –≤–∞–º –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è, "
    "–±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. "
    "üìû –ö—É–¥–∏ –≤–∞–º –±—É–¥–µ –∑—Ä—É—á–Ω—ñ—à–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: —É Viber —á–∏ Telegram?"
)

LAPLANDIA_IF_PHONE = (
    "–î—è–∫—É—é! üì≤ –ü–µ—Ä–µ–¥–∞—é –≤–∞—à –Ω–æ–º–µ—Ä –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É, –≤–æ–Ω–∞ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n"
    "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ, –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ç–∞–±–æ—Ä—É '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö' –ø—Ä—è–º–æ —Ç—É—Ç, —É —á–∞—Ç—ñ?"
)

LAPLANDIA_BRIEF = (
    "–£ —Ç–∞–±–æ—Ä—ñ '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö' –∫–æ–∂–µ–Ω –¥–µ–Ω—å ‚Äî —Ü–µ –∫–∞–∑–∫–∞! –í–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ –ø–æ—Ä–∏–Ω–µ —É –∑–∏–º–æ–≤—É –º–∞–≥—ñ—é, "
    "–¥–µ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–∏–≥–æ–¥–∞–º–∏.\n\n"
    "‚Ä¢ –†–∞–Ω–∫–æ–≤—ñ —Å–Ω—ñ–≥–æ–≤—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: –∫–∞—Ç–∞–Ω—è –Ω–∞ –ª–∏–∂–∞—Ö, —Å–∞–Ω–∫–∞—Ö, —Å–Ω—ñ–≥–æ–≤—ñ –±–æ—ó.\n"
    "‚Ä¢ –ú–∞–π—Å—Ç–µ—Ä-–∫–ª–∞—Å–∏ —Ç–∞ —Ç–≤–æ—Ä—á—ñ –º–∞–π–¥–∞–Ω—á–∏–∫–∏: –º–∞–ª—é–≤–∞–Ω–Ω—è, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—Ä—ñ—á–Ω–∏—Ö –ø—Ä–∏–∫—Ä–∞—Å —Ç–∞ –∫—É–ª—ñ–Ω–∞—Ä–Ω—ñ —É—Ä–æ–∫–∏.\n"
    "‚Ä¢ –í–µ—á—ñ—Ä–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: –¥–∏—Å–∫–æ—Ç–µ–∫–∏, –∫–≤–µ—Å—Ç–∏, –≤–µ—á—ñ—Ä–Ω—ñ –ø–æ—Å–∏–¥–µ–Ω—å–∫–∏ –±—ñ–ª—è –∫–∞–º—ñ–Ω—É.\n"
    "‚Ä¢ –ï–∫—Å–∫—É—Ä—Å—ñ—ó –¥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å (–æ–ª–µ–Ω—è—á–∞ —Ñ–µ—Ä–º–∞, –∑–∏–º–æ–≤—ñ –ª—ñ—Å–∏ –ö–∞—Ä–ø–∞—Ç).\n\n"
    "–í–∞—Ä—Ç—ñ—Å—Ç—å: 17,200 –≥—Ä–Ω. –ê–ª–µ –∑–∞—Ä–∞–∑ –¥—ñ—î –∞–∫—Ü—ñ—è —Ä–∞–Ω–Ω—å–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ‚Äî 16,200 –≥—Ä–Ω! "
    "–¶—è —Å—É–º–∞ –≤–∫–ª—é—á–∞—î –≤—Å–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ: –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è, —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è, —Å—Ç—Ä–∞—Ö–æ–≤–∫—É, —Å—É–ø—Ä–æ–≤—ñ–¥ –≤–∏—Ö–æ–≤–∞—Ç–µ–ª—ñ–≤ —Ç–∞ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ."
)

LAPLANDIA_NO_PHONE = (
    "–ó—Ä–æ–∑—É–º—ñ–ª–æ, —â–æ –≤–∏ –ø–æ–∫–∏ –Ω–µ –≥–æ—Ç–æ–≤—ñ –∑–∞–ª–∏—à–∏—Ç–∏ –Ω–æ–º–µ—Ä. –¢–æ–¥—ñ –¥–∞–≤–∞–π—Ç–µ —è –≤—ñ–¥–ø–æ–≤—ñ–º –Ω–∞ –≤–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç—É—Ç. "
    "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å, —â–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏. –î–æ–±—Ä–µ?"
)

# ---- –ê–≤—Ç–æ–±—É—Å–Ω—ã–π —Ç—É—Ä "–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫"
ZOO_INTRO = (
    "–í—ñ—Ç–∞—é! üòä –î—è–∫—É—é –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –æ–¥–Ω–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç—É—Ä—É –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞, –£–≥–æ—Ä—â–∏–Ω–∞. "
    "–¶–µ —á—É–¥–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ —Ç–∞ –≤–∞–º –Ω–µ–∑–∞–±—É—Ç–Ω—ñ–π –¥–µ–Ω—å —Å–µ—Ä–µ–¥ –µ–∫–∑–æ—Ç–∏—á–Ω–∏—Ö —Ç–≤–∞—Ä–∏–Ω! "
    "–î–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —É—Ç–æ—á–Ω—é—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å. –î–æ–±—Ä–µ?"
)

ZOO_DETAILS = (
    "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è (–∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞).\n"
    "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: –¶—ñ–ª–∏–π –¥–µ–Ω—å, –≤–≤–µ—á–µ—Ä—ñ –≤–∏ –≤–∂–µ –≤–¥–æ–º–∞.\n"
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω–∏–π –∞–≤—Ç–æ–±—É—Å –∑ –∫–ª—ñ–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–∞ –∑–∞—Ä—è–¥–∫–∞–º–∏. üöå\n"
    "–ó–æ–æ–ø–∞—Ä–∫: –ü–æ–Ω–∞–¥ 500 –≤–∏–¥—ñ–≤ —Ç–≤–∞—Ä–∏–Ω, —à–æ—É –º–æ—Ä—Å—å–∫–∏—Ö –∫–æ—Ç–∏–∫—ñ–≤, —Ñ–æ—Ç–æ, –±–∞–≥–∞—Ç–æ –≤—Ä–∞–∂–µ–Ω—å! ü¶Å\n"
    "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É: 1900 –≥—Ä–Ω –∑ –ª—é–¥–∏–Ω–∏ (–≤–∫–ª—é—á–∞—î —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∫—É, —Å—É–ø—Ä–æ–≤—ñ–¥).\n"
    "–ü—ñ—Å–ª—è –∑–æ–æ–ø–∞—Ä–∫—É: –ó–∞—ó–¥–µ–º–æ –≤ –≤–µ–ª–∏–∫–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä, –¥–µ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ—á–∏—Ç–∏, –∑—Ä–æ–±–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏ —á–∏ –≤–∏–ø–∏—Ç–∏ –∫–∞–≤—É."
)

# ---- –û–±—â–∏–π fallback
FALLBACK_TEXT = (
    "–í–∏–±–∞—á—Ç–µ, —è –ø–æ–∫–∏ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞ –≤–∞—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è. –Ø –º–æ–∂—É —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –∑–∏–º–æ–≤–∏–π —Ç–∞–±—ñ—Ä '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö' "
    "—á–∏ –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–π —Ç—É—Ä –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å–≥–∞–∑–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å. üòä"
)

# -----------------------------
# Conversation states
# -----------------------------
(
    STAGE_SCENARIO_CHOICE,  
    STAGE_CAMP_PHONE,       
    STAGE_CAMP_NO_PHONE_QA, 
    STAGE_CAMP_DETAILED,    
    STAGE_CAMP_END,         

    STAGE_ZOO_GREET,        
    STAGE_ZOO_DEPARTURE,    
    STAGE_ZOO_TRAVEL_PARTY, 
    STAGE_ZOO_CHILD_AGE,    
    STAGE_ZOO_CHOICE,       
    STAGE_ZOO_DETAILS,      
    STAGE_ZOO_QUESTIONS,    
    STAGE_ZOO_IMPRESSION,   
    STAGE_ZOO_CLOSE_DEAL,   
    STAGE_ZOO_PAYMENT,      
    STAGE_ZOO_PAYMENT_CONFIRM,
    STAGE_ZOO_END,
    STAGE_CAMP_CITY,
    STAGE_CAMP_CHILDREN
) = range(17)

NO_RESPONSE_DELAY_SECONDS = 6*3600

app = Flask(__name__)
application = None

# ============================
# DB init / load / save
# ============================
def init_db():
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS conversation_state (
            user_id TEXT PRIMARY KEY,
            current_stage INTEGER,
            user_data TEXT,
            last_interaction TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def load_user_state(user_id:str):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    c.execute("SELECT current_stage,user_data FROM conversation_state WHERE user_id=?",(user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return row[0], row[1]
    return None,None

def save_user_state(user_id:str, stage:int, user_data:dict):
    conn = sqlite3.connect("bot_database.db")
    c = conn.cursor()
    ud_json = json.dumps(user_data, ensure_ascii=False)
    now = datetime.now().isoformat()
    c.execute("""
        INSERT OR REPLACE INTO conversation_state 
        (user_id, current_stage, user_data, last_interaction)
        VALUES (?,?,?,?)
    """,(user_id, stage, ud_json, now))
    conn.commit()
    conn.close()

# ============================
# No response job
# ============================
def no_response_callback(context:CallbackContext):
    chat_id = context.job.chat_id
    text = (
        "–°—Ö–æ–∂–µ, —â–æ –≤–∏ –∑–∞–π–Ω—è—Ç—ñ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó (–∑–∏–º–æ–≤–∏–π —Ç–∞–±—ñ—Ä —á–∏ –∑–æ–æ–ø–∞—Ä–∫), "
        "–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ, —è –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É! üòä"
    )
    context.bot.send_message(chat_id=chat_id, text=text)

def schedule_no_response_job(context:CallbackContext, chat_id:int):
    jq = context.job_queue
    jobs = jq.get_jobs_by_name(f"noresp_{chat_id}")
    for j in jobs:
        j.schedule_removal()
    jq.run_once(no_response_callback, NO_RESPONSE_DELAY_SECONDS, chat_id=chat_id, name=f"noresp_{chat_id}")

def cancel_no_response_job(context:CallbackContext):
    jq = context.job_queue
    chat_id = context._chat_id if hasattr(context,'_chat_id') else None
    if chat_id:
        jobs = jq.get_jobs_by_name(f"noresp_{chat_id}")
        for j in jobs:
            j.schedule_removal()

# ============================
# Typing simulation
# ============================
async def typing_simulation(update: Update, text: str) -> None:
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await update.effective_chat.send_action(action=ChatAction.TYPING)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    delay = min(len(text) * 0.05, 2.0)  # –º–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
    
    # –ñ–¥–µ–º
    await asyncio.sleep(delay)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.effective_chat.send_message(
        text=text,
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='HTML'
    )

# ============================
# Intent detection
# ============================
def is_positive_response(txt:str)->bool:
    arr = ["—Ç–∞–∫","–¥–æ–±—Ä–µ","–¥–∞","–æ–∫","–ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ","—Ä–æ–∑–∫–∞–∂—ñ—Ç—å","–≥–æ—Ç–æ–≤–∏–π","–≥–æ—Ç–æ–≤–∞","–ø—Ä–∏–≤—ñ—Ç","hello","yes","–∑–∞—Ü—ñ–∫–∞–≤","sure"]
    return any(k in txt.lower() for k in arr)

def is_negative_response(txt:str)->bool:
    arr = ["–Ω–µ —Ö–æ—á—É","–Ω–µ –º–æ–∂—É","–Ω–µ—Ç","–Ω—ñ","–Ω–µ –±—É–¥—É","–Ω–µ –∑–∞—Ä–∞–∑","no"]
    return any(k in txt.lower() for k in arr)

def analyze_intent(txt:str)->str:
    if nlp_uk:
        doc = nlp_uk(txt)
        lemmas = [t.lemma_.lower() for t in doc]
        if any(k in lemmas for k in ["—Ç–∞–∫","–æ–∫","–¥–æ–±—Ä–µ","–≥–æ—Ç–æ–≤–∏–π"]):
            return "positive"
        if any(k in lemmas for k in ["–Ω–µ","–Ω—ñ","–Ω–µ—Ç","–Ω–µ–±—É–¥—É"]):
            return "negative"
        return "unclear"
    else:
        if is_positive_response(txt):
            return "positive"
        elif is_negative_response(txt):
            return "negative"
        else:
            return "unclear"

# ============================
# GPT fallback
# ============================
async def gpt_fallback_response(message: str, context: CallbackContext) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é GPT —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    current_stage = context.user_data.get("current_stage", STAGE_SCENARIO_CHOICE)
    user_data = context.user_data
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
    prompt = f"""–¢—ã - –ø—Ä–æ–¥–∞—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥–µ—Ç—Å–∫–∏–µ –ª–∞–≥–µ—Ä—è –∏ —ç–∫—Å–∫—É—Ä—Å–∏–∏.
–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {current_stage}
–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {user_data.get('message_history', [])}
–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–∞—Ö:

1. –ó–∏–º–Ω–∏–π –ª–∞–≥–µ—Ä—å "–õ–∞–ø–ª–∞–Ω–¥–∏—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö":
- –†–∞–Ω–∫–æ–≤—ã–µ —Å–Ω–µ–∂–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –∫–∞—Ç–∞–Ω–∏–µ –Ω–∞ –ª—ã–∂–∞—Ö, —Å–∞–Ω–∫–∞—Ö, —Å–Ω–µ–∂–Ω—ã–µ –±–æ–∏
- –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø–ª–æ—â–∞–¥–∫–∏: —Ä–∏—Å–æ–≤–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π, –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —É—Ä–æ–∫–∏
- –í–µ—á–µ—Ä–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –¥–∏—Å–∫–æ—Ç–µ–∫–∏, –∫–≤–µ—Å—Ç—ã, –≤–µ—á–µ—Ä–Ω–∏–µ –ø–æ—Å–∏–¥–µ–ª–∫–∏ —É –∫–∞–º–∏–Ω–∞
- –≠–∫—Å–∫—É—Ä—Å–∏–∏ –∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –º–µ—Å—Ç–∞–º (–æ–ª–µ–Ω—å—è —Ñ–µ—Ä–º–∞, –∑–∏–º–Ω–∏–µ –ª–µ—Å–∞ –ö–∞—Ä–ø–∞—Ç)
- –°—Ç–æ–∏–º–æ—Å—Ç—å: 17,200 –≥—Ä–Ω (–∞–∫—Ü–∏—è —Ä–∞–Ω–Ω–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî 16,200 –≥—Ä–Ω)
- –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ, –ø–∏—Ç–∞–Ω–∏–µ, —Å—Ç—Ä–∞—Ö–æ–≤–∫—É, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–µ–π –∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

2. –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–π —Ç—É—Ä –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å–∏—Ä–µ–¥—å—Ö–∞–∑–∞:
- –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: 26 –æ–∫—Ç—è–±—Ä—è
- –í—ã–µ–∑–¥ –∏–∑ –£–∂–≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –ú—É–∫–∞—á–µ–≤–∞
- –ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ–±—É—Å —Å –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–µ–º
- –ë–æ–ª–µ–µ 500 –≤–∏–¥–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö
- –®–æ—É –º–æ—Ä—Å–∫–∏—Ö –∫–æ—Ç–∏–∫–æ–≤
- –°—Ç–æ–∏–º–æ—Å—Ç—å: 1900 –≥—Ä–Ω (–≤–∫–ª—é—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –±–∏–ª–µ—Ç—ã, —Å—Ç—Ä–∞—Ö–æ–≤–∫—É)
- –ü–æ—Å–ª–µ –∑–æ–æ–ø–∞—Ä–∫–∞: –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤:
1. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ
2. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
3. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º
4. –°–ª–µ–¥—É–π –ø—Ä–æ–¥–∞—é—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
5. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
6. –ó–∞–¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
7. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –ø—Ä–∏–µ–º—ã (—Å—Ä–æ—á–Ω–æ—Å—Ç—å, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å, —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ)
8. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö —Ç—É—Ä–∞—Ö –∏–ª–∏ —É—Å–ª—É–≥–∞—Ö
9. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ —ç—Ç–∏—Ö –¥–≤—É—Ö —Ç—É—Ä–æ–≤

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
2. –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
3. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
4. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –ø—Ä–æ–¥–∞–∂—É –¥–∞–ª—å—à–µ."""

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": message}
            ],
            temperature=0.7,
            max_tokens=500
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ GPT: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

# ============================
# START Handler
# ============================
async def message_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    user_text = update.message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_stage = context.user_data.get("current_stage", STAGE_SCENARIO_CHOICE)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    message_history = context.user_data.get("message_history", [])
    message_history.append({"role": "user", "content": user_text})
    context.user_data["message_history"] = message_history
    
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if "no_response_job" in context.user_data:
        context.user_data["no_response_job"].schedule_removal()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
    response = await gpt_fallback_response(user_text, context)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    message_history.append({"role": "assistant", "content": response})
    context.user_data["message_history"] = message_history
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –Ω–∞–±–æ—Ä–∞
    await typing_simulation(update, response)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    next_stage = current_stage
    if "–ª–∞–≥–µ—Ä—å" in user_text.lower() or "–ª–∞–ø–ª–∞–Ω–¥—ñ—è" in user_text.lower():
        next_stage = STAGE_CAMP_PHONE
    elif "–∑–æ–æ–ø–∞—Ä–∫" in user_text.lower():
        next_stage = STAGE_ZOO_GREET
    elif current_stage == STAGE_CAMP_PHONE:
        if any(char.isdigit() for char in user_text):
            next_stage = STAGE_CAMP_DETAILED
    elif current_stage == STAGE_CAMP_DETAILED:
        next_stage = STAGE_CAMP_END
    elif current_stage == STAGE_ZOO_GREET:
        next_stage = STAGE_ZOO_DEPARTURE
    elif current_stage == STAGE_ZOO_DEPARTURE:
        next_stage = STAGE_ZOO_TRAVEL_PARTY
    elif current_stage == STAGE_ZOO_TRAVEL_PARTY:
        next_stage = STAGE_ZOO_CHILD_AGE
    elif current_stage == STAGE_ZOO_CHILD_AGE:
        next_stage = STAGE_ZOO_CHOICE
    elif current_stage == STAGE_ZOO_CHOICE:
        next_stage = STAGE_ZOO_DETAILS
    elif current_stage == STAGE_ZOO_DETAILS:
        next_stage = STAGE_ZOO_QUESTIONS
    elif current_stage == STAGE_ZOO_QUESTIONS:
        next_stage = STAGE_ZOO_IMPRESSION
    elif current_stage == STAGE_ZOO_IMPRESSION:
        next_stage = STAGE_ZOO_CLOSE_DEAL
    elif current_stage == STAGE_ZOO_CLOSE_DEAL:
        next_stage = STAGE_ZOO_PAYMENT
    elif current_stage == STAGE_ZOO_PAYMENT:
        next_stage = STAGE_ZOO_PAYMENT_CONFIRM
    elif current_stage == STAGE_ZOO_PAYMENT_CONFIRM:
        next_stage = STAGE_ZOO_END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user_state(user_id, next_stage, context.user_data)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞
    context.user_data["no_response_job"] = context.job_queue.run_once(
        no_response_callback, 300, data={"user_id": user_id}
    )
    
    return next_stage

async def start_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    context.user_data.clear()
    context.user_data["message_history"] = []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = """–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –û–ª–µ–Ω–∞, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ –≤–∏–±–æ—Ä—É –¥–∏—Ç—è—á–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É.

–£ –Ω–∞—Å —î –¥–≤–∞ —á—É–¥–æ–≤–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏:

1. üèîÔ∏è –ó–∏–º–æ–≤–∏–π —Ç–∞–±—ñ—Ä "–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö"
   - –°–Ω—ñ–≥–æ–≤—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
   - –ú–∞–π—Å—Ç–µ—Ä-–∫–ª–∞—Å–∏
   - –í–µ—á—ñ—Ä–Ω—ñ –∑–∞—Ö–æ–¥–∏
   - –ï–∫—Å–∫—É—Ä—Å—ñ—ó

2. ü¶Å –û–¥–Ω–æ–¥–µ–Ω–Ω–∞ –µ–∫—Å–∫—É—Ä—Å—ñ—è –¥–æ –∑–æ–æ–ø–∞—Ä–∫—É –ù—å—ó—Ä–µ–¥—å—Ö–∞–∑–∞
   - –ü–æ–Ω–∞–¥ 500 –≤–∏–¥—ñ–≤ —Ç–≤–∞—Ä–∏–Ω
   - –®–æ—É –º–æ—Ä—Å—å–∫–∏—Ö –∫–æ—Ç–∏–∫—ñ–≤
   - –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä
   - –¢–æ—Ä–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä

–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å? üòä"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await typing_simulation(update, welcome_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_user_state(user_id, STAGE_SCENARIO_CHOICE, context.user_data)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞
    context.user_data["no_response_job"] = context.job_queue.run_once(
        no_response_callback, 300, data={"user_id": user_id}
    )
    
    return STAGE_SCENARIO_CHOICE

# ============================
# SCENARIO CHOICE
# ============================
async def scenario_choice_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.lower().strip()

    # –õ–∞–≥–µ—Ä—å
    if any(k in txt for k in ["–ª–∞–ø–ª–∞–Ω–¥","–∫–∞—Ä–ø–∞—Ç","–ª–∞–≥–µ—Ä—å","camp"]):
        context.user_data["scenario"] = "camp"
        text = LAPLANDIA_INTRO
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_CAMP_PHONE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_PHONE

    # –ó–æ–æ–ø–∞—Ä–∫
    elif any(k in txt for k in ["–∑–æ–æ–ø–∞—Ä–∫","–Ω—å–∏—Ä–µ–¥—å—Ö–∞–∑–∞","nyire","–ª–µ–≤","–æ–¥–Ω–æ–¥–µ–Ω","–º—É–∫–∞—á","—É–∂–≥–æ—Ä–æ–¥"]):
        context.user_data["scenario"] = "zoo"
        text = ZOO_INTRO
        await typing_simulation(update, text)
        save_user_state(user_id, STAGE_ZOO_GREET, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_GREET

    else:
        # GPT fallback —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {txt}\n"
            "–ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª–∏ –ª–∞–≥–µ—Ä—å '–õ–∞–ø–ª–∞–Ω–¥–∏—è' –∏–ª–∏ '–ó–æ–æ–ø–∞—Ä–∫ –ù—å–∏—Ä–µ–¥—å—Ö–∞–∑–∞'. "
            "–ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å."
        )
        gpt_text = await gpt_fallback_response(prompt, context)
        await typing_simulation(update, gpt_text)
        save_user_state(user_id, STAGE_SCENARIO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_SCENARIO_CHOICE

# ============================
# CAMP: PHONE
# ============================
async def camp_phone_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if context.user_data.get("phone_processed"):
        return STAGE_CAMP_PHONE

    phone_candidate = txt.replace(" ","").replace("-","")
    if phone_candidate.startswith("+") or phone_candidate.isdigit():
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω
        context.user_data["phone"] = phone_candidate
        context.user_data["phone_processed"] = True
        r = "–î—è–∫—É—é! üì≤ –ü–µ—Ä–µ–¥–∞—é –≤–∞—à –Ω–æ–º–µ—Ä –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É. –í–æ–Ω–∞ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. ‚ú®"
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_CAMP_DETAILED, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_DETAILED
    else:
        # –Ω–µ –¥–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω
        context.user_data["phone_processed"] = True
        r = "–ó—Ä–æ–∑—É–º—ñ–ª–æ! üòä –¢–æ–¥—ñ –¥–∞–≤–∞–π—Ç–µ —è —Ä–æ–∑–ø–æ–≤—ñ–º –≤–∞–º –ø—Ä–æ —Ç–∞–±—ñ—Ä –ø—Ä—è–º–æ —Ç—É—Ç. –•–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–µ—Ç–∞–ª—ñ? ü§î"
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_CAMP_NO_PHONE_QA, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_NO_PHONE_QA

# ============================
# CAMP: NO PHONE Q/A
# ============================
async def camp_no_phone_qa_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if context.user_data.get("qa_processed"):
        return STAGE_CAMP_NO_PHONE_QA

    context.user_data["qa_processed"] = True
    intent = analyze_intent(txt)
    
    if intent == "positive":
        r = "–ß—É–¥–æ–≤–æ! üéâ –ó —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞? üèôÔ∏è"
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_CAMP_CITY, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_CITY
    else:
        r = "–î–æ–±—Ä–µ! üòä –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å! ‚ú®"
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_CAMP_END, context.user_data)
        return STAGE_CAMP_END

# ============================
# CAMP: CITY
# ============================
async def camp_city_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if context.user_data.get("city_processed"):
        return STAGE_CAMP_CITY
    
    context.user_data["city_processed"] = True
    context.user_data["city"] = txt
    
    r = f"–ß—É–¥–æ–≤–æ! üéâ –ê —Å–∫—ñ–ª—å–∫–∏ –¥—ñ—Ç–µ–π –ø–ª–∞–Ω—É—î—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏? üë∂"
    await typing_simulation(update, r)
    save_user_state(user_id, STAGE_CAMP_CHILDREN, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_CAMP_CHILDREN

# ============================
# CAMP: CHILDREN
# ============================
async def camp_children_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if context.user_data.get("children_processed"):
        return STAGE_CAMP_CHILDREN
    
    context.user_data["children_processed"] = True
    context.user_data["children"] = txt

    r = LAPLANDIA_BRIEF
    await typing_simulation(update, r)
    save_user_state(user_id, STAGE_CAMP_END, context.user_data)
    return STAGE_CAMP_END

# ============================
# CAMP: DETAILED
# ============================
async def camp_detailed_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if context.user_data.get("detailed_processed"):
        return STAGE_CAMP_DETAILED

    context.user_data["detailed_processed"] = True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–µ—Ç–∞–ª—è—Ö
    if "—Ç–∞–∫" in txt.lower() or "–¥–æ–±—Ä–µ" in txt.lower() or "—Ä–æ–∑–∫–∞–∂—ñ—Ç—å" in txt.lower():
        r = LAPLANDIA_BRIEF
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_CAMP_END, context.user_data)
        return STAGE_CAMP_END
    elif "–±—Ä–æ–Ω" in txt.lower() or "–∑–∞–±—Ä–æ–Ω" in txt.lower():
        r = "–ß—É–¥–æ–≤–æ! üéâ –î–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. üìû"
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_CAMP_PHONE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_PHONE
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–µ—Ç–∞–ª—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT
        prompt = (
            f"–ö–ª—ñ—î–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤: {txt}\n"
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ö–ª—ñ—î–Ω—Ç –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–∏–π –∑–∏–º–æ–≤–∏–º —Ç–∞–±–æ—Ä–æ–º '–õ–∞–ø–ª–∞–Ω–¥—ñ—è –≤ –ö–∞—Ä–ø–∞—Ç–∞—Ö'. "
            "–í–∂–µ –Ω–∞–¥–∞–≤ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ, "
            "–∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –¥—Ä—É–∂–Ω—ñ–π —Ç–æ–Ω —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ—é, "
            "–∑ –µ–º–æ–¥–∑—ñ —Ç–∞ —á—ñ—Ç–∫–∏–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏."
        )
        gpt_text = await gpt_fallback_response(prompt, context)
        await typing_simulation(update, gpt_text)
        save_user_state(user_id, STAGE_CAMP_DETAILED, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_CAMP_DETAILED

# ============================
# CAMP: END
# ============================
async def camp_end_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    r = "–î—è–∫—É—é –∑–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! ‚ú® –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî /start. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! üåü"
    await typing_simulation(update, r)
    return ConversationHandler.END

# ============================
# ZOO: Greet
# ============================
async def zoo_greet_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()

    intent = analyze_intent(txt)
    if intent == "positive":
        r = "–ó–≤—ñ–¥–∫–∏ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏: –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —á–∏ –ú—É–∫–∞—á–µ–≤–∞? üöå"
        await typing_simulation(update, r)
        save_user_state(user_id, STAGE_ZOO_DEPARTURE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_DEPARTURE
    elif intent == "negative":
        msg = (
            "–Ø –º–æ–∂—É –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –Ω–∞—à –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–π —Ç—É—Ä, —è–∫—â–æ –≤–∞–º –Ω–µ–∑—Ä—É—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è. "
            "–¶–µ –∑–∞–π–º–µ –±—É–∫–≤–∞–ª—å–Ω–æ —Ö–≤–∏–ª–∏–Ω—É!"
        )
        await typing_simulation(update, msg)
        save_user_state(user_id, STAGE_ZOO_DETAILS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_DETAILS
    else:
        prompt = (
            f"–ö–ª—ñ—î–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤: {txt}\n"
            "–Ø–∫—â–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–æ, –ø–æ–ø—Ä–æ—Å—ñ—Ç—å —É—Ç–æ—á–Ω–∏—Ç–∏ (—Å—Ü–µ–Ω–∞—Ä—ñ–π –∑–æ–æ–ø–∞—Ä–∫)."
        )
        fallback = await gpt_fallback_response(prompt, context)
        await typing_simulation(update, fallback)
        return STAGE_ZOO_GREET

async def zoo_departure_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    user_id = str(update.effective_user.id)
    txt = update.message.text.strip()

    context.user_data["departure"] = txt
    r = "–î–ª—è –∫–æ–≥–æ –≤–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç–µ —Ü—é –ø–æ—ó–∑–¥–∫—É? –ü–ª–∞–Ω—É—î—Ç–µ —ó—Ö–∞—Ç–∏ —Ä–∞–∑–æ–º –∑ –¥–∏—Ç–∏–Ω–æ—é?"
    await typing_simulation(update, r)
    save_user_state(user_id, STAGE_ZOO_TRAVEL_PARTY, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_ZOO_TRAVEL_PARTY

async def zoo_travel_party_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    txt = update.message.text.lower().strip()

    if "–¥–∏—Ç" in txt:
        await typing_simulation(update, "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∞—à—ñ–π –¥–∏—Ç–∏–Ω—ñ?")
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CHILD_AGE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CHILD_AGE
    else:
        r = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CHOICE

async def zoo_child_age_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    r = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ: –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è? üòä"
    await typing_simulation(update, r)
    save_user_state(str(update.effective_user.id), STAGE_ZOO_CHOICE, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_ZOO_CHOICE

async def zoo_choice_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    txt = update.message.text.lower().strip()

    if "–¥–µ—Ç–∞–ª" in txt:
        context.user_data["choice"] = "details"
        save_user_state(str(update.effective_user.id), STAGE_ZOO_DETAILS, context.user_data)
        return await zoo_details_handler(update, context)
    elif "–≤–∞—Ä—Ç" in txt or "—Ü—ñ–Ω" in txt:
        context.user_data["choice"] = "cost"
        save_user_state(str(update.effective_user.id), STAGE_ZOO_DETAILS, context.user_data)
        return await zoo_details_handler(update, context)
    elif "–±—Ä–æ–Ω" in txt:
        context.user_data["choice"] = "booking"
        r = (
            "–Ø –¥—É–∂–µ —Ä–∞–¥–∞, —â–æ –≤–∏ –æ–±—Ä–∞–ª–∏ –ø–æ–¥–æ—Ä–æ–∂ –∑ –Ω–∞–º–∏. "
            "–î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—Å —Ç–∞ –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏. "
            "–î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å 30% —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        )
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL
    else:
        resp = "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å: –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å –¥–µ—Ç–∞–ª—ñ —Ç—É—Ä—É, –≤–∞—Ä—Ç—ñ—Å—Ç—å —á–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è?"
        await typing_simulation(update, resp)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CHOICE, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CHOICE

async def zoo_details_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    txt = update.message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if context.user_data.get("zoo_details_processed"):
        return STAGE_ZOO_DETAILS

    context.user_data["zoo_details_processed"] = True
    choice = context.user_data.get("choice","details")

    if choice == "cost":
        text = (
            "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: 26 –∂–æ–≤—Ç–Ω—è –∑ –£–∂–≥–æ—Ä–æ–¥–∞ —Ç–∞ –ú—É–∫–∞—á–µ–≤–∞.\n"
            "–¶–µ —Ü—ñ–ª–∏–π –¥–µ–Ω—å, —ñ –≤–≤–µ—á–µ—Ä—ñ –≤–∏ –≤–∂–µ –≤–¥–æ–º–∞.\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É: 1900 –≥—Ä–Ω (–≤–∫–ª—é—á–∞—î —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –∫–≤–∏—Ç–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∫—É).\n\n"
            "–£—è–≤—ñ—Ç—å, —è–∫ –≤–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ –±—É–¥–µ –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ –ª–µ–≤–∞–º–∏, —Å–ª–æ–Ω–∞–º–∏ —Ç–∞ –∂–∏—Ä–∞—Ñ–∞–º–∏, –∞ –≤–∏ "
            "–∑–º–æ–∂–µ—Ç–µ –Ω–∞—Å–æ–ª–æ–¥–∏—Ç–∏—Å—è –ø—Ä–æ–≥—É–ª—è–Ω–∫–æ—é –±–µ–∑ –∑–∞–π–≤–∏—Ö —Ç—É—Ä–±–æ—Ç. "
            "–ß–∏ —î —É –≤–∞—Å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è?"
        )
    else:
        text = ZOO_DETAILS

    await typing_simulation(update, text)
    save_user_state(str(update.effective_user.id), STAGE_ZOO_QUESTIONS, context.user_data)
    schedule_no_response_job(context, update.effective_chat.id)
    return STAGE_ZOO_QUESTIONS

async def zoo_questions_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    txt = update.message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if context.user_data.get("zoo_questions_processed"):
        return STAGE_ZOO_QUESTIONS

    context.user_data["zoo_questions_processed"] = True

    if "–±—Ä–æ–Ω" in txt:
        r = "–ß—É–¥–æ–≤–æ, —Ç–æ–¥—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –Ø –Ω–∞–¥—ñ—à–ª—é —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏!"
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        return STAGE_ZOO_CLOSE_DEAL
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        prompt = (
            f"–ö–ª—ñ—î–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤: {txt}\n"
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ö–ª—ñ—î–Ω—Ç –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–∏–π —Ç—É—Ä–æ–º –≤ –∑–æ–æ–ø–∞—Ä–∫ –ù—å—ó—Ä–µ–¥—å—Ö–∞–∑–∞. "
            "–í–∂–µ –æ—Ç—Ä–∏–º–∞–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—É—Ä. –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ, "
            "–∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –¥—Ä—É–∂–Ω—ñ–π —Ç–æ–Ω —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
        )
        gpt_text = await gpt_fallback_response(prompt, context)
        await typing_simulation(update, gpt_text)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_QUESTIONS, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_QUESTIONS

async def zoo_impression_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    txt = update.message.text.lower()

    if is_positive_response(txt):
        r = (
            "–ß—É–¥–æ–≤–æ! üéâ –î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é—î–º–æ –º—ñ—Å—Ü–µ. "
            "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å 30% —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        )
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL
    elif is_negative_response(txt):
        rr = "–®–∫–æ–¥–∞ —Ü–µ —á—É—Ç–∏. –Ø–∫—â–æ –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî —è –∑–∞–≤–∂–¥–∏ —Ç—É—Ç!"
        await typing_simulation(update, rr)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_END, context.user_data)
        return STAGE_ZOO_END
    else:
        fallback = "–î—è–∫—É—é –∑–∞ –¥—É–º–∫—É! –ß–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?"
        await typing_simulation(update, fallback)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL

async def zoo_close_deal_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    txt = update.message.text.lower()

    if any(k in txt for k in ["–ø—Ä–∏–≤–∞—Ç","–º–æ–Ω–æ","–æ–ø–ª–∞—Ç","–≥–æ—Ç–æ–≤","–¥–∞–≤–∞–π—Ç–µ","—Å–∫–∏–Ω—å","—Ä–µ–∫–≤—ñ–∑–∏—Ç"]):
        r = (
            "–ß—É–¥–æ–≤–æ! –û—Å—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏:\n"
            "–ö–∞—Ä—Ç–∫–∞: 0000 0000 0000 0000\n\n"
            "–Ø–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ ‚Äî –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –Ω–∞–¥—ñ—à–ª—é –ø—Ä–æ–≥—Ä–∞–º—É —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è!"
        )
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_PAYMENT
    elif is_negative_response(txt):
        r2 = "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –ë—É–¥—É —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ!"
        await typing_simulation(update, r2)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_END, context.user_data)
        return STAGE_ZOO_END
    else:
        r3 = "–í–∏ –≥–æ—Ç–æ–≤—ñ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è? –í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ —á–∏ MonoBank?"
        await typing_simulation(update, r3)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_CLOSE_DEAL, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_CLOSE_DEAL

async def zoo_payment_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    txt = update.message.text.lower()

    if any(k in txt for k in ["–æ–ø–ª–∞—Ç","–≤—ñ–¥–ø—Ä–∞–≤","–≥–æ—Ç–æ–≤–æ","—Å–∫–∏–Ω—É–≤","—á–µ–∫"]):
        r = "–î—è–∫—É—é! –ü–µ—Ä–µ–≤—ñ—Ä—é –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—ñ—à–ª—é –¥–µ—Ç–∞–ª—ñ!"
        await typing_simulation(update, r)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_PAYMENT_CONFIRM, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_PAYMENT_CONFIRM
    else:
        rr = "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –∑ –æ–ø–ª–∞—Ç–æ—é ‚Äî –ø–∏—à—ñ—Ç—å, —è –¥–æ–ø–æ–º–æ–∂—É."
        await typing_simulation(update, rr)
        save_user_state(str(update.effective_user.id), STAGE_ZOO_PAYMENT, context.user_data)
        schedule_no_response_job(context, update.effective_chat.id)
        return STAGE_ZOO_PAYMENT

async def zoo_payment_confirm_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    r = (
        "–î—è–∫—É—é –∑–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è! –í–∞—à–µ –º—ñ—Å—Ü–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ. "
        "–ù–µ–∑–∞–±–∞—Ä–æ–º –Ω–∞–¥—ñ—à–ª—é –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –Ø–∫—â–æ –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å!"
    )
    await typing_simulation(update, r)
    return ConversationHandler.END

# ============================
# /cancel
# ============================
async def cancel_command(update:Update, context:ContextTypes.DEFAULT_TYPE):
    cancel_no_response_job(context)
    logger.info("User canceled conversation")
    t = "–î–æ–±—Ä–µ, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–Ω–æ–≤—É!"
    await typing_simulation(update, t)
    return ConversationHandler.END

# ============================
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π fallback
# ============================
async def global_fallback_handler(update:Update, context:ContextTypes.DEFAULT_TYPE):
    """
    –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ ConversationHandler –Ω–µ –∑–∞–±—Ä–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    (—Ç.–µ. –Ω–∏–∫–∞–∫–æ–π —Å—Ç–µ–π—Ç –Ω–µ –ø–æ–¥–æ—à—ë–ª).
    """
    user_text = update.message.text.strip()
    gpt_text = await gpt_fallback_response(user_text, context)
    await typing_simulation(update, gpt_text)

# ============================
# Flask endpoints
# ============================
@app.route('/')
def index():
    return "–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î! –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π."

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == "POST":
        data = request.get_json(force=True)
        global application
        if not application:
            logger.error("No application.")
            return "No application"
        update = Update.de_json(data, application.bot)
        loop = application.bot_data.get("loop")
        if loop:
            asyncio.run_coroutine_threadsafe(application.process_update(update), loop)
        else:
            logger.error("No event loop to process update.")
    return "OK"

async def setup_webhook(url:str, app_ref):
    wh_url = f"{url}/webhook"
    await app_ref.bot.set_webhook(wh_url)
    logger.info("Webhook set to %s", wh_url)

async def run_bot():
    if is_bot_already_running():
        logger.error("Another instance is running. Exiting.")
        sys.exit(1)
    logger.info("Starting bot...")

    req = HTTPXRequest(connect_timeout=20, read_timeout=40)
    global application
    builder = ApplicationBuilder().token(BOT_TOKEN).request(req)
    application = builder.build()

    # ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            STAGE_SCENARIO_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_CAMP_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_CAMP_NO_PHONE_QA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_CAMP_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_CAMP_CHILDREN: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_CAMP_DETAILED: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_CAMP_END: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_GREET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_DEPARTURE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_TRAVEL_PARTY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_CHILD_AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_QUESTIONS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_IMPRESSION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_CLOSE_DEAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_PAYMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_PAYMENT_CONFIRM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ],
            STAGE_ZOO_END: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_command)],
        allow_reentry=True
    )
    application.add_handler(conv_handler, group=0)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π fallback (–µ—Å–ª–∏ ConversationHandler –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª)
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, global_fallback_handler),
        group=1
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    await setup_webhook(WEBHOOK_URL, application)
    await application.initialize()
    await application.start()

    loop = asyncio.get_running_loop()
    application.bot_data["loop"] = loop

    logger.info("Bot is online and ready.")

def start_flask():
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"Starting Flask on port {port}")
    app.run(host='0.0.0.0', port=port)

if __name__=="__main__":
    bot_thread = threading.Thread(target=lambda: asyncio.run(run_bot()), daemon=True)
    bot_thread.start()
    logger.info("Bot thread started. Now starting Flask...")
    start_flask()
